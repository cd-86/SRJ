// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_ssl.proto

package rbk.protocol;

public final class MessageSsl {
  private MessageSsl() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface Message_SSLOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_SSL)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    java.util.List<rbk.protocol.MessageSsl.Message_SSL_Command> 
        getCommandList();
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    rbk.protocol.MessageSsl.Message_SSL_Command getCommand(int index);
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    int getCommandCount();
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    java.util.List<? extends rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder> 
        getCommandOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder getCommandOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_SSL}
   */
  public static final class Message_SSL extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_SSL)
      Message_SSLOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_SSL.newBuilder() to construct.
    private Message_SSL(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_SSL() {
      command_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_SSL();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageSsl.Message_SSL.class, rbk.protocol.MessageSsl.Message_SSL.Builder.class);
    }

    public static final int COMMAND_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageSsl.Message_SSL_Command> command_;
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageSsl.Message_SSL_Command> getCommandList() {
      return command_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder> 
        getCommandOrBuilderList() {
      return command_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    @java.lang.Override
    public int getCommandCount() {
      return command_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageSsl.Message_SSL_Command getCommand(int index) {
      return command_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder getCommandOrBuilder(
        int index) {
      return command_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < command_.size(); i++) {
        output.writeMessage(1, command_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < command_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, command_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageSsl.Message_SSL)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageSsl.Message_SSL other = (rbk.protocol.MessageSsl.Message_SSL) obj;

      if (!getCommandList()
          .equals(other.getCommandList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCommandCount() > 0) {
        hash = (37 * hash) + COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getCommandList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageSsl.Message_SSL parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageSsl.Message_SSL parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageSsl.Message_SSL parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageSsl.Message_SSL prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_SSL}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_SSL)
        rbk.protocol.MessageSsl.Message_SSLOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageSsl.Message_SSL.class, rbk.protocol.MessageSsl.Message_SSL.Builder.class);
      }

      // Construct using rbk.protocol.MessageSsl.Message_SSL.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (commandBuilder_ == null) {
          command_ = java.util.Collections.emptyList();
        } else {
          command_ = null;
          commandBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageSsl.Message_SSL getDefaultInstanceForType() {
        return rbk.protocol.MessageSsl.Message_SSL.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageSsl.Message_SSL build() {
        rbk.protocol.MessageSsl.Message_SSL result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageSsl.Message_SSL buildPartial() {
        rbk.protocol.MessageSsl.Message_SSL result = new rbk.protocol.MessageSsl.Message_SSL(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageSsl.Message_SSL result) {
        if (commandBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            command_ = java.util.Collections.unmodifiableList(command_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.command_ = command_;
        } else {
          result.command_ = commandBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageSsl.Message_SSL result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageSsl.Message_SSL) {
          return mergeFrom((rbk.protocol.MessageSsl.Message_SSL)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageSsl.Message_SSL other) {
        if (other == rbk.protocol.MessageSsl.Message_SSL.getDefaultInstance()) return this;
        if (commandBuilder_ == null) {
          if (!other.command_.isEmpty()) {
            if (command_.isEmpty()) {
              command_ = other.command_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCommandIsMutable();
              command_.addAll(other.command_);
            }
            onChanged();
          }
        } else {
          if (!other.command_.isEmpty()) {
            if (commandBuilder_.isEmpty()) {
              commandBuilder_.dispose();
              commandBuilder_ = null;
              command_ = other.command_;
              bitField0_ = (bitField0_ & ~0x00000001);
              commandBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCommandFieldBuilder() : null;
            } else {
              commandBuilder_.addAllMessages(other.command_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                rbk.protocol.MessageSsl.Message_SSL_Command m =
                    input.readMessage(
                        rbk.protocol.MessageSsl.Message_SSL_Command.parser(),
                        extensionRegistry);
                if (commandBuilder_ == null) {
                  ensureCommandIsMutable();
                  command_.add(m);
                } else {
                  commandBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<rbk.protocol.MessageSsl.Message_SSL_Command> command_ =
        java.util.Collections.emptyList();
      private void ensureCommandIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          command_ = new java.util.ArrayList<rbk.protocol.MessageSsl.Message_SSL_Command>(command_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageSsl.Message_SSL_Command, rbk.protocol.MessageSsl.Message_SSL_Command.Builder, rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder> commandBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public java.util.List<rbk.protocol.MessageSsl.Message_SSL_Command> getCommandList() {
        if (commandBuilder_ == null) {
          return java.util.Collections.unmodifiableList(command_);
        } else {
          return commandBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public int getCommandCount() {
        if (commandBuilder_ == null) {
          return command_.size();
        } else {
          return commandBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public rbk.protocol.MessageSsl.Message_SSL_Command getCommand(int index) {
        if (commandBuilder_ == null) {
          return command_.get(index);
        } else {
          return commandBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder setCommand(
          int index, rbk.protocol.MessageSsl.Message_SSL_Command value) {
        if (commandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandIsMutable();
          command_.set(index, value);
          onChanged();
        } else {
          commandBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder setCommand(
          int index, rbk.protocol.MessageSsl.Message_SSL_Command.Builder builderForValue) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          command_.set(index, builderForValue.build());
          onChanged();
        } else {
          commandBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder addCommand(rbk.protocol.MessageSsl.Message_SSL_Command value) {
        if (commandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandIsMutable();
          command_.add(value);
          onChanged();
        } else {
          commandBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder addCommand(
          int index, rbk.protocol.MessageSsl.Message_SSL_Command value) {
        if (commandBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCommandIsMutable();
          command_.add(index, value);
          onChanged();
        } else {
          commandBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder addCommand(
          rbk.protocol.MessageSsl.Message_SSL_Command.Builder builderForValue) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          command_.add(builderForValue.build());
          onChanged();
        } else {
          commandBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder addCommand(
          int index, rbk.protocol.MessageSsl.Message_SSL_Command.Builder builderForValue) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          command_.add(index, builderForValue.build());
          onChanged();
        } else {
          commandBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder addAllCommand(
          java.lang.Iterable<? extends rbk.protocol.MessageSsl.Message_SSL_Command> values) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, command_);
          onChanged();
        } else {
          commandBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder clearCommand() {
        if (commandBuilder_ == null) {
          command_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          commandBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public Builder removeCommand(int index) {
        if (commandBuilder_ == null) {
          ensureCommandIsMutable();
          command_.remove(index);
          onChanged();
        } else {
          commandBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public rbk.protocol.MessageSsl.Message_SSL_Command.Builder getCommandBuilder(
          int index) {
        return getCommandFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder getCommandOrBuilder(
          int index) {
        if (commandBuilder_ == null) {
          return command_.get(index);  } else {
          return commandBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder> 
           getCommandOrBuilderList() {
        if (commandBuilder_ != null) {
          return commandBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(command_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public rbk.protocol.MessageSsl.Message_SSL_Command.Builder addCommandBuilder() {
        return getCommandFieldBuilder().addBuilder(
            rbk.protocol.MessageSsl.Message_SSL_Command.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public rbk.protocol.MessageSsl.Message_SSL_Command.Builder addCommandBuilder(
          int index) {
        return getCommandFieldBuilder().addBuilder(
            index, rbk.protocol.MessageSsl.Message_SSL_Command.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_SSL_Command command = 1;</code>
       */
      public java.util.List<rbk.protocol.MessageSsl.Message_SSL_Command.Builder> 
           getCommandBuilderList() {
        return getCommandFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageSsl.Message_SSL_Command, rbk.protocol.MessageSsl.Message_SSL_Command.Builder, rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder> 
          getCommandFieldBuilder() {
        if (commandBuilder_ == null) {
          commandBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageSsl.Message_SSL_Command, rbk.protocol.MessageSsl.Message_SSL_Command.Builder, rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder>(
                  command_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          command_ = null;
        }
        return commandBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_SSL)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_SSL)
    private static final rbk.protocol.MessageSsl.Message_SSL DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageSsl.Message_SSL();
    }

    public static rbk.protocol.MessageSsl.Message_SSL getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_SSL>
        PARSER = new com.google.protobuf.AbstractParser<Message_SSL>() {
      @java.lang.Override
      public Message_SSL parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_SSL> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_SSL> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageSsl.Message_SSL getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_SSL_CommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_SSL_Command)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The unique ID of the robot, as identified by SSL-Vision.
     * </pre>
     *
     * <code>int32 robot_id = 1;</code>
     * @return The robotId.
     */
    int getRobotId();

    /**
     * <pre>
     * Desired forward drive velocity in meters / second.
     * </pre>
     *
     * <code>float velocity_x = 2;</code>
     * @return The velocityX.
     */
    float getVelocityX();

    /**
     * <pre>
     * Desired sideways left drive velocity in meters / second.
     * </pre>
     *
     * <code>float velocity_y = 3;</code>
     * @return The velocityY.
     */
    float getVelocityY();

    /**
     * <pre>
     * Desired counterclockwise angular velocity in radians / second.
     * </pre>
     *
     * <code>float velocity_r = 4;</code>
     * @return The velocityR.
     */
    float getVelocityR();

    /**
     * <pre>
     * Desired flat kick speed, in meters / second.
     * If this optional field is missing, then no flat kick command should be
     * sent.
     * </pre>
     *
     * <code>float flat_kick = 5;</code>
     * @return The flatKick.
     */
    float getFlatKick();

    /**
     * <pre>
     * Desired chip kick distance, in meters.
     * If this optional field is missing, then no flat kick command should be
     * sent. If this field is present along with the flat_kick field, the
     * flat_kick command takes precedence.
     * </pre>
     *
     * <code>float chip_kick = 6;</code>
     * @return The chipKick.
     */
    float getChipKick();

    /**
     * <pre>
     * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
     * that can be imparted to the ball, and +1 is the maximum forward-spin
     * that can be imparted to the ball.
     * </pre>
     *
     * <code>float dribbler_spin = 7;</code>
     * @return The dribblerSpin.
     */
    float getDribblerSpin();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_SSL_Command}
   */
  public static final class Message_SSL_Command extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_SSL_Command)
      Message_SSL_CommandOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_SSL_Command.newBuilder() to construct.
    private Message_SSL_Command(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_SSL_Command() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_SSL_Command();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_Command_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_Command_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageSsl.Message_SSL_Command.class, rbk.protocol.MessageSsl.Message_SSL_Command.Builder.class);
    }

    public static final int ROBOT_ID_FIELD_NUMBER = 1;
    private int robotId_ = 0;
    /**
     * <pre>
     * The unique ID of the robot, as identified by SSL-Vision.
     * </pre>
     *
     * <code>int32 robot_id = 1;</code>
     * @return The robotId.
     */
    @java.lang.Override
    public int getRobotId() {
      return robotId_;
    }

    public static final int VELOCITY_X_FIELD_NUMBER = 2;
    private float velocityX_ = 0F;
    /**
     * <pre>
     * Desired forward drive velocity in meters / second.
     * </pre>
     *
     * <code>float velocity_x = 2;</code>
     * @return The velocityX.
     */
    @java.lang.Override
    public float getVelocityX() {
      return velocityX_;
    }

    public static final int VELOCITY_Y_FIELD_NUMBER = 3;
    private float velocityY_ = 0F;
    /**
     * <pre>
     * Desired sideways left drive velocity in meters / second.
     * </pre>
     *
     * <code>float velocity_y = 3;</code>
     * @return The velocityY.
     */
    @java.lang.Override
    public float getVelocityY() {
      return velocityY_;
    }

    public static final int VELOCITY_R_FIELD_NUMBER = 4;
    private float velocityR_ = 0F;
    /**
     * <pre>
     * Desired counterclockwise angular velocity in radians / second.
     * </pre>
     *
     * <code>float velocity_r = 4;</code>
     * @return The velocityR.
     */
    @java.lang.Override
    public float getVelocityR() {
      return velocityR_;
    }

    public static final int FLAT_KICK_FIELD_NUMBER = 5;
    private float flatKick_ = 0F;
    /**
     * <pre>
     * Desired flat kick speed, in meters / second.
     * If this optional field is missing, then no flat kick command should be
     * sent.
     * </pre>
     *
     * <code>float flat_kick = 5;</code>
     * @return The flatKick.
     */
    @java.lang.Override
    public float getFlatKick() {
      return flatKick_;
    }

    public static final int CHIP_KICK_FIELD_NUMBER = 6;
    private float chipKick_ = 0F;
    /**
     * <pre>
     * Desired chip kick distance, in meters.
     * If this optional field is missing, then no flat kick command should be
     * sent. If this field is present along with the flat_kick field, the
     * flat_kick command takes precedence.
     * </pre>
     *
     * <code>float chip_kick = 6;</code>
     * @return The chipKick.
     */
    @java.lang.Override
    public float getChipKick() {
      return chipKick_;
    }

    public static final int DRIBBLER_SPIN_FIELD_NUMBER = 7;
    private float dribblerSpin_ = 0F;
    /**
     * <pre>
     * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
     * that can be imparted to the ball, and +1 is the maximum forward-spin
     * that can be imparted to the ball.
     * </pre>
     *
     * <code>float dribbler_spin = 7;</code>
     * @return The dribblerSpin.
     */
    @java.lang.Override
    public float getDribblerSpin() {
      return dribblerSpin_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (robotId_ != 0) {
        output.writeInt32(1, robotId_);
      }
      if (java.lang.Float.floatToRawIntBits(velocityX_) != 0) {
        output.writeFloat(2, velocityX_);
      }
      if (java.lang.Float.floatToRawIntBits(velocityY_) != 0) {
        output.writeFloat(3, velocityY_);
      }
      if (java.lang.Float.floatToRawIntBits(velocityR_) != 0) {
        output.writeFloat(4, velocityR_);
      }
      if (java.lang.Float.floatToRawIntBits(flatKick_) != 0) {
        output.writeFloat(5, flatKick_);
      }
      if (java.lang.Float.floatToRawIntBits(chipKick_) != 0) {
        output.writeFloat(6, chipKick_);
      }
      if (java.lang.Float.floatToRawIntBits(dribblerSpin_) != 0) {
        output.writeFloat(7, dribblerSpin_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (robotId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, robotId_);
      }
      if (java.lang.Float.floatToRawIntBits(velocityX_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, velocityX_);
      }
      if (java.lang.Float.floatToRawIntBits(velocityY_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, velocityY_);
      }
      if (java.lang.Float.floatToRawIntBits(velocityR_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, velocityR_);
      }
      if (java.lang.Float.floatToRawIntBits(flatKick_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, flatKick_);
      }
      if (java.lang.Float.floatToRawIntBits(chipKick_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, chipKick_);
      }
      if (java.lang.Float.floatToRawIntBits(dribblerSpin_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, dribblerSpin_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageSsl.Message_SSL_Command)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageSsl.Message_SSL_Command other = (rbk.protocol.MessageSsl.Message_SSL_Command) obj;

      if (getRobotId()
          != other.getRobotId()) return false;
      if (java.lang.Float.floatToIntBits(getVelocityX())
          != java.lang.Float.floatToIntBits(
              other.getVelocityX())) return false;
      if (java.lang.Float.floatToIntBits(getVelocityY())
          != java.lang.Float.floatToIntBits(
              other.getVelocityY())) return false;
      if (java.lang.Float.floatToIntBits(getVelocityR())
          != java.lang.Float.floatToIntBits(
              other.getVelocityR())) return false;
      if (java.lang.Float.floatToIntBits(getFlatKick())
          != java.lang.Float.floatToIntBits(
              other.getFlatKick())) return false;
      if (java.lang.Float.floatToIntBits(getChipKick())
          != java.lang.Float.floatToIntBits(
              other.getChipKick())) return false;
      if (java.lang.Float.floatToIntBits(getDribblerSpin())
          != java.lang.Float.floatToIntBits(
              other.getDribblerSpin())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ROBOT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getRobotId();
      hash = (37 * hash) + VELOCITY_X_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityX());
      hash = (37 * hash) + VELOCITY_Y_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityY());
      hash = (37 * hash) + VELOCITY_R_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityR());
      hash = (37 * hash) + FLAT_KICK_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getFlatKick());
      hash = (37 * hash) + CHIP_KICK_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getChipKick());
      hash = (37 * hash) + DRIBBLER_SPIN_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getDribblerSpin());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageSsl.Message_SSL_Command parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageSsl.Message_SSL_Command parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageSsl.Message_SSL_Command parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageSsl.Message_SSL_Command prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_SSL_Command}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_SSL_Command)
        rbk.protocol.MessageSsl.Message_SSL_CommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_Command_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_Command_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageSsl.Message_SSL_Command.class, rbk.protocol.MessageSsl.Message_SSL_Command.Builder.class);
      }

      // Construct using rbk.protocol.MessageSsl.Message_SSL_Command.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        robotId_ = 0;
        velocityX_ = 0F;
        velocityY_ = 0F;
        velocityR_ = 0F;
        flatKick_ = 0F;
        chipKick_ = 0F;
        dribblerSpin_ = 0F;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageSsl.internal_static_rbk_protocol_Message_SSL_Command_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageSsl.Message_SSL_Command getDefaultInstanceForType() {
        return rbk.protocol.MessageSsl.Message_SSL_Command.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageSsl.Message_SSL_Command build() {
        rbk.protocol.MessageSsl.Message_SSL_Command result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageSsl.Message_SSL_Command buildPartial() {
        rbk.protocol.MessageSsl.Message_SSL_Command result = new rbk.protocol.MessageSsl.Message_SSL_Command(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(rbk.protocol.MessageSsl.Message_SSL_Command result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.robotId_ = robotId_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.velocityX_ = velocityX_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.velocityY_ = velocityY_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.velocityR_ = velocityR_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.flatKick_ = flatKick_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.chipKick_ = chipKick_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.dribblerSpin_ = dribblerSpin_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageSsl.Message_SSL_Command) {
          return mergeFrom((rbk.protocol.MessageSsl.Message_SSL_Command)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageSsl.Message_SSL_Command other) {
        if (other == rbk.protocol.MessageSsl.Message_SSL_Command.getDefaultInstance()) return this;
        if (other.getRobotId() != 0) {
          setRobotId(other.getRobotId());
        }
        if (other.getVelocityX() != 0F) {
          setVelocityX(other.getVelocityX());
        }
        if (other.getVelocityY() != 0F) {
          setVelocityY(other.getVelocityY());
        }
        if (other.getVelocityR() != 0F) {
          setVelocityR(other.getVelocityR());
        }
        if (other.getFlatKick() != 0F) {
          setFlatKick(other.getFlatKick());
        }
        if (other.getChipKick() != 0F) {
          setChipKick(other.getChipKick());
        }
        if (other.getDribblerSpin() != 0F) {
          setDribblerSpin(other.getDribblerSpin());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                robotId_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 21: {
                velocityX_ = input.readFloat();
                bitField0_ |= 0x00000002;
                break;
              } // case 21
              case 29: {
                velocityY_ = input.readFloat();
                bitField0_ |= 0x00000004;
                break;
              } // case 29
              case 37: {
                velocityR_ = input.readFloat();
                bitField0_ |= 0x00000008;
                break;
              } // case 37
              case 45: {
                flatKick_ = input.readFloat();
                bitField0_ |= 0x00000010;
                break;
              } // case 45
              case 53: {
                chipKick_ = input.readFloat();
                bitField0_ |= 0x00000020;
                break;
              } // case 53
              case 61: {
                dribblerSpin_ = input.readFloat();
                bitField0_ |= 0x00000040;
                break;
              } // case 61
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int robotId_ ;
      /**
       * <pre>
       * The unique ID of the robot, as identified by SSL-Vision.
       * </pre>
       *
       * <code>int32 robot_id = 1;</code>
       * @return The robotId.
       */
      @java.lang.Override
      public int getRobotId() {
        return robotId_;
      }
      /**
       * <pre>
       * The unique ID of the robot, as identified by SSL-Vision.
       * </pre>
       *
       * <code>int32 robot_id = 1;</code>
       * @param value The robotId to set.
       * @return This builder for chaining.
       */
      public Builder setRobotId(int value) {

        robotId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique ID of the robot, as identified by SSL-Vision.
       * </pre>
       *
       * <code>int32 robot_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRobotId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        robotId_ = 0;
        onChanged();
        return this;
      }

      private float velocityX_ ;
      /**
       * <pre>
       * Desired forward drive velocity in meters / second.
       * </pre>
       *
       * <code>float velocity_x = 2;</code>
       * @return The velocityX.
       */
      @java.lang.Override
      public float getVelocityX() {
        return velocityX_;
      }
      /**
       * <pre>
       * Desired forward drive velocity in meters / second.
       * </pre>
       *
       * <code>float velocity_x = 2;</code>
       * @param value The velocityX to set.
       * @return This builder for chaining.
       */
      public Builder setVelocityX(float value) {

        velocityX_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Desired forward drive velocity in meters / second.
       * </pre>
       *
       * <code>float velocity_x = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVelocityX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        velocityX_ = 0F;
        onChanged();
        return this;
      }

      private float velocityY_ ;
      /**
       * <pre>
       * Desired sideways left drive velocity in meters / second.
       * </pre>
       *
       * <code>float velocity_y = 3;</code>
       * @return The velocityY.
       */
      @java.lang.Override
      public float getVelocityY() {
        return velocityY_;
      }
      /**
       * <pre>
       * Desired sideways left drive velocity in meters / second.
       * </pre>
       *
       * <code>float velocity_y = 3;</code>
       * @param value The velocityY to set.
       * @return This builder for chaining.
       */
      public Builder setVelocityY(float value) {

        velocityY_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Desired sideways left drive velocity in meters / second.
       * </pre>
       *
       * <code>float velocity_y = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearVelocityY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        velocityY_ = 0F;
        onChanged();
        return this;
      }

      private float velocityR_ ;
      /**
       * <pre>
       * Desired counterclockwise angular velocity in radians / second.
       * </pre>
       *
       * <code>float velocity_r = 4;</code>
       * @return The velocityR.
       */
      @java.lang.Override
      public float getVelocityR() {
        return velocityR_;
      }
      /**
       * <pre>
       * Desired counterclockwise angular velocity in radians / second.
       * </pre>
       *
       * <code>float velocity_r = 4;</code>
       * @param value The velocityR to set.
       * @return This builder for chaining.
       */
      public Builder setVelocityR(float value) {

        velocityR_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Desired counterclockwise angular velocity in radians / second.
       * </pre>
       *
       * <code>float velocity_r = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearVelocityR() {
        bitField0_ = (bitField0_ & ~0x00000008);
        velocityR_ = 0F;
        onChanged();
        return this;
      }

      private float flatKick_ ;
      /**
       * <pre>
       * Desired flat kick speed, in meters / second.
       * If this optional field is missing, then no flat kick command should be
       * sent.
       * </pre>
       *
       * <code>float flat_kick = 5;</code>
       * @return The flatKick.
       */
      @java.lang.Override
      public float getFlatKick() {
        return flatKick_;
      }
      /**
       * <pre>
       * Desired flat kick speed, in meters / second.
       * If this optional field is missing, then no flat kick command should be
       * sent.
       * </pre>
       *
       * <code>float flat_kick = 5;</code>
       * @param value The flatKick to set.
       * @return This builder for chaining.
       */
      public Builder setFlatKick(float value) {

        flatKick_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Desired flat kick speed, in meters / second.
       * If this optional field is missing, then no flat kick command should be
       * sent.
       * </pre>
       *
       * <code>float flat_kick = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlatKick() {
        bitField0_ = (bitField0_ & ~0x00000010);
        flatKick_ = 0F;
        onChanged();
        return this;
      }

      private float chipKick_ ;
      /**
       * <pre>
       * Desired chip kick distance, in meters.
       * If this optional field is missing, then no flat kick command should be
       * sent. If this field is present along with the flat_kick field, the
       * flat_kick command takes precedence.
       * </pre>
       *
       * <code>float chip_kick = 6;</code>
       * @return The chipKick.
       */
      @java.lang.Override
      public float getChipKick() {
        return chipKick_;
      }
      /**
       * <pre>
       * Desired chip kick distance, in meters.
       * If this optional field is missing, then no flat kick command should be
       * sent. If this field is present along with the flat_kick field, the
       * flat_kick command takes precedence.
       * </pre>
       *
       * <code>float chip_kick = 6;</code>
       * @param value The chipKick to set.
       * @return This builder for chaining.
       */
      public Builder setChipKick(float value) {

        chipKick_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Desired chip kick distance, in meters.
       * If this optional field is missing, then no flat kick command should be
       * sent. If this field is present along with the flat_kick field, the
       * flat_kick command takes precedence.
       * </pre>
       *
       * <code>float chip_kick = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearChipKick() {
        bitField0_ = (bitField0_ & ~0x00000020);
        chipKick_ = 0F;
        onChanged();
        return this;
      }

      private float dribblerSpin_ ;
      /**
       * <pre>
       * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
       * that can be imparted to the ball, and +1 is the maximum forward-spin
       * that can be imparted to the ball.
       * </pre>
       *
       * <code>float dribbler_spin = 7;</code>
       * @return The dribblerSpin.
       */
      @java.lang.Override
      public float getDribblerSpin() {
        return dribblerSpin_;
      }
      /**
       * <pre>
       * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
       * that can be imparted to the ball, and +1 is the maximum forward-spin
       * that can be imparted to the ball.
       * </pre>
       *
       * <code>float dribbler_spin = 7;</code>
       * @param value The dribblerSpin to set.
       * @return This builder for chaining.
       */
      public Builder setDribblerSpin(float value) {

        dribblerSpin_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Desired dribbler spin, from -1 to +1, where -1 is the maximum reverse-spin
       * that can be imparted to the ball, and +1 is the maximum forward-spin
       * that can be imparted to the ball.
       * </pre>
       *
       * <code>float dribbler_spin = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearDribblerSpin() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dribblerSpin_ = 0F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_SSL_Command)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_SSL_Command)
    private static final rbk.protocol.MessageSsl.Message_SSL_Command DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageSsl.Message_SSL_Command();
    }

    public static rbk.protocol.MessageSsl.Message_SSL_Command getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_SSL_Command>
        PARSER = new com.google.protobuf.AbstractParser<Message_SSL_Command>() {
      @java.lang.Override
      public Message_SSL_Command parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_SSL_Command> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_SSL_Command> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageSsl.Message_SSL_Command getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_SSL_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_SSL_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_SSL_Command_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_SSL_Command_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021message_ssl.proto\022\014rbk.protocol\"A\n\013Mes" +
      "sage_SSL\0222\n\007command\030\001 \003(\0132!.rbk.protocol" +
      ".Message_SSL_Command\"\240\001\n\023Message_SSL_Com" +
      "mand\022\020\n\010robot_id\030\001 \001(\005\022\022\n\nvelocity_x\030\002 \001" +
      "(\002\022\022\n\nvelocity_y\030\003 \001(\002\022\022\n\nvelocity_r\030\004 \001" +
      "(\002\022\021\n\tflat_kick\030\005 \001(\002\022\021\n\tchip_kick\030\006 \001(\002" +
      "\022\025\n\rdribbler_spin\030\007 \001(\002b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_rbk_protocol_Message_SSL_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_rbk_protocol_Message_SSL_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_SSL_descriptor,
        new java.lang.String[] { "Command", });
    internal_static_rbk_protocol_Message_SSL_Command_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_rbk_protocol_Message_SSL_Command_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_SSL_Command_descriptor,
        new java.lang.String[] { "RobotId", "VelocityX", "VelocityY", "VelocityR", "FlatKick", "ChipKick", "DribblerSpin", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
