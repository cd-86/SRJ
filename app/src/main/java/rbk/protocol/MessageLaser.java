// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_laser.proto

package rbk.protocol;

public final class MessageLaser {
  private MessageLaser() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface Message_LaserInstallInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserInstallInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>double x = 1;</code>
     * @return The x.
     */
    double getX();

    /**
     * <code>double y = 2;</code>
     * @return The y.
     */
    double getY();

    /**
     * <code>double z = 3;</code>
     * @return The z.
     */
    double getZ();

    /**
     * <code>double yaw = 4;</code>
     * @return The yaw.
     */
    double getYaw();

    /**
     * <code>bool upside = 5;</code>
     * @return The upside.
     */
    boolean getUpside();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserInstallInfo}
   */
  public static final class Message_LaserInstallInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserInstallInfo)
      Message_LaserInstallInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserInstallInfo.newBuilder() to construct.
    private Message_LaserInstallInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserInstallInfo() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserInstallInfo();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserInstallInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserInstallInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserInstallInfo.class, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder.class);
    }

    public static final int X_FIELD_NUMBER = 1;
    private double x_ = 0D;
    /**
     * <code>double x = 1;</code>
     * @return The x.
     */
    @java.lang.Override
    public double getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private double y_ = 0D;
    /**
     * <code>double y = 2;</code>
     * @return The y.
     */
    @java.lang.Override
    public double getY() {
      return y_;
    }

    public static final int Z_FIELD_NUMBER = 3;
    private double z_ = 0D;
    /**
     * <code>double z = 3;</code>
     * @return The z.
     */
    @java.lang.Override
    public double getZ() {
      return z_;
    }

    public static final int YAW_FIELD_NUMBER = 4;
    private double yaw_ = 0D;
    /**
     * <code>double yaw = 4;</code>
     * @return The yaw.
     */
    @java.lang.Override
    public double getYaw() {
      return yaw_;
    }

    public static final int UPSIDE_FIELD_NUMBER = 5;
    private boolean upside_ = false;
    /**
     * <code>bool upside = 5;</code>
     * @return The upside.
     */
    @java.lang.Override
    public boolean getUpside() {
      return upside_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(x_) != 0) {
        output.writeDouble(1, x_);
      }
      if (java.lang.Double.doubleToRawLongBits(y_) != 0) {
        output.writeDouble(2, y_);
      }
      if (java.lang.Double.doubleToRawLongBits(z_) != 0) {
        output.writeDouble(3, z_);
      }
      if (java.lang.Double.doubleToRawLongBits(yaw_) != 0) {
        output.writeDouble(4, yaw_);
      }
      if (upside_ != false) {
        output.writeBool(5, upside_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(x_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, x_);
      }
      if (java.lang.Double.doubleToRawLongBits(y_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, y_);
      }
      if (java.lang.Double.doubleToRawLongBits(z_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, z_);
      }
      if (java.lang.Double.doubleToRawLongBits(yaw_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, yaw_);
      }
      if (upside_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, upside_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserInstallInfo)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserInstallInfo other = (rbk.protocol.MessageLaser.Message_LaserInstallInfo) obj;

      if (java.lang.Double.doubleToLongBits(getX())
          != java.lang.Double.doubleToLongBits(
              other.getX())) return false;
      if (java.lang.Double.doubleToLongBits(getY())
          != java.lang.Double.doubleToLongBits(
              other.getY())) return false;
      if (java.lang.Double.doubleToLongBits(getZ())
          != java.lang.Double.doubleToLongBits(
              other.getZ())) return false;
      if (java.lang.Double.doubleToLongBits(getYaw())
          != java.lang.Double.doubleToLongBits(
              other.getYaw())) return false;
      if (getUpside()
          != other.getUpside()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getX()));
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getY()));
      hash = (37 * hash) + Z_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getZ()));
      hash = (37 * hash) + YAW_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getYaw()));
      hash = (37 * hash) + UPSIDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUpside());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserInstallInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserInstallInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserInstallInfo)
        rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserInstallInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserInstallInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserInstallInfo.class, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserInstallInfo.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        x_ = 0D;
        y_ = 0D;
        z_ = 0D;
        yaw_ = 0D;
        upside_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserInstallInfo_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo build() {
        rbk.protocol.MessageLaser.Message_LaserInstallInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserInstallInfo result = new rbk.protocol.MessageLaser.Message_LaserInstallInfo(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserInstallInfo result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.x_ = x_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.y_ = y_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.z_ = z_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.yaw_ = yaw_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.upside_ = upside_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserInstallInfo) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserInstallInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserInstallInfo other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance()) return this;
        if (other.getX() != 0D) {
          setX(other.getX());
        }
        if (other.getY() != 0D) {
          setY(other.getY());
        }
        if (other.getZ() != 0D) {
          setZ(other.getZ());
        }
        if (other.getYaw() != 0D) {
          setYaw(other.getYaw());
        }
        if (other.getUpside() != false) {
          setUpside(other.getUpside());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                x_ = input.readDouble();
                bitField0_ |= 0x00000001;
                break;
              } // case 9
              case 17: {
                y_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                z_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 33: {
                yaw_ = input.readDouble();
                bitField0_ |= 0x00000008;
                break;
              } // case 33
              case 40: {
                upside_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double x_ ;
      /**
       * <code>double x = 1;</code>
       * @return The x.
       */
      @java.lang.Override
      public double getX() {
        return x_;
      }
      /**
       * <code>double x = 1;</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(double value) {

        x_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>double x = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0D;
        onChanged();
        return this;
      }

      private double y_ ;
      /**
       * <code>double y = 2;</code>
       * @return The y.
       */
      @java.lang.Override
      public double getY() {
        return y_;
      }
      /**
       * <code>double y = 2;</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(double value) {

        y_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>double y = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0D;
        onChanged();
        return this;
      }

      private double z_ ;
      /**
       * <code>double z = 3;</code>
       * @return The z.
       */
      @java.lang.Override
      public double getZ() {
        return z_;
      }
      /**
       * <code>double z = 3;</code>
       * @param value The z to set.
       * @return This builder for chaining.
       */
      public Builder setZ(double value) {

        z_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>double z = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        z_ = 0D;
        onChanged();
        return this;
      }

      private double yaw_ ;
      /**
       * <code>double yaw = 4;</code>
       * @return The yaw.
       */
      @java.lang.Override
      public double getYaw() {
        return yaw_;
      }
      /**
       * <code>double yaw = 4;</code>
       * @param value The yaw to set.
       * @return This builder for chaining.
       */
      public Builder setYaw(double value) {

        yaw_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>double yaw = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearYaw() {
        bitField0_ = (bitField0_ & ~0x00000008);
        yaw_ = 0D;
        onChanged();
        return this;
      }

      private boolean upside_ ;
      /**
       * <code>bool upside = 5;</code>
       * @return The upside.
       */
      @java.lang.Override
      public boolean getUpside() {
        return upside_;
      }
      /**
       * <code>bool upside = 5;</code>
       * @param value The upside to set.
       * @return This builder for chaining.
       */
      public Builder setUpside(boolean value) {

        upside_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>bool upside = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearUpside() {
        bitField0_ = (bitField0_ & ~0x00000010);
        upside_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserInstallInfo)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserInstallInfo)
    private static final rbk.protocol.MessageLaser.Message_LaserInstallInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserInstallInfo();
    }

    public static rbk.protocol.MessageLaser.Message_LaserInstallInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserInstallInfo>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserInstallInfo>() {
      @java.lang.Override
      public Message_LaserInstallInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserInstallInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserInstallInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserInstallInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserDeviceInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserDeviceInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string device_name = 1;</code>
     * @return The deviceName.
     */
    java.lang.String getDeviceName();
    /**
     * <code>string device_name = 1;</code>
     * @return The bytes for deviceName.
     */
    com.google.protobuf.ByteString
        getDeviceNameBytes();

    /**
     * <code>double min_range = 2;</code>
     * @return The minRange.
     */
    double getMinRange();

    /**
     * <code>double max_range = 3;</code>
     * @return The maxRange.
     */
    double getMaxRange();

    /**
     * <code>double min_angle = 4;</code>
     * @return The minAngle.
     */
    double getMinAngle();

    /**
     * <code>double max_angle = 5;</code>
     * @return The maxAngle.
     */
    double getMaxAngle();

    /**
     * <code>double real_step = 6;</code>
     * @return The realStep.
     */
    double getRealStep();

    /**
     * <code>double pub_step = 7;</code>
     * @return The pubStep.
     */
    double getPubStep();

    /**
     * <code>double time_increment = 8;</code>
     * @return The timeIncrement.
     */
    double getTimeIncrement();

    /**
     * <code>double scan_freq = 9;</code>
     * @return The scanFreq.
     */
    double getScanFreq();

    /**
     * <code>uint32 id = 10;</code>
     * @return The id.
     */
    int getId();

    /**
     * <code>bool isClockWise = 11;</code>
     * @return The isClockWise.
     */
    boolean getIsClockWise();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserDeviceInfo}
   */
  public static final class Message_LaserDeviceInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserDeviceInfo)
      Message_LaserDeviceInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserDeviceInfo.newBuilder() to construct.
    private Message_LaserDeviceInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserDeviceInfo() {
      deviceName_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserDeviceInfo();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserDeviceInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserDeviceInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserDeviceInfo.class, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder.class);
    }

    public static final int DEVICE_NAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object deviceName_ = "";
    /**
     * <code>string device_name = 1;</code>
     * @return The deviceName.
     */
    @java.lang.Override
    public java.lang.String getDeviceName() {
      java.lang.Object ref = deviceName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deviceName_ = s;
        return s;
      }
    }
    /**
     * <code>string device_name = 1;</code>
     * @return The bytes for deviceName.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDeviceNameBytes() {
      java.lang.Object ref = deviceName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deviceName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MIN_RANGE_FIELD_NUMBER = 2;
    private double minRange_ = 0D;
    /**
     * <code>double min_range = 2;</code>
     * @return The minRange.
     */
    @java.lang.Override
    public double getMinRange() {
      return minRange_;
    }

    public static final int MAX_RANGE_FIELD_NUMBER = 3;
    private double maxRange_ = 0D;
    /**
     * <code>double max_range = 3;</code>
     * @return The maxRange.
     */
    @java.lang.Override
    public double getMaxRange() {
      return maxRange_;
    }

    public static final int MIN_ANGLE_FIELD_NUMBER = 4;
    private double minAngle_ = 0D;
    /**
     * <code>double min_angle = 4;</code>
     * @return The minAngle.
     */
    @java.lang.Override
    public double getMinAngle() {
      return minAngle_;
    }

    public static final int MAX_ANGLE_FIELD_NUMBER = 5;
    private double maxAngle_ = 0D;
    /**
     * <code>double max_angle = 5;</code>
     * @return The maxAngle.
     */
    @java.lang.Override
    public double getMaxAngle() {
      return maxAngle_;
    }

    public static final int REAL_STEP_FIELD_NUMBER = 6;
    private double realStep_ = 0D;
    /**
     * <code>double real_step = 6;</code>
     * @return The realStep.
     */
    @java.lang.Override
    public double getRealStep() {
      return realStep_;
    }

    public static final int PUB_STEP_FIELD_NUMBER = 7;
    private double pubStep_ = 0D;
    /**
     * <code>double pub_step = 7;</code>
     * @return The pubStep.
     */
    @java.lang.Override
    public double getPubStep() {
      return pubStep_;
    }

    public static final int TIME_INCREMENT_FIELD_NUMBER = 8;
    private double timeIncrement_ = 0D;
    /**
     * <code>double time_increment = 8;</code>
     * @return The timeIncrement.
     */
    @java.lang.Override
    public double getTimeIncrement() {
      return timeIncrement_;
    }

    public static final int SCAN_FREQ_FIELD_NUMBER = 9;
    private double scanFreq_ = 0D;
    /**
     * <code>double scan_freq = 9;</code>
     * @return The scanFreq.
     */
    @java.lang.Override
    public double getScanFreq() {
      return scanFreq_;
    }

    public static final int ID_FIELD_NUMBER = 10;
    private int id_ = 0;
    /**
     * <code>uint32 id = 10;</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }

    public static final int ISCLOCKWISE_FIELD_NUMBER = 11;
    private boolean isClockWise_ = false;
    /**
     * <code>bool isClockWise = 11;</code>
     * @return The isClockWise.
     */
    @java.lang.Override
    public boolean getIsClockWise() {
      return isClockWise_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(deviceName_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, deviceName_);
      }
      if (java.lang.Double.doubleToRawLongBits(minRange_) != 0) {
        output.writeDouble(2, minRange_);
      }
      if (java.lang.Double.doubleToRawLongBits(maxRange_) != 0) {
        output.writeDouble(3, maxRange_);
      }
      if (java.lang.Double.doubleToRawLongBits(minAngle_) != 0) {
        output.writeDouble(4, minAngle_);
      }
      if (java.lang.Double.doubleToRawLongBits(maxAngle_) != 0) {
        output.writeDouble(5, maxAngle_);
      }
      if (java.lang.Double.doubleToRawLongBits(realStep_) != 0) {
        output.writeDouble(6, realStep_);
      }
      if (java.lang.Double.doubleToRawLongBits(pubStep_) != 0) {
        output.writeDouble(7, pubStep_);
      }
      if (java.lang.Double.doubleToRawLongBits(timeIncrement_) != 0) {
        output.writeDouble(8, timeIncrement_);
      }
      if (java.lang.Double.doubleToRawLongBits(scanFreq_) != 0) {
        output.writeDouble(9, scanFreq_);
      }
      if (id_ != 0) {
        output.writeUInt32(10, id_);
      }
      if (isClockWise_ != false) {
        output.writeBool(11, isClockWise_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(deviceName_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, deviceName_);
      }
      if (java.lang.Double.doubleToRawLongBits(minRange_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, minRange_);
      }
      if (java.lang.Double.doubleToRawLongBits(maxRange_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, maxRange_);
      }
      if (java.lang.Double.doubleToRawLongBits(minAngle_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, minAngle_);
      }
      if (java.lang.Double.doubleToRawLongBits(maxAngle_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, maxAngle_);
      }
      if (java.lang.Double.doubleToRawLongBits(realStep_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, realStep_);
      }
      if (java.lang.Double.doubleToRawLongBits(pubStep_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, pubStep_);
      }
      if (java.lang.Double.doubleToRawLongBits(timeIncrement_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, timeIncrement_);
      }
      if (java.lang.Double.doubleToRawLongBits(scanFreq_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, scanFreq_);
      }
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, id_);
      }
      if (isClockWise_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isClockWise_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserDeviceInfo)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserDeviceInfo other = (rbk.protocol.MessageLaser.Message_LaserDeviceInfo) obj;

      if (!getDeviceName()
          .equals(other.getDeviceName())) return false;
      if (java.lang.Double.doubleToLongBits(getMinRange())
          != java.lang.Double.doubleToLongBits(
              other.getMinRange())) return false;
      if (java.lang.Double.doubleToLongBits(getMaxRange())
          != java.lang.Double.doubleToLongBits(
              other.getMaxRange())) return false;
      if (java.lang.Double.doubleToLongBits(getMinAngle())
          != java.lang.Double.doubleToLongBits(
              other.getMinAngle())) return false;
      if (java.lang.Double.doubleToLongBits(getMaxAngle())
          != java.lang.Double.doubleToLongBits(
              other.getMaxAngle())) return false;
      if (java.lang.Double.doubleToLongBits(getRealStep())
          != java.lang.Double.doubleToLongBits(
              other.getRealStep())) return false;
      if (java.lang.Double.doubleToLongBits(getPubStep())
          != java.lang.Double.doubleToLongBits(
              other.getPubStep())) return false;
      if (java.lang.Double.doubleToLongBits(getTimeIncrement())
          != java.lang.Double.doubleToLongBits(
              other.getTimeIncrement())) return false;
      if (java.lang.Double.doubleToLongBits(getScanFreq())
          != java.lang.Double.doubleToLongBits(
              other.getScanFreq())) return false;
      if (getId()
          != other.getId()) return false;
      if (getIsClockWise()
          != other.getIsClockWise()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DEVICE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getDeviceName().hashCode();
      hash = (37 * hash) + MIN_RANGE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMinRange()));
      hash = (37 * hash) + MAX_RANGE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMaxRange()));
      hash = (37 * hash) + MIN_ANGLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMinAngle()));
      hash = (37 * hash) + MAX_ANGLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMaxAngle()));
      hash = (37 * hash) + REAL_STEP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRealStep()));
      hash = (37 * hash) + PUB_STEP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPubStep()));
      hash = (37 * hash) + TIME_INCREMENT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getTimeIncrement()));
      hash = (37 * hash) + SCAN_FREQ_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getScanFreq()));
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (37 * hash) + ISCLOCKWISE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsClockWise());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserDeviceInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserDeviceInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserDeviceInfo)
        rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserDeviceInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserDeviceInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserDeviceInfo.class, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserDeviceInfo.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        deviceName_ = "";
        minRange_ = 0D;
        maxRange_ = 0D;
        minAngle_ = 0D;
        maxAngle_ = 0D;
        realStep_ = 0D;
        pubStep_ = 0D;
        timeIncrement_ = 0D;
        scanFreq_ = 0D;
        id_ = 0;
        isClockWise_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserDeviceInfo_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo build() {
        rbk.protocol.MessageLaser.Message_LaserDeviceInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserDeviceInfo result = new rbk.protocol.MessageLaser.Message_LaserDeviceInfo(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserDeviceInfo result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.deviceName_ = deviceName_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.minRange_ = minRange_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.maxRange_ = maxRange_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.minAngle_ = minAngle_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.maxAngle_ = maxAngle_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.realStep_ = realStep_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.pubStep_ = pubStep_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.timeIncrement_ = timeIncrement_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.scanFreq_ = scanFreq_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.id_ = id_;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.isClockWise_ = isClockWise_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserDeviceInfo) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserDeviceInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserDeviceInfo other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance()) return this;
        if (!other.getDeviceName().isEmpty()) {
          deviceName_ = other.deviceName_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.getMinRange() != 0D) {
          setMinRange(other.getMinRange());
        }
        if (other.getMaxRange() != 0D) {
          setMaxRange(other.getMaxRange());
        }
        if (other.getMinAngle() != 0D) {
          setMinAngle(other.getMinAngle());
        }
        if (other.getMaxAngle() != 0D) {
          setMaxAngle(other.getMaxAngle());
        }
        if (other.getRealStep() != 0D) {
          setRealStep(other.getRealStep());
        }
        if (other.getPubStep() != 0D) {
          setPubStep(other.getPubStep());
        }
        if (other.getTimeIncrement() != 0D) {
          setTimeIncrement(other.getTimeIncrement());
        }
        if (other.getScanFreq() != 0D) {
          setScanFreq(other.getScanFreq());
        }
        if (other.getId() != 0) {
          setId(other.getId());
        }
        if (other.getIsClockWise() != false) {
          setIsClockWise(other.getIsClockWise());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                deviceName_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 17: {
                minRange_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                maxRange_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 33: {
                minAngle_ = input.readDouble();
                bitField0_ |= 0x00000008;
                break;
              } // case 33
              case 41: {
                maxAngle_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              case 49: {
                realStep_ = input.readDouble();
                bitField0_ |= 0x00000020;
                break;
              } // case 49
              case 57: {
                pubStep_ = input.readDouble();
                bitField0_ |= 0x00000040;
                break;
              } // case 57
              case 65: {
                timeIncrement_ = input.readDouble();
                bitField0_ |= 0x00000080;
                break;
              } // case 65
              case 73: {
                scanFreq_ = input.readDouble();
                bitField0_ |= 0x00000100;
                break;
              } // case 73
              case 80: {
                id_ = input.readUInt32();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              case 88: {
                isClockWise_ = input.readBool();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object deviceName_ = "";
      /**
       * <code>string device_name = 1;</code>
       * @return The deviceName.
       */
      public java.lang.String getDeviceName() {
        java.lang.Object ref = deviceName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deviceName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string device_name = 1;</code>
       * @return The bytes for deviceName.
       */
      public com.google.protobuf.ByteString
          getDeviceNameBytes() {
        java.lang.Object ref = deviceName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deviceName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string device_name = 1;</code>
       * @param value The deviceName to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        deviceName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>string device_name = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeviceName() {
        deviceName_ = getDefaultInstance().getDeviceName();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>string device_name = 1;</code>
       * @param value The bytes for deviceName to set.
       * @return This builder for chaining.
       */
      public Builder setDeviceNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        deviceName_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private double minRange_ ;
      /**
       * <code>double min_range = 2;</code>
       * @return The minRange.
       */
      @java.lang.Override
      public double getMinRange() {
        return minRange_;
      }
      /**
       * <code>double min_range = 2;</code>
       * @param value The minRange to set.
       * @return This builder for chaining.
       */
      public Builder setMinRange(double value) {

        minRange_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>double min_range = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinRange() {
        bitField0_ = (bitField0_ & ~0x00000002);
        minRange_ = 0D;
        onChanged();
        return this;
      }

      private double maxRange_ ;
      /**
       * <code>double max_range = 3;</code>
       * @return The maxRange.
       */
      @java.lang.Override
      public double getMaxRange() {
        return maxRange_;
      }
      /**
       * <code>double max_range = 3;</code>
       * @param value The maxRange to set.
       * @return This builder for chaining.
       */
      public Builder setMaxRange(double value) {

        maxRange_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>double max_range = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxRange() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxRange_ = 0D;
        onChanged();
        return this;
      }

      private double minAngle_ ;
      /**
       * <code>double min_angle = 4;</code>
       * @return The minAngle.
       */
      @java.lang.Override
      public double getMinAngle() {
        return minAngle_;
      }
      /**
       * <code>double min_angle = 4;</code>
       * @param value The minAngle to set.
       * @return This builder for chaining.
       */
      public Builder setMinAngle(double value) {

        minAngle_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>double min_angle = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMinAngle() {
        bitField0_ = (bitField0_ & ~0x00000008);
        minAngle_ = 0D;
        onChanged();
        return this;
      }

      private double maxAngle_ ;
      /**
       * <code>double max_angle = 5;</code>
       * @return The maxAngle.
       */
      @java.lang.Override
      public double getMaxAngle() {
        return maxAngle_;
      }
      /**
       * <code>double max_angle = 5;</code>
       * @param value The maxAngle to set.
       * @return This builder for chaining.
       */
      public Builder setMaxAngle(double value) {

        maxAngle_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>double max_angle = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxAngle() {
        bitField0_ = (bitField0_ & ~0x00000010);
        maxAngle_ = 0D;
        onChanged();
        return this;
      }

      private double realStep_ ;
      /**
       * <code>double real_step = 6;</code>
       * @return The realStep.
       */
      @java.lang.Override
      public double getRealStep() {
        return realStep_;
      }
      /**
       * <code>double real_step = 6;</code>
       * @param value The realStep to set.
       * @return This builder for chaining.
       */
      public Builder setRealStep(double value) {

        realStep_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>double real_step = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearRealStep() {
        bitField0_ = (bitField0_ & ~0x00000020);
        realStep_ = 0D;
        onChanged();
        return this;
      }

      private double pubStep_ ;
      /**
       * <code>double pub_step = 7;</code>
       * @return The pubStep.
       */
      @java.lang.Override
      public double getPubStep() {
        return pubStep_;
      }
      /**
       * <code>double pub_step = 7;</code>
       * @param value The pubStep to set.
       * @return This builder for chaining.
       */
      public Builder setPubStep(double value) {

        pubStep_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>double pub_step = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearPubStep() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pubStep_ = 0D;
        onChanged();
        return this;
      }

      private double timeIncrement_ ;
      /**
       * <code>double time_increment = 8;</code>
       * @return The timeIncrement.
       */
      @java.lang.Override
      public double getTimeIncrement() {
        return timeIncrement_;
      }
      /**
       * <code>double time_increment = 8;</code>
       * @param value The timeIncrement to set.
       * @return This builder for chaining.
       */
      public Builder setTimeIncrement(double value) {

        timeIncrement_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>double time_increment = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeIncrement() {
        bitField0_ = (bitField0_ & ~0x00000080);
        timeIncrement_ = 0D;
        onChanged();
        return this;
      }

      private double scanFreq_ ;
      /**
       * <code>double scan_freq = 9;</code>
       * @return The scanFreq.
       */
      @java.lang.Override
      public double getScanFreq() {
        return scanFreq_;
      }
      /**
       * <code>double scan_freq = 9;</code>
       * @param value The scanFreq to set.
       * @return This builder for chaining.
       */
      public Builder setScanFreq(double value) {

        scanFreq_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>double scan_freq = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearScanFreq() {
        bitField0_ = (bitField0_ & ~0x00000100);
        scanFreq_ = 0D;
        onChanged();
        return this;
      }

      private int id_ ;
      /**
       * <code>uint32 id = 10;</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }
      /**
       * <code>uint32 id = 10;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {

        id_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 id = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000200);
        id_ = 0;
        onChanged();
        return this;
      }

      private boolean isClockWise_ ;
      /**
       * <code>bool isClockWise = 11;</code>
       * @return The isClockWise.
       */
      @java.lang.Override
      public boolean getIsClockWise() {
        return isClockWise_;
      }
      /**
       * <code>bool isClockWise = 11;</code>
       * @param value The isClockWise to set.
       * @return This builder for chaining.
       */
      public Builder setIsClockWise(boolean value) {

        isClockWise_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>bool isClockWise = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsClockWise() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isClockWise_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserDeviceInfo)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserDeviceInfo)
    private static final rbk.protocol.MessageLaser.Message_LaserDeviceInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserDeviceInfo();
    }

    public static rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserDeviceInfo>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserDeviceInfo>() {
      @java.lang.Override
      public Message_LaserDeviceInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserDeviceInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserDeviceInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserBeamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserBeam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return The header.
     */
    rbk.protocol.MessageHeader.Message_Header getHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     */
    rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>double angle = 2;</code>
     * @return The angle.
     */
    double getAngle();

    /**
     * <code>double dist = 3;</code>
     * @return The dist.
     */
    double getDist();

    /**
     * <code>double x = 4;</code>
     * @return The x.
     */
    double getX();

    /**
     * <code>double y = 5;</code>
     * @return The y.
     */
    double getY();

    /**
     * <code>double rssi = 6;</code>
     * @return The rssi.
     */
    double getRssi();

    /**
     * <code>bool valid = 7;</code>
     * @return The valid.
     */
    boolean getValid();

    /**
     * <code>bool is_virtual = 8;</code>
     * @return The isVirtual.
     */
    boolean getIsVirtual();

    /**
     * <code>bool is_obstacle = 9;</code>
     * @return The isObstacle.
     */
    boolean getIsObstacle();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserBeam}
   */
  public static final class Message_LaserBeam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserBeam)
      Message_LaserBeamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserBeam.newBuilder() to construct.
    private Message_LaserBeam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserBeam() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserBeam();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserBeam.class, rbk.protocol.MessageLaser.Message_LaserBeam.Builder.class);
    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private rbk.protocol.MessageHeader.Message_Header header_;
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_Header getHeader() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }

    public static final int ANGLE_FIELD_NUMBER = 2;
    private double angle_ = 0D;
    /**
     * <code>double angle = 2;</code>
     * @return The angle.
     */
    @java.lang.Override
    public double getAngle() {
      return angle_;
    }

    public static final int DIST_FIELD_NUMBER = 3;
    private double dist_ = 0D;
    /**
     * <code>double dist = 3;</code>
     * @return The dist.
     */
    @java.lang.Override
    public double getDist() {
      return dist_;
    }

    public static final int X_FIELD_NUMBER = 4;
    private double x_ = 0D;
    /**
     * <code>double x = 4;</code>
     * @return The x.
     */
    @java.lang.Override
    public double getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 5;
    private double y_ = 0D;
    /**
     * <code>double y = 5;</code>
     * @return The y.
     */
    @java.lang.Override
    public double getY() {
      return y_;
    }

    public static final int RSSI_FIELD_NUMBER = 6;
    private double rssi_ = 0D;
    /**
     * <code>double rssi = 6;</code>
     * @return The rssi.
     */
    @java.lang.Override
    public double getRssi() {
      return rssi_;
    }

    public static final int VALID_FIELD_NUMBER = 7;
    private boolean valid_ = false;
    /**
     * <code>bool valid = 7;</code>
     * @return The valid.
     */
    @java.lang.Override
    public boolean getValid() {
      return valid_;
    }

    public static final int IS_VIRTUAL_FIELD_NUMBER = 8;
    private boolean isVirtual_ = false;
    /**
     * <code>bool is_virtual = 8;</code>
     * @return The isVirtual.
     */
    @java.lang.Override
    public boolean getIsVirtual() {
      return isVirtual_;
    }

    public static final int IS_OBSTACLE_FIELD_NUMBER = 9;
    private boolean isObstacle_ = false;
    /**
     * <code>bool is_obstacle = 9;</code>
     * @return The isObstacle.
     */
    @java.lang.Override
    public boolean getIsObstacle() {
      return isObstacle_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (header_ != null) {
        output.writeMessage(1, getHeader());
      }
      if (java.lang.Double.doubleToRawLongBits(angle_) != 0) {
        output.writeDouble(2, angle_);
      }
      if (java.lang.Double.doubleToRawLongBits(dist_) != 0) {
        output.writeDouble(3, dist_);
      }
      if (java.lang.Double.doubleToRawLongBits(x_) != 0) {
        output.writeDouble(4, x_);
      }
      if (java.lang.Double.doubleToRawLongBits(y_) != 0) {
        output.writeDouble(5, y_);
      }
      if (java.lang.Double.doubleToRawLongBits(rssi_) != 0) {
        output.writeDouble(6, rssi_);
      }
      if (valid_ != false) {
        output.writeBool(7, valid_);
      }
      if (isVirtual_ != false) {
        output.writeBool(8, isVirtual_);
      }
      if (isObstacle_ != false) {
        output.writeBool(9, isObstacle_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      if (java.lang.Double.doubleToRawLongBits(angle_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, angle_);
      }
      if (java.lang.Double.doubleToRawLongBits(dist_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, dist_);
      }
      if (java.lang.Double.doubleToRawLongBits(x_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, x_);
      }
      if (java.lang.Double.doubleToRawLongBits(y_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, y_);
      }
      if (java.lang.Double.doubleToRawLongBits(rssi_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, rssi_);
      }
      if (valid_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, valid_);
      }
      if (isVirtual_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, isVirtual_);
      }
      if (isObstacle_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isObstacle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserBeam)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserBeam other = (rbk.protocol.MessageLaser.Message_LaserBeam) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (java.lang.Double.doubleToLongBits(getAngle())
          != java.lang.Double.doubleToLongBits(
              other.getAngle())) return false;
      if (java.lang.Double.doubleToLongBits(getDist())
          != java.lang.Double.doubleToLongBits(
              other.getDist())) return false;
      if (java.lang.Double.doubleToLongBits(getX())
          != java.lang.Double.doubleToLongBits(
              other.getX())) return false;
      if (java.lang.Double.doubleToLongBits(getY())
          != java.lang.Double.doubleToLongBits(
              other.getY())) return false;
      if (java.lang.Double.doubleToLongBits(getRssi())
          != java.lang.Double.doubleToLongBits(
              other.getRssi())) return false;
      if (getValid()
          != other.getValid()) return false;
      if (getIsVirtual()
          != other.getIsVirtual()) return false;
      if (getIsObstacle()
          != other.getIsObstacle()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      hash = (37 * hash) + ANGLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAngle()));
      hash = (37 * hash) + DIST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getDist()));
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getX()));
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getY()));
      hash = (37 * hash) + RSSI_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRssi()));
      hash = (37 * hash) + VALID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getValid());
      hash = (37 * hash) + IS_VIRTUAL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsVirtual());
      hash = (37 * hash) + IS_OBSTACLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsObstacle());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserBeam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserBeam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserBeam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserBeam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserBeam)
        rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserBeam.class, rbk.protocol.MessageLaser.Message_LaserBeam.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserBeam.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        angle_ = 0D;
        dist_ = 0D;
        x_ = 0D;
        y_ = 0D;
        rssi_ = 0D;
        valid_ = false;
        isVirtual_ = false;
        isObstacle_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserBeam getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserBeam build() {
        rbk.protocol.MessageLaser.Message_LaserBeam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserBeam buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserBeam result = new rbk.protocol.MessageLaser.Message_LaserBeam(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserBeam result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.header_ = headerBuilder_ == null
              ? header_
              : headerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.angle_ = angle_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.dist_ = dist_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.x_ = x_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.y_ = y_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.rssi_ = rssi_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.valid_ = valid_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.isVirtual_ = isVirtual_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.isObstacle_ = isObstacle_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserBeam) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserBeam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserBeam other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.getAngle() != 0D) {
          setAngle(other.getAngle());
        }
        if (other.getDist() != 0D) {
          setDist(other.getDist());
        }
        if (other.getX() != 0D) {
          setX(other.getX());
        }
        if (other.getY() != 0D) {
          setY(other.getY());
        }
        if (other.getRssi() != 0D) {
          setRssi(other.getRssi());
        }
        if (other.getValid() != false) {
          setValid(other.getValid());
        }
        if (other.getIsVirtual() != false) {
          setIsVirtual(other.getIsVirtual());
        }
        if (other.getIsObstacle() != false) {
          setIsObstacle(other.getIsObstacle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getHeaderFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 17: {
                angle_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                dist_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 33: {
                x_ = input.readDouble();
                bitField0_ |= 0x00000008;
                break;
              } // case 33
              case 41: {
                y_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              case 49: {
                rssi_ = input.readDouble();
                bitField0_ |= 0x00000020;
                break;
              } // case 49
              case 56: {
                valid_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                isVirtual_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                isObstacle_ = input.readBool();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private rbk.protocol.MessageHeader.Message_Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       * @return The header.
       */
      public rbk.protocol.MessageHeader.Message_Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder setHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder setHeader(
          rbk.protocol.MessageHeader.Message_Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder mergeHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            header_ != null &&
            header_ != rbk.protocol.MessageHeader.Message_Header.getDefaultInstance()) {
            getHeaderBuilder().mergeFrom(value);
          } else {
            header_ = value;
          }
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder clearHeader() {
        bitField0_ = (bitField0_ & ~0x00000001);
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public rbk.protocol.MessageHeader.Message_Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private double angle_ ;
      /**
       * <code>double angle = 2;</code>
       * @return The angle.
       */
      @java.lang.Override
      public double getAngle() {
        return angle_;
      }
      /**
       * <code>double angle = 2;</code>
       * @param value The angle to set.
       * @return This builder for chaining.
       */
      public Builder setAngle(double value) {

        angle_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>double angle = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAngle() {
        bitField0_ = (bitField0_ & ~0x00000002);
        angle_ = 0D;
        onChanged();
        return this;
      }

      private double dist_ ;
      /**
       * <code>double dist = 3;</code>
       * @return The dist.
       */
      @java.lang.Override
      public double getDist() {
        return dist_;
      }
      /**
       * <code>double dist = 3;</code>
       * @param value The dist to set.
       * @return This builder for chaining.
       */
      public Builder setDist(double value) {

        dist_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>double dist = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDist() {
        bitField0_ = (bitField0_ & ~0x00000004);
        dist_ = 0D;
        onChanged();
        return this;
      }

      private double x_ ;
      /**
       * <code>double x = 4;</code>
       * @return The x.
       */
      @java.lang.Override
      public double getX() {
        return x_;
      }
      /**
       * <code>double x = 4;</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(double value) {

        x_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>double x = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000008);
        x_ = 0D;
        onChanged();
        return this;
      }

      private double y_ ;
      /**
       * <code>double y = 5;</code>
       * @return The y.
       */
      @java.lang.Override
      public double getY() {
        return y_;
      }
      /**
       * <code>double y = 5;</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(double value) {

        y_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>double y = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000010);
        y_ = 0D;
        onChanged();
        return this;
      }

      private double rssi_ ;
      /**
       * <code>double rssi = 6;</code>
       * @return The rssi.
       */
      @java.lang.Override
      public double getRssi() {
        return rssi_;
      }
      /**
       * <code>double rssi = 6;</code>
       * @param value The rssi to set.
       * @return This builder for chaining.
       */
      public Builder setRssi(double value) {

        rssi_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>double rssi = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearRssi() {
        bitField0_ = (bitField0_ & ~0x00000020);
        rssi_ = 0D;
        onChanged();
        return this;
      }

      private boolean valid_ ;
      /**
       * <code>bool valid = 7;</code>
       * @return The valid.
       */
      @java.lang.Override
      public boolean getValid() {
        return valid_;
      }
      /**
       * <code>bool valid = 7;</code>
       * @param value The valid to set.
       * @return This builder for chaining.
       */
      public Builder setValid(boolean value) {

        valid_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>bool valid = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearValid() {
        bitField0_ = (bitField0_ & ~0x00000040);
        valid_ = false;
        onChanged();
        return this;
      }

      private boolean isVirtual_ ;
      /**
       * <code>bool is_virtual = 8;</code>
       * @return The isVirtual.
       */
      @java.lang.Override
      public boolean getIsVirtual() {
        return isVirtual_;
      }
      /**
       * <code>bool is_virtual = 8;</code>
       * @param value The isVirtual to set.
       * @return This builder for chaining.
       */
      public Builder setIsVirtual(boolean value) {

        isVirtual_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>bool is_virtual = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsVirtual() {
        bitField0_ = (bitField0_ & ~0x00000080);
        isVirtual_ = false;
        onChanged();
        return this;
      }

      private boolean isObstacle_ ;
      /**
       * <code>bool is_obstacle = 9;</code>
       * @return The isObstacle.
       */
      @java.lang.Override
      public boolean getIsObstacle() {
        return isObstacle_;
      }
      /**
       * <code>bool is_obstacle = 9;</code>
       * @param value The isObstacle to set.
       * @return This builder for chaining.
       */
      public Builder setIsObstacle(boolean value) {

        isObstacle_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>bool is_obstacle = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsObstacle() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isObstacle_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserBeam)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserBeam)
    private static final rbk.protocol.MessageLaser.Message_LaserBeam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserBeam();
    }

    public static rbk.protocol.MessageLaser.Message_LaserBeam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserBeam>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserBeam>() {
      @java.lang.Override
      public Message_LaserBeam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserBeam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserBeam> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserBeam3DOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserBeam3D)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 id = 1;</code>
     * @return The id.
     */
    int getId();

    /**
     * <code>float x = 2;</code>
     * @return The x.
     */
    float getX();

    /**
     * <code>float y = 3;</code>
     * @return The y.
     */
    float getY();

    /**
     * <code>float z = 4;</code>
     * @return The z.
     */
    float getZ();

    /**
     * <code>uint32 intensity = 5;</code>
     * @return The intensity.
     */
    int getIntensity();

    /**
     * <code>uint32 ring = 6;</code>
     * @return The ring.
     */
    int getRing();

    /**
     * <code>uint32 timestamp = 7;</code>
     * @return The timestamp.
     */
    int getTimestamp();

    /**
     * <code>bytes data = 8;</code>
     * @return The data.
     */
    com.google.protobuf.ByteString getData();

    /**
     * <code>float firstAzimuth = 9;</code>
     * @return The firstAzimuth.
     */
    float getFirstAzimuth();

    /**
     * <code>float secondAzimuth = 10;</code>
     * @return The secondAzimuth.
     */
    float getSecondAzimuth();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserBeam3D}
   */
  public static final class Message_LaserBeam3D extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserBeam3D)
      Message_LaserBeam3DOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserBeam3D.newBuilder() to construct.
    private Message_LaserBeam3D(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserBeam3D() {
      data_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserBeam3D();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam3D_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam3D_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserBeam3D.class, rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private int id_ = 0;
    /**
     * <code>uint32 id = 1;</code>
     * @return The id.
     */
    @java.lang.Override
    public int getId() {
      return id_;
    }

    public static final int X_FIELD_NUMBER = 2;
    private float x_ = 0F;
    /**
     * <code>float x = 2;</code>
     * @return The x.
     */
    @java.lang.Override
    public float getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 3;
    private float y_ = 0F;
    /**
     * <code>float y = 3;</code>
     * @return The y.
     */
    @java.lang.Override
    public float getY() {
      return y_;
    }

    public static final int Z_FIELD_NUMBER = 4;
    private float z_ = 0F;
    /**
     * <code>float z = 4;</code>
     * @return The z.
     */
    @java.lang.Override
    public float getZ() {
      return z_;
    }

    public static final int INTENSITY_FIELD_NUMBER = 5;
    private int intensity_ = 0;
    /**
     * <code>uint32 intensity = 5;</code>
     * @return The intensity.
     */
    @java.lang.Override
    public int getIntensity() {
      return intensity_;
    }

    public static final int RING_FIELD_NUMBER = 6;
    private int ring_ = 0;
    /**
     * <code>uint32 ring = 6;</code>
     * @return The ring.
     */
    @java.lang.Override
    public int getRing() {
      return ring_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 7;
    private int timestamp_ = 0;
    /**
     * <code>uint32 timestamp = 7;</code>
     * @return The timestamp.
     */
    @java.lang.Override
    public int getTimestamp() {
      return timestamp_;
    }

    public static final int DATA_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes data = 8;</code>
     * @return The data.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    public static final int FIRSTAZIMUTH_FIELD_NUMBER = 9;
    private float firstAzimuth_ = 0F;
    /**
     * <code>float firstAzimuth = 9;</code>
     * @return The firstAzimuth.
     */
    @java.lang.Override
    public float getFirstAzimuth() {
      return firstAzimuth_;
    }

    public static final int SECONDAZIMUTH_FIELD_NUMBER = 10;
    private float secondAzimuth_ = 0F;
    /**
     * <code>float secondAzimuth = 10;</code>
     * @return The secondAzimuth.
     */
    @java.lang.Override
    public float getSecondAzimuth() {
      return secondAzimuth_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0) {
        output.writeUInt32(1, id_);
      }
      if (java.lang.Float.floatToRawIntBits(x_) != 0) {
        output.writeFloat(2, x_);
      }
      if (java.lang.Float.floatToRawIntBits(y_) != 0) {
        output.writeFloat(3, y_);
      }
      if (java.lang.Float.floatToRawIntBits(z_) != 0) {
        output.writeFloat(4, z_);
      }
      if (intensity_ != 0) {
        output.writeUInt32(5, intensity_);
      }
      if (ring_ != 0) {
        output.writeUInt32(6, ring_);
      }
      if (timestamp_ != 0) {
        output.writeUInt32(7, timestamp_);
      }
      if (!data_.isEmpty()) {
        output.writeBytes(8, data_);
      }
      if (java.lang.Float.floatToRawIntBits(firstAzimuth_) != 0) {
        output.writeFloat(9, firstAzimuth_);
      }
      if (java.lang.Float.floatToRawIntBits(secondAzimuth_) != 0) {
        output.writeFloat(10, secondAzimuth_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (java.lang.Float.floatToRawIntBits(x_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, x_);
      }
      if (java.lang.Float.floatToRawIntBits(y_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, y_);
      }
      if (java.lang.Float.floatToRawIntBits(z_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, z_);
      }
      if (intensity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, intensity_);
      }
      if (ring_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, ring_);
      }
      if (timestamp_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, timestamp_);
      }
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, data_);
      }
      if (java.lang.Float.floatToRawIntBits(firstAzimuth_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, firstAzimuth_);
      }
      if (java.lang.Float.floatToRawIntBits(secondAzimuth_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, secondAzimuth_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserBeam3D)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserBeam3D other = (rbk.protocol.MessageLaser.Message_LaserBeam3D) obj;

      if (getId()
          != other.getId()) return false;
      if (java.lang.Float.floatToIntBits(getX())
          != java.lang.Float.floatToIntBits(
              other.getX())) return false;
      if (java.lang.Float.floatToIntBits(getY())
          != java.lang.Float.floatToIntBits(
              other.getY())) return false;
      if (java.lang.Float.floatToIntBits(getZ())
          != java.lang.Float.floatToIntBits(
              other.getZ())) return false;
      if (getIntensity()
          != other.getIntensity()) return false;
      if (getRing()
          != other.getRing()) return false;
      if (getTimestamp()
          != other.getTimestamp()) return false;
      if (!getData()
          .equals(other.getData())) return false;
      if (java.lang.Float.floatToIntBits(getFirstAzimuth())
          != java.lang.Float.floatToIntBits(
              other.getFirstAzimuth())) return false;
      if (java.lang.Float.floatToIntBits(getSecondAzimuth())
          != java.lang.Float.floatToIntBits(
              other.getSecondAzimuth())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getX());
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getY());
      hash = (37 * hash) + Z_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getZ());
      hash = (37 * hash) + INTENSITY_FIELD_NUMBER;
      hash = (53 * hash) + getIntensity();
      hash = (37 * hash) + RING_FIELD_NUMBER;
      hash = (53 * hash) + getRing();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + getTimestamp();
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
      hash = (37 * hash) + FIRSTAZIMUTH_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getFirstAzimuth());
      hash = (37 * hash) + SECONDAZIMUTH_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getSecondAzimuth());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserBeam3D parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserBeam3D prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserBeam3D}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserBeam3D)
        rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam3D_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam3D_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserBeam3D.class, rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserBeam3D.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        id_ = 0;
        x_ = 0F;
        y_ = 0F;
        z_ = 0F;
        intensity_ = 0;
        ring_ = 0;
        timestamp_ = 0;
        data_ = com.google.protobuf.ByteString.EMPTY;
        firstAzimuth_ = 0F;
        secondAzimuth_ = 0F;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserBeam3D_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserBeam3D getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserBeam3D.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserBeam3D build() {
        rbk.protocol.MessageLaser.Message_LaserBeam3D result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserBeam3D buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserBeam3D result = new rbk.protocol.MessageLaser.Message_LaserBeam3D(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserBeam3D result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.id_ = id_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.x_ = x_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.y_ = y_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.z_ = z_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.intensity_ = intensity_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.ring_ = ring_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.timestamp_ = timestamp_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.data_ = data_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.firstAzimuth_ = firstAzimuth_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.secondAzimuth_ = secondAzimuth_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserBeam3D) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserBeam3D)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserBeam3D other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserBeam3D.getDefaultInstance()) return this;
        if (other.getId() != 0) {
          setId(other.getId());
        }
        if (other.getX() != 0F) {
          setX(other.getX());
        }
        if (other.getY() != 0F) {
          setY(other.getY());
        }
        if (other.getZ() != 0F) {
          setZ(other.getZ());
        }
        if (other.getIntensity() != 0) {
          setIntensity(other.getIntensity());
        }
        if (other.getRing() != 0) {
          setRing(other.getRing());
        }
        if (other.getTimestamp() != 0) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
          setData(other.getData());
        }
        if (other.getFirstAzimuth() != 0F) {
          setFirstAzimuth(other.getFirstAzimuth());
        }
        if (other.getSecondAzimuth() != 0F) {
          setSecondAzimuth(other.getSecondAzimuth());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                id_ = input.readUInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 21: {
                x_ = input.readFloat();
                bitField0_ |= 0x00000002;
                break;
              } // case 21
              case 29: {
                y_ = input.readFloat();
                bitField0_ |= 0x00000004;
                break;
              } // case 29
              case 37: {
                z_ = input.readFloat();
                bitField0_ |= 0x00000008;
                break;
              } // case 37
              case 40: {
                intensity_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                ring_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                timestamp_ = input.readUInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 66: {
                data_ = input.readBytes();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 77: {
                firstAzimuth_ = input.readFloat();
                bitField0_ |= 0x00000100;
                break;
              } // case 77
              case 85: {
                secondAzimuth_ = input.readFloat();
                bitField0_ |= 0x00000200;
                break;
              } // case 85
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int id_ ;
      /**
       * <code>uint32 id = 1;</code>
       * @return The id.
       */
      @java.lang.Override
      public int getId() {
        return id_;
      }
      /**
       * <code>uint32 id = 1;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(int value) {

        id_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private float x_ ;
      /**
       * <code>float x = 2;</code>
       * @return The x.
       */
      @java.lang.Override
      public float getX() {
        return x_;
      }
      /**
       * <code>float x = 2;</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(float value) {

        x_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>float x = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0F;
        onChanged();
        return this;
      }

      private float y_ ;
      /**
       * <code>float y = 3;</code>
       * @return The y.
       */
      @java.lang.Override
      public float getY() {
        return y_;
      }
      /**
       * <code>float y = 3;</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(float value) {

        y_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>float y = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0F;
        onChanged();
        return this;
      }

      private float z_ ;
      /**
       * <code>float z = 4;</code>
       * @return The z.
       */
      @java.lang.Override
      public float getZ() {
        return z_;
      }
      /**
       * <code>float z = 4;</code>
       * @param value The z to set.
       * @return This builder for chaining.
       */
      public Builder setZ(float value) {

        z_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>float z = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000008);
        z_ = 0F;
        onChanged();
        return this;
      }

      private int intensity_ ;
      /**
       * <code>uint32 intensity = 5;</code>
       * @return The intensity.
       */
      @java.lang.Override
      public int getIntensity() {
        return intensity_;
      }
      /**
       * <code>uint32 intensity = 5;</code>
       * @param value The intensity to set.
       * @return This builder for chaining.
       */
      public Builder setIntensity(int value) {

        intensity_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 intensity = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIntensity() {
        bitField0_ = (bitField0_ & ~0x00000010);
        intensity_ = 0;
        onChanged();
        return this;
      }

      private int ring_ ;
      /**
       * <code>uint32 ring = 6;</code>
       * @return The ring.
       */
      @java.lang.Override
      public int getRing() {
        return ring_;
      }
      /**
       * <code>uint32 ring = 6;</code>
       * @param value The ring to set.
       * @return This builder for chaining.
       */
      public Builder setRing(int value) {

        ring_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 ring = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearRing() {
        bitField0_ = (bitField0_ & ~0x00000020);
        ring_ = 0;
        onChanged();
        return this;
      }

      private int timestamp_ ;
      /**
       * <code>uint32 timestamp = 7;</code>
       * @return The timestamp.
       */
      @java.lang.Override
      public int getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>uint32 timestamp = 7;</code>
       * @param value The timestamp to set.
       * @return This builder for chaining.
       */
      public Builder setTimestamp(int value) {

        timestamp_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 timestamp = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000040);
        timestamp_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes data = 8;</code>
       * @return The data.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>bytes data = 8;</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        data_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>bytes data = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000080);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      private float firstAzimuth_ ;
      /**
       * <code>float firstAzimuth = 9;</code>
       * @return The firstAzimuth.
       */
      @java.lang.Override
      public float getFirstAzimuth() {
        return firstAzimuth_;
      }
      /**
       * <code>float firstAzimuth = 9;</code>
       * @param value The firstAzimuth to set.
       * @return This builder for chaining.
       */
      public Builder setFirstAzimuth(float value) {

        firstAzimuth_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>float firstAzimuth = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearFirstAzimuth() {
        bitField0_ = (bitField0_ & ~0x00000100);
        firstAzimuth_ = 0F;
        onChanged();
        return this;
      }

      private float secondAzimuth_ ;
      /**
       * <code>float secondAzimuth = 10;</code>
       * @return The secondAzimuth.
       */
      @java.lang.Override
      public float getSecondAzimuth() {
        return secondAzimuth_;
      }
      /**
       * <code>float secondAzimuth = 10;</code>
       * @param value The secondAzimuth to set.
       * @return This builder for chaining.
       */
      public Builder setSecondAzimuth(float value) {

        secondAzimuth_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>float secondAzimuth = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearSecondAzimuth() {
        bitField0_ = (bitField0_ & ~0x00000200);
        secondAzimuth_ = 0F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserBeam3D)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserBeam3D)
    private static final rbk.protocol.MessageLaser.Message_LaserBeam3D DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserBeam3D();
    }

    public static rbk.protocol.MessageLaser.Message_LaserBeam3D getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserBeam3D>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserBeam3D>() {
      @java.lang.Override
      public Message_LaserBeam3D parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserBeam3D> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserBeam3D> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeam3D getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_Laser)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return Whether the deviceInfo field is set.
     */
    boolean hasDeviceInfo();
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return The deviceInfo.
     */
    rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo();
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder();

    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return Whether the installInfo field is set.
     */
    boolean hasInstallInfo();
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return The installInfo.
     */
    rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo();
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder();

    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return The header.
     */
    rbk.protocol.MessageHeader.Message_Header getHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     */
    rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> 
        getBeamsList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeam getBeams(int index);
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    int getBeamsCount();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
        getBeamsOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsOrBuilder(
        int index);

    /**
     * <code>bool use_forLoc = 5;</code>
     * @return The useForLoc.
     */
    boolean getUseForLoc();

    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> 
        getBeamsNotUseList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeam getBeamsNotUse(int index);
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    int getBeamsNotUseCount();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
        getBeamsNotUseOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsNotUseOrBuilder(
        int index);

    /**
     * <code>bool is3DLocalization = 7;</code>
     * @return The is3DLocalization.
     */
    boolean getIs3DLocalization();

    /**
     * <code>bool use_forBinDetection = 8;</code>
     * @return The useForBinDetection.
     */
    boolean getUseForBinDetection();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_Laser}
   */
  public static final class Message_Laser extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_Laser)
      Message_LaserOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_Laser.newBuilder() to construct.
    private Message_Laser(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_Laser() {
      beams_ = java.util.Collections.emptyList();
      beamsNotUse_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_Laser();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_Laser.class, rbk.protocol.MessageLaser.Message_Laser.Builder.class);
    }

    public static final int DEVICE_INFO_FIELD_NUMBER = 1;
    private rbk.protocol.MessageLaser.Message_LaserDeviceInfo deviceInfo_;
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return Whether the deviceInfo field is set.
     */
    @java.lang.Override
    public boolean hasDeviceInfo() {
      return deviceInfo_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return The deviceInfo.
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo() {
      return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
    }
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder() {
      return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
    }

    public static final int INSTALL_INFO_FIELD_NUMBER = 2;
    private rbk.protocol.MessageLaser.Message_LaserInstallInfo installInfo_;
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return Whether the installInfo field is set.
     */
    @java.lang.Override
    public boolean hasInstallInfo() {
      return installInfo_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return The installInfo.
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo() {
      return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
    }
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder() {
      return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
    }

    public static final int HEADER_FIELD_NUMBER = 3;
    private rbk.protocol.MessageHeader.Message_Header header_;
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return The header.
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_Header getHeader() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }

    public static final int BEAMS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> beams_;
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> getBeamsList() {
      return beams_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
        getBeamsOrBuilderList() {
      return beams_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public int getBeamsCount() {
      return beams_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeam getBeams(int index) {
      return beams_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsOrBuilder(
        int index) {
      return beams_.get(index);
    }

    public static final int USE_FORLOC_FIELD_NUMBER = 5;
    private boolean useForLoc_ = false;
    /**
     * <code>bool use_forLoc = 5;</code>
     * @return The useForLoc.
     */
    @java.lang.Override
    public boolean getUseForLoc() {
      return useForLoc_;
    }

    public static final int BEAMS_NOT_USE_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> beamsNotUse_;
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> getBeamsNotUseList() {
      return beamsNotUse_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
        getBeamsNotUseOrBuilderList() {
      return beamsNotUse_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public int getBeamsNotUseCount() {
      return beamsNotUse_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeam getBeamsNotUse(int index) {
      return beamsNotUse_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsNotUseOrBuilder(
        int index) {
      return beamsNotUse_.get(index);
    }

    public static final int IS3DLOCALIZATION_FIELD_NUMBER = 7;
    private boolean is3DLocalization_ = false;
    /**
     * <code>bool is3DLocalization = 7;</code>
     * @return The is3DLocalization.
     */
    @java.lang.Override
    public boolean getIs3DLocalization() {
      return is3DLocalization_;
    }

    public static final int USE_FORBINDETECTION_FIELD_NUMBER = 8;
    private boolean useForBinDetection_ = false;
    /**
     * <code>bool use_forBinDetection = 8;</code>
     * @return The useForBinDetection.
     */
    @java.lang.Override
    public boolean getUseForBinDetection() {
      return useForBinDetection_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (deviceInfo_ != null) {
        output.writeMessage(1, getDeviceInfo());
      }
      if (installInfo_ != null) {
        output.writeMessage(2, getInstallInfo());
      }
      if (header_ != null) {
        output.writeMessage(3, getHeader());
      }
      for (int i = 0; i < beams_.size(); i++) {
        output.writeMessage(4, beams_.get(i));
      }
      if (useForLoc_ != false) {
        output.writeBool(5, useForLoc_);
      }
      for (int i = 0; i < beamsNotUse_.size(); i++) {
        output.writeMessage(6, beamsNotUse_.get(i));
      }
      if (is3DLocalization_ != false) {
        output.writeBool(7, is3DLocalization_);
      }
      if (useForBinDetection_ != false) {
        output.writeBool(8, useForBinDetection_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (deviceInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDeviceInfo());
      }
      if (installInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getInstallInfo());
      }
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getHeader());
      }
      for (int i = 0; i < beams_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, beams_.get(i));
      }
      if (useForLoc_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, useForLoc_);
      }
      for (int i = 0; i < beamsNotUse_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, beamsNotUse_.get(i));
      }
      if (is3DLocalization_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, is3DLocalization_);
      }
      if (useForBinDetection_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, useForBinDetection_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_Laser)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_Laser other = (rbk.protocol.MessageLaser.Message_Laser) obj;

      if (hasDeviceInfo() != other.hasDeviceInfo()) return false;
      if (hasDeviceInfo()) {
        if (!getDeviceInfo()
            .equals(other.getDeviceInfo())) return false;
      }
      if (hasInstallInfo() != other.hasInstallInfo()) return false;
      if (hasInstallInfo()) {
        if (!getInstallInfo()
            .equals(other.getInstallInfo())) return false;
      }
      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (!getBeamsList()
          .equals(other.getBeamsList())) return false;
      if (getUseForLoc()
          != other.getUseForLoc()) return false;
      if (!getBeamsNotUseList()
          .equals(other.getBeamsNotUseList())) return false;
      if (getIs3DLocalization()
          != other.getIs3DLocalization()) return false;
      if (getUseForBinDetection()
          != other.getUseForBinDetection()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDeviceInfo()) {
        hash = (37 * hash) + DEVICE_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getDeviceInfo().hashCode();
      }
      if (hasInstallInfo()) {
        hash = (37 * hash) + INSTALL_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInstallInfo().hashCode();
      }
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (getBeamsCount() > 0) {
        hash = (37 * hash) + BEAMS_FIELD_NUMBER;
        hash = (53 * hash) + getBeamsList().hashCode();
      }
      hash = (37 * hash) + USE_FORLOC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUseForLoc());
      if (getBeamsNotUseCount() > 0) {
        hash = (37 * hash) + BEAMS_NOT_USE_FIELD_NUMBER;
        hash = (53 * hash) + getBeamsNotUseList().hashCode();
      }
      hash = (37 * hash) + IS3DLOCALIZATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIs3DLocalization());
      hash = (37 * hash) + USE_FORBINDETECTION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUseForBinDetection());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_Laser parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_Laser parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_Laser parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_Laser prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_Laser}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_Laser)
        rbk.protocol.MessageLaser.Message_LaserOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_Laser.class, rbk.protocol.MessageLaser.Message_Laser.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_Laser.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        deviceInfo_ = null;
        if (deviceInfoBuilder_ != null) {
          deviceInfoBuilder_.dispose();
          deviceInfoBuilder_ = null;
        }
        installInfo_ = null;
        if (installInfoBuilder_ != null) {
          installInfoBuilder_.dispose();
          installInfoBuilder_ = null;
        }
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        if (beamsBuilder_ == null) {
          beams_ = java.util.Collections.emptyList();
        } else {
          beams_ = null;
          beamsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        useForLoc_ = false;
        if (beamsNotUseBuilder_ == null) {
          beamsNotUse_ = java.util.Collections.emptyList();
        } else {
          beamsNotUse_ = null;
          beamsNotUseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        is3DLocalization_ = false;
        useForBinDetection_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_Laser getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_Laser.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_Laser build() {
        rbk.protocol.MessageLaser.Message_Laser result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_Laser buildPartial() {
        rbk.protocol.MessageLaser.Message_Laser result = new rbk.protocol.MessageLaser.Message_Laser(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_Laser result) {
        if (beamsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            beams_ = java.util.Collections.unmodifiableList(beams_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.beams_ = beams_;
        } else {
          result.beams_ = beamsBuilder_.build();
        }
        if (beamsNotUseBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            beamsNotUse_ = java.util.Collections.unmodifiableList(beamsNotUse_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.beamsNotUse_ = beamsNotUse_;
        } else {
          result.beamsNotUse_ = beamsNotUseBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_Laser result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.deviceInfo_ = deviceInfoBuilder_ == null
              ? deviceInfo_
              : deviceInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.installInfo_ = installInfoBuilder_ == null
              ? installInfo_
              : installInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.header_ = headerBuilder_ == null
              ? header_
              : headerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.useForLoc_ = useForLoc_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.is3DLocalization_ = is3DLocalization_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.useForBinDetection_ = useForBinDetection_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_Laser) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_Laser)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_Laser other) {
        if (other == rbk.protocol.MessageLaser.Message_Laser.getDefaultInstance()) return this;
        if (other.hasDeviceInfo()) {
          mergeDeviceInfo(other.getDeviceInfo());
        }
        if (other.hasInstallInfo()) {
          mergeInstallInfo(other.getInstallInfo());
        }
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (beamsBuilder_ == null) {
          if (!other.beams_.isEmpty()) {
            if (beams_.isEmpty()) {
              beams_ = other.beams_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureBeamsIsMutable();
              beams_.addAll(other.beams_);
            }
            onChanged();
          }
        } else {
          if (!other.beams_.isEmpty()) {
            if (beamsBuilder_.isEmpty()) {
              beamsBuilder_.dispose();
              beamsBuilder_ = null;
              beams_ = other.beams_;
              bitField0_ = (bitField0_ & ~0x00000008);
              beamsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBeamsFieldBuilder() : null;
            } else {
              beamsBuilder_.addAllMessages(other.beams_);
            }
          }
        }
        if (other.getUseForLoc() != false) {
          setUseForLoc(other.getUseForLoc());
        }
        if (beamsNotUseBuilder_ == null) {
          if (!other.beamsNotUse_.isEmpty()) {
            if (beamsNotUse_.isEmpty()) {
              beamsNotUse_ = other.beamsNotUse_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureBeamsNotUseIsMutable();
              beamsNotUse_.addAll(other.beamsNotUse_);
            }
            onChanged();
          }
        } else {
          if (!other.beamsNotUse_.isEmpty()) {
            if (beamsNotUseBuilder_.isEmpty()) {
              beamsNotUseBuilder_.dispose();
              beamsNotUseBuilder_ = null;
              beamsNotUse_ = other.beamsNotUse_;
              bitField0_ = (bitField0_ & ~0x00000020);
              beamsNotUseBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBeamsNotUseFieldBuilder() : null;
            } else {
              beamsNotUseBuilder_.addAllMessages(other.beamsNotUse_);
            }
          }
        }
        if (other.getIs3DLocalization() != false) {
          setIs3DLocalization(other.getIs3DLocalization());
        }
        if (other.getUseForBinDetection() != false) {
          setUseForBinDetection(other.getUseForBinDetection());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getDeviceInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getInstallInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getHeaderFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                rbk.protocol.MessageLaser.Message_LaserBeam m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_LaserBeam.parser(),
                        extensionRegistry);
                if (beamsBuilder_ == null) {
                  ensureBeamsIsMutable();
                  beams_.add(m);
                } else {
                  beamsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 40: {
                useForLoc_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                rbk.protocol.MessageLaser.Message_LaserBeam m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_LaserBeam.parser(),
                        extensionRegistry);
                if (beamsNotUseBuilder_ == null) {
                  ensureBeamsNotUseIsMutable();
                  beamsNotUse_.add(m);
                } else {
                  beamsNotUseBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 56: {
                is3DLocalization_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                useForBinDetection_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private rbk.protocol.MessageLaser.Message_LaserDeviceInfo deviceInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder> deviceInfoBuilder_;
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       * @return Whether the deviceInfo field is set.
       */
      public boolean hasDeviceInfo() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       * @return The deviceInfo.
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo() {
        if (deviceInfoBuilder_ == null) {
          return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
        } else {
          return deviceInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder setDeviceInfo(rbk.protocol.MessageLaser.Message_LaserDeviceInfo value) {
        if (deviceInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deviceInfo_ = value;
        } else {
          deviceInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder setDeviceInfo(
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder builderForValue) {
        if (deviceInfoBuilder_ == null) {
          deviceInfo_ = builderForValue.build();
        } else {
          deviceInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder mergeDeviceInfo(rbk.protocol.MessageLaser.Message_LaserDeviceInfo value) {
        if (deviceInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            deviceInfo_ != null &&
            deviceInfo_ != rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance()) {
            getDeviceInfoBuilder().mergeFrom(value);
          } else {
            deviceInfo_ = value;
          }
        } else {
          deviceInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder clearDeviceInfo() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceInfo_ = null;
        if (deviceInfoBuilder_ != null) {
          deviceInfoBuilder_.dispose();
          deviceInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder getDeviceInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDeviceInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder() {
        if (deviceInfoBuilder_ != null) {
          return deviceInfoBuilder_.getMessageOrBuilder();
        } else {
          return deviceInfo_ == null ?
              rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder> 
          getDeviceInfoFieldBuilder() {
        if (deviceInfoBuilder_ == null) {
          deviceInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder>(
                  getDeviceInfo(),
                  getParentForChildren(),
                  isClean());
          deviceInfo_ = null;
        }
        return deviceInfoBuilder_;
      }

      private rbk.protocol.MessageLaser.Message_LaserInstallInfo installInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder> installInfoBuilder_;
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       * @return Whether the installInfo field is set.
       */
      public boolean hasInstallInfo() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       * @return The installInfo.
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo() {
        if (installInfoBuilder_ == null) {
          return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
        } else {
          return installInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder setInstallInfo(rbk.protocol.MessageLaser.Message_LaserInstallInfo value) {
        if (installInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          installInfo_ = value;
        } else {
          installInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder setInstallInfo(
          rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder builderForValue) {
        if (installInfoBuilder_ == null) {
          installInfo_ = builderForValue.build();
        } else {
          installInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder mergeInstallInfo(rbk.protocol.MessageLaser.Message_LaserInstallInfo value) {
        if (installInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            installInfo_ != null &&
            installInfo_ != rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance()) {
            getInstallInfoBuilder().mergeFrom(value);
          } else {
            installInfo_ = value;
          }
        } else {
          installInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder clearInstallInfo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        installInfo_ = null;
        if (installInfoBuilder_ != null) {
          installInfoBuilder_.dispose();
          installInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder getInstallInfoBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInstallInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder() {
        if (installInfoBuilder_ != null) {
          return installInfoBuilder_.getMessageOrBuilder();
        } else {
          return installInfo_ == null ?
              rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder> 
          getInstallInfoFieldBuilder() {
        if (installInfoBuilder_ == null) {
          installInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder>(
                  getInstallInfo(),
                  getParentForChildren(),
                  isClean());
          installInfo_ = null;
        }
        return installInfoBuilder_;
      }

      private rbk.protocol.MessageHeader.Message_Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       * @return The header.
       */
      public rbk.protocol.MessageHeader.Message_Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder setHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder setHeader(
          rbk.protocol.MessageHeader.Message_Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder mergeHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            header_ != null &&
            header_ != rbk.protocol.MessageHeader.Message_Header.getDefaultInstance()) {
            getHeaderBuilder().mergeFrom(value);
          } else {
            header_ = value;
          }
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder clearHeader() {
        bitField0_ = (bitField0_ & ~0x00000004);
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public rbk.protocol.MessageHeader.Message_Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> beams_ =
        java.util.Collections.emptyList();
      private void ensureBeamsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          beams_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_LaserBeam>(beams_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> beamsBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> getBeamsList() {
        if (beamsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(beams_);
        } else {
          return beamsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public int getBeamsCount() {
        if (beamsBuilder_ == null) {
          return beams_.size();
        } else {
          return beamsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam getBeams(int index) {
        if (beamsBuilder_ == null) {
          return beams_.get(index);
        } else {
          return beamsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder setBeams(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsIsMutable();
          beams_.set(index, value);
          onChanged();
        } else {
          beamsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder setBeams(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          beams_.set(index, builderForValue.build());
          onChanged();
        } else {
          beamsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addBeams(rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsIsMutable();
          beams_.add(value);
          onChanged();
        } else {
          beamsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addBeams(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsIsMutable();
          beams_.add(index, value);
          onChanged();
        } else {
          beamsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addBeams(
          rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          beams_.add(builderForValue.build());
          onChanged();
        } else {
          beamsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addBeams(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          beams_.add(index, builderForValue.build());
          onChanged();
        } else {
          beamsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addAllBeams(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_LaserBeam> values) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, beams_);
          onChanged();
        } else {
          beamsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder clearBeams() {
        if (beamsBuilder_ == null) {
          beams_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          beamsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder removeBeams(int index) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          beams_.remove(index);
          onChanged();
        } else {
          beamsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder getBeamsBuilder(
          int index) {
        return getBeamsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsOrBuilder(
          int index) {
        if (beamsBuilder_ == null) {
          return beams_.get(index);  } else {
          return beamsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
           getBeamsOrBuilderList() {
        if (beamsBuilder_ != null) {
          return beamsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(beams_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder addBeamsBuilder() {
        return getBeamsFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder addBeamsBuilder(
          int index) {
        return getBeamsFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam.Builder> 
           getBeamsBuilderList() {
        return getBeamsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
          getBeamsFieldBuilder() {
        if (beamsBuilder_ == null) {
          beamsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder>(
                  beams_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          beams_ = null;
        }
        return beamsBuilder_;
      }

      private boolean useForLoc_ ;
      /**
       * <code>bool use_forLoc = 5;</code>
       * @return The useForLoc.
       */
      @java.lang.Override
      public boolean getUseForLoc() {
        return useForLoc_;
      }
      /**
       * <code>bool use_forLoc = 5;</code>
       * @param value The useForLoc to set.
       * @return This builder for chaining.
       */
      public Builder setUseForLoc(boolean value) {

        useForLoc_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>bool use_forLoc = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearUseForLoc() {
        bitField0_ = (bitField0_ & ~0x00000010);
        useForLoc_ = false;
        onChanged();
        return this;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> beamsNotUse_ =
        java.util.Collections.emptyList();
      private void ensureBeamsNotUseIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          beamsNotUse_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_LaserBeam>(beamsNotUse_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> beamsNotUseBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> getBeamsNotUseList() {
        if (beamsNotUseBuilder_ == null) {
          return java.util.Collections.unmodifiableList(beamsNotUse_);
        } else {
          return beamsNotUseBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public int getBeamsNotUseCount() {
        if (beamsNotUseBuilder_ == null) {
          return beamsNotUse_.size();
        } else {
          return beamsNotUseBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam getBeamsNotUse(int index) {
        if (beamsNotUseBuilder_ == null) {
          return beamsNotUse_.get(index);
        } else {
          return beamsNotUseBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder setBeamsNotUse(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsNotUseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.set(index, value);
          onChanged();
        } else {
          beamsNotUseBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder setBeamsNotUse(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.set(index, builderForValue.build());
          onChanged();
        } else {
          beamsNotUseBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addBeamsNotUse(rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsNotUseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.add(value);
          onChanged();
        } else {
          beamsNotUseBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addBeamsNotUse(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsNotUseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.add(index, value);
          onChanged();
        } else {
          beamsNotUseBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addBeamsNotUse(
          rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.add(builderForValue.build());
          onChanged();
        } else {
          beamsNotUseBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addBeamsNotUse(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.add(index, builderForValue.build());
          onChanged();
        } else {
          beamsNotUseBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addAllBeamsNotUse(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_LaserBeam> values) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, beamsNotUse_);
          onChanged();
        } else {
          beamsNotUseBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder clearBeamsNotUse() {
        if (beamsNotUseBuilder_ == null) {
          beamsNotUse_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          beamsNotUseBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder removeBeamsNotUse(int index) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.remove(index);
          onChanged();
        } else {
          beamsNotUseBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder getBeamsNotUseBuilder(
          int index) {
        return getBeamsNotUseFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsNotUseOrBuilder(
          int index) {
        if (beamsNotUseBuilder_ == null) {
          return beamsNotUse_.get(index);  } else {
          return beamsNotUseBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
           getBeamsNotUseOrBuilderList() {
        if (beamsNotUseBuilder_ != null) {
          return beamsNotUseBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(beamsNotUse_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder addBeamsNotUseBuilder() {
        return getBeamsNotUseFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder addBeamsNotUseBuilder(
          int index) {
        return getBeamsNotUseFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam.Builder> 
           getBeamsNotUseBuilderList() {
        return getBeamsNotUseFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
          getBeamsNotUseFieldBuilder() {
        if (beamsNotUseBuilder_ == null) {
          beamsNotUseBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder>(
                  beamsNotUse_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          beamsNotUse_ = null;
        }
        return beamsNotUseBuilder_;
      }

      private boolean is3DLocalization_ ;
      /**
       * <code>bool is3DLocalization = 7;</code>
       * @return The is3DLocalization.
       */
      @java.lang.Override
      public boolean getIs3DLocalization() {
        return is3DLocalization_;
      }
      /**
       * <code>bool is3DLocalization = 7;</code>
       * @param value The is3DLocalization to set.
       * @return This builder for chaining.
       */
      public Builder setIs3DLocalization(boolean value) {

        is3DLocalization_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>bool is3DLocalization = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearIs3DLocalization() {
        bitField0_ = (bitField0_ & ~0x00000040);
        is3DLocalization_ = false;
        onChanged();
        return this;
      }

      private boolean useForBinDetection_ ;
      /**
       * <code>bool use_forBinDetection = 8;</code>
       * @return The useForBinDetection.
       */
      @java.lang.Override
      public boolean getUseForBinDetection() {
        return useForBinDetection_;
      }
      /**
       * <code>bool use_forBinDetection = 8;</code>
       * @param value The useForBinDetection to set.
       * @return This builder for chaining.
       */
      public Builder setUseForBinDetection(boolean value) {

        useForBinDetection_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>bool use_forBinDetection = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearUseForBinDetection() {
        bitField0_ = (bitField0_ & ~0x00000080);
        useForBinDetection_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_Laser)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_Laser)
    private static final rbk.protocol.MessageLaser.Message_Laser DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_Laser();
    }

    public static rbk.protocol.MessageLaser.Message_Laser getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_Laser>
        PARSER = new com.google.protobuf.AbstractParser<Message_Laser>() {
      @java.lang.Override
      public Message_Laser parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_Laser> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_Laser> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_Laser getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_Laser3DOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_Laser3D)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return Whether the deviceInfo field is set.
     */
    boolean hasDeviceInfo();
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return The deviceInfo.
     */
    rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo();
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder();

    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return Whether the installInfo field is set.
     */
    boolean hasInstallInfo();
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return The installInfo.
     */
    rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo();
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder();

    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return The header.
     */
    rbk.protocol.MessageHeader.Message_Header getHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     */
    rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam3D> 
        getBeams3DList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeam3D getBeams3D(int index);
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    int getBeams3DCount();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder> 
        getBeams3DOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder getBeams3DOrBuilder(
        int index);

    /**
     * <code>bool use_forLoc = 5;</code>
     * @return The useForLoc.
     */
    boolean getUseForLoc();

    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> 
        getBeamsNotUseList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeam getBeamsNotUse(int index);
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    int getBeamsNotUseCount();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
        getBeamsNotUseOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsNotUseOrBuilder(
        int index);

    /**
     * <code>bool is3DLocalization = 7;</code>
     * @return The is3DLocalization.
     */
    boolean getIs3DLocalization();

    /**
     * <pre>
     * lasertype = 1---robosense 16  lasertype = 2----robosense helios   lasertype = 3----velodyne 16
     * </pre>
     *
     * <code>uint32 lasertype = 8;</code>
     * @return The lasertype.
     */
    int getLasertype();

    /**
     * <code>float factor = 9;</code>
     * @return The factor.
     */
    float getFactor();

    /**
     * <code>repeated float azimuthcorrection = 10;</code>
     * @return A list containing the azimuthcorrection.
     */
    java.util.List<java.lang.Float> getAzimuthcorrectionList();
    /**
     * <code>repeated float azimuthcorrection = 10;</code>
     * @return The count of azimuthcorrection.
     */
    int getAzimuthcorrectionCount();
    /**
     * <code>repeated float azimuthcorrection = 10;</code>
     * @param index The index of the element to return.
     * @return The azimuthcorrection at the given index.
     */
    float getAzimuthcorrection(int index);

    /**
     * <code>repeated float verticalcorrection = 11;</code>
     * @return A list containing the verticalcorrection.
     */
    java.util.List<java.lang.Float> getVerticalcorrectionList();
    /**
     * <code>repeated float verticalcorrection = 11;</code>
     * @return The count of verticalcorrection.
     */
    int getVerticalcorrectionCount();
    /**
     * <code>repeated float verticalcorrection = 11;</code>
     * @param index The index of the element to return.
     * @return The verticalcorrection at the given index.
     */
    float getVerticalcorrection(int index);

    /**
     * <code>bool is3DobstacleDetection = 12;</code>
     * @return The is3DobstacleDetection.
     */
    boolean getIs3DobstacleDetection();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_Laser3D}
   */
  public static final class Message_Laser3D extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_Laser3D)
      Message_Laser3DOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_Laser3D.newBuilder() to construct.
    private Message_Laser3D(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_Laser3D() {
      beams3D_ = java.util.Collections.emptyList();
      beamsNotUse_ = java.util.Collections.emptyList();
      azimuthcorrection_ = emptyFloatList();
      verticalcorrection_ = emptyFloatList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_Laser3D();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser3D_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser3D_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_Laser3D.class, rbk.protocol.MessageLaser.Message_Laser3D.Builder.class);
    }

    public static final int DEVICE_INFO_FIELD_NUMBER = 1;
    private rbk.protocol.MessageLaser.Message_LaserDeviceInfo deviceInfo_;
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return Whether the deviceInfo field is set.
     */
    @java.lang.Override
    public boolean hasDeviceInfo() {
      return deviceInfo_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return The deviceInfo.
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo() {
      return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
    }
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder() {
      return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
    }

    public static final int INSTALL_INFO_FIELD_NUMBER = 2;
    private rbk.protocol.MessageLaser.Message_LaserInstallInfo installInfo_;
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return Whether the installInfo field is set.
     */
    @java.lang.Override
    public boolean hasInstallInfo() {
      return installInfo_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return The installInfo.
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo() {
      return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
    }
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder() {
      return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
    }

    public static final int HEADER_FIELD_NUMBER = 3;
    private rbk.protocol.MessageHeader.Message_Header header_;
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return The header.
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_Header getHeader() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }

    public static final int BEAMS3D_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam3D> beams3D_;
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam3D> getBeams3DList() {
      return beams3D_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder> 
        getBeams3DOrBuilderList() {
      return beams3D_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    @java.lang.Override
    public int getBeams3DCount() {
      return beams3D_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeam3D getBeams3D(int index) {
      return beams3D_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder getBeams3DOrBuilder(
        int index) {
      return beams3D_.get(index);
    }

    public static final int USE_FORLOC_FIELD_NUMBER = 5;
    private boolean useForLoc_ = false;
    /**
     * <code>bool use_forLoc = 5;</code>
     * @return The useForLoc.
     */
    @java.lang.Override
    public boolean getUseForLoc() {
      return useForLoc_;
    }

    public static final int BEAMS_NOT_USE_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> beamsNotUse_;
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> getBeamsNotUseList() {
      return beamsNotUse_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
        getBeamsNotUseOrBuilderList() {
      return beamsNotUse_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public int getBeamsNotUseCount() {
      return beamsNotUse_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeam getBeamsNotUse(int index) {
      return beamsNotUse_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsNotUseOrBuilder(
        int index) {
      return beamsNotUse_.get(index);
    }

    public static final int IS3DLOCALIZATION_FIELD_NUMBER = 7;
    private boolean is3DLocalization_ = false;
    /**
     * <code>bool is3DLocalization = 7;</code>
     * @return The is3DLocalization.
     */
    @java.lang.Override
    public boolean getIs3DLocalization() {
      return is3DLocalization_;
    }

    public static final int LASERTYPE_FIELD_NUMBER = 8;
    private int lasertype_ = 0;
    /**
     * <pre>
     * lasertype = 1---robosense 16  lasertype = 2----robosense helios   lasertype = 3----velodyne 16
     * </pre>
     *
     * <code>uint32 lasertype = 8;</code>
     * @return The lasertype.
     */
    @java.lang.Override
    public int getLasertype() {
      return lasertype_;
    }

    public static final int FACTOR_FIELD_NUMBER = 9;
    private float factor_ = 0F;
    /**
     * <code>float factor = 9;</code>
     * @return The factor.
     */
    @java.lang.Override
    public float getFactor() {
      return factor_;
    }

    public static final int AZIMUTHCORRECTION_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.FloatList azimuthcorrection_;
    /**
     * <code>repeated float azimuthcorrection = 10;</code>
     * @return A list containing the azimuthcorrection.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getAzimuthcorrectionList() {
      return azimuthcorrection_;
    }
    /**
     * <code>repeated float azimuthcorrection = 10;</code>
     * @return The count of azimuthcorrection.
     */
    public int getAzimuthcorrectionCount() {
      return azimuthcorrection_.size();
    }
    /**
     * <code>repeated float azimuthcorrection = 10;</code>
     * @param index The index of the element to return.
     * @return The azimuthcorrection at the given index.
     */
    public float getAzimuthcorrection(int index) {
      return azimuthcorrection_.getFloat(index);
    }
    private int azimuthcorrectionMemoizedSerializedSize = -1;

    public static final int VERTICALCORRECTION_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.FloatList verticalcorrection_;
    /**
     * <code>repeated float verticalcorrection = 11;</code>
     * @return A list containing the verticalcorrection.
     */
    @java.lang.Override
    public java.util.List<java.lang.Float>
        getVerticalcorrectionList() {
      return verticalcorrection_;
    }
    /**
     * <code>repeated float verticalcorrection = 11;</code>
     * @return The count of verticalcorrection.
     */
    public int getVerticalcorrectionCount() {
      return verticalcorrection_.size();
    }
    /**
     * <code>repeated float verticalcorrection = 11;</code>
     * @param index The index of the element to return.
     * @return The verticalcorrection at the given index.
     */
    public float getVerticalcorrection(int index) {
      return verticalcorrection_.getFloat(index);
    }
    private int verticalcorrectionMemoizedSerializedSize = -1;

    public static final int IS3DOBSTACLEDETECTION_FIELD_NUMBER = 12;
    private boolean is3DobstacleDetection_ = false;
    /**
     * <code>bool is3DobstacleDetection = 12;</code>
     * @return The is3DobstacleDetection.
     */
    @java.lang.Override
    public boolean getIs3DobstacleDetection() {
      return is3DobstacleDetection_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (deviceInfo_ != null) {
        output.writeMessage(1, getDeviceInfo());
      }
      if (installInfo_ != null) {
        output.writeMessage(2, getInstallInfo());
      }
      if (header_ != null) {
        output.writeMessage(3, getHeader());
      }
      for (int i = 0; i < beams3D_.size(); i++) {
        output.writeMessage(4, beams3D_.get(i));
      }
      if (useForLoc_ != false) {
        output.writeBool(5, useForLoc_);
      }
      for (int i = 0; i < beamsNotUse_.size(); i++) {
        output.writeMessage(6, beamsNotUse_.get(i));
      }
      if (is3DLocalization_ != false) {
        output.writeBool(7, is3DLocalization_);
      }
      if (lasertype_ != 0) {
        output.writeUInt32(8, lasertype_);
      }
      if (java.lang.Float.floatToRawIntBits(factor_) != 0) {
        output.writeFloat(9, factor_);
      }
      if (getAzimuthcorrectionList().size() > 0) {
        output.writeUInt32NoTag(82);
        output.writeUInt32NoTag(azimuthcorrectionMemoizedSerializedSize);
      }
      for (int i = 0; i < azimuthcorrection_.size(); i++) {
        output.writeFloatNoTag(azimuthcorrection_.getFloat(i));
      }
      if (getVerticalcorrectionList().size() > 0) {
        output.writeUInt32NoTag(90);
        output.writeUInt32NoTag(verticalcorrectionMemoizedSerializedSize);
      }
      for (int i = 0; i < verticalcorrection_.size(); i++) {
        output.writeFloatNoTag(verticalcorrection_.getFloat(i));
      }
      if (is3DobstacleDetection_ != false) {
        output.writeBool(12, is3DobstacleDetection_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (deviceInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDeviceInfo());
      }
      if (installInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getInstallInfo());
      }
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getHeader());
      }
      for (int i = 0; i < beams3D_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, beams3D_.get(i));
      }
      if (useForLoc_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, useForLoc_);
      }
      for (int i = 0; i < beamsNotUse_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, beamsNotUse_.get(i));
      }
      if (is3DLocalization_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, is3DLocalization_);
      }
      if (lasertype_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, lasertype_);
      }
      if (java.lang.Float.floatToRawIntBits(factor_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, factor_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getAzimuthcorrectionList().size();
        size += dataSize;
        if (!getAzimuthcorrectionList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        azimuthcorrectionMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getVerticalcorrectionList().size();
        size += dataSize;
        if (!getVerticalcorrectionList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        verticalcorrectionMemoizedSerializedSize = dataSize;
      }
      if (is3DobstacleDetection_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, is3DobstacleDetection_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_Laser3D)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_Laser3D other = (rbk.protocol.MessageLaser.Message_Laser3D) obj;

      if (hasDeviceInfo() != other.hasDeviceInfo()) return false;
      if (hasDeviceInfo()) {
        if (!getDeviceInfo()
            .equals(other.getDeviceInfo())) return false;
      }
      if (hasInstallInfo() != other.hasInstallInfo()) return false;
      if (hasInstallInfo()) {
        if (!getInstallInfo()
            .equals(other.getInstallInfo())) return false;
      }
      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (!getBeams3DList()
          .equals(other.getBeams3DList())) return false;
      if (getUseForLoc()
          != other.getUseForLoc()) return false;
      if (!getBeamsNotUseList()
          .equals(other.getBeamsNotUseList())) return false;
      if (getIs3DLocalization()
          != other.getIs3DLocalization()) return false;
      if (getLasertype()
          != other.getLasertype()) return false;
      if (java.lang.Float.floatToIntBits(getFactor())
          != java.lang.Float.floatToIntBits(
              other.getFactor())) return false;
      if (!getAzimuthcorrectionList()
          .equals(other.getAzimuthcorrectionList())) return false;
      if (!getVerticalcorrectionList()
          .equals(other.getVerticalcorrectionList())) return false;
      if (getIs3DobstacleDetection()
          != other.getIs3DobstacleDetection()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDeviceInfo()) {
        hash = (37 * hash) + DEVICE_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getDeviceInfo().hashCode();
      }
      if (hasInstallInfo()) {
        hash = (37 * hash) + INSTALL_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInstallInfo().hashCode();
      }
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (getBeams3DCount() > 0) {
        hash = (37 * hash) + BEAMS3D_FIELD_NUMBER;
        hash = (53 * hash) + getBeams3DList().hashCode();
      }
      hash = (37 * hash) + USE_FORLOC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getUseForLoc());
      if (getBeamsNotUseCount() > 0) {
        hash = (37 * hash) + BEAMS_NOT_USE_FIELD_NUMBER;
        hash = (53 * hash) + getBeamsNotUseList().hashCode();
      }
      hash = (37 * hash) + IS3DLOCALIZATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIs3DLocalization());
      hash = (37 * hash) + LASERTYPE_FIELD_NUMBER;
      hash = (53 * hash) + getLasertype();
      hash = (37 * hash) + FACTOR_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getFactor());
      if (getAzimuthcorrectionCount() > 0) {
        hash = (37 * hash) + AZIMUTHCORRECTION_FIELD_NUMBER;
        hash = (53 * hash) + getAzimuthcorrectionList().hashCode();
      }
      if (getVerticalcorrectionCount() > 0) {
        hash = (37 * hash) + VERTICALCORRECTION_FIELD_NUMBER;
        hash = (53 * hash) + getVerticalcorrectionList().hashCode();
      }
      hash = (37 * hash) + IS3DOBSTACLEDETECTION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIs3DobstacleDetection());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_Laser3D parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_Laser3D parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_Laser3D parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_Laser3D prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_Laser3D}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_Laser3D)
        rbk.protocol.MessageLaser.Message_Laser3DOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser3D_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser3D_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_Laser3D.class, rbk.protocol.MessageLaser.Message_Laser3D.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_Laser3D.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        deviceInfo_ = null;
        if (deviceInfoBuilder_ != null) {
          deviceInfoBuilder_.dispose();
          deviceInfoBuilder_ = null;
        }
        installInfo_ = null;
        if (installInfoBuilder_ != null) {
          installInfoBuilder_.dispose();
          installInfoBuilder_ = null;
        }
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        if (beams3DBuilder_ == null) {
          beams3D_ = java.util.Collections.emptyList();
        } else {
          beams3D_ = null;
          beams3DBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        useForLoc_ = false;
        if (beamsNotUseBuilder_ == null) {
          beamsNotUse_ = java.util.Collections.emptyList();
        } else {
          beamsNotUse_ = null;
          beamsNotUseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        is3DLocalization_ = false;
        lasertype_ = 0;
        factor_ = 0F;
        azimuthcorrection_ = emptyFloatList();
        verticalcorrection_ = emptyFloatList();
        is3DobstacleDetection_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_Laser3D_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_Laser3D getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_Laser3D.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_Laser3D build() {
        rbk.protocol.MessageLaser.Message_Laser3D result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_Laser3D buildPartial() {
        rbk.protocol.MessageLaser.Message_Laser3D result = new rbk.protocol.MessageLaser.Message_Laser3D(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_Laser3D result) {
        if (beams3DBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            beams3D_ = java.util.Collections.unmodifiableList(beams3D_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.beams3D_ = beams3D_;
        } else {
          result.beams3D_ = beams3DBuilder_.build();
        }
        if (beamsNotUseBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            beamsNotUse_ = java.util.Collections.unmodifiableList(beamsNotUse_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.beamsNotUse_ = beamsNotUse_;
        } else {
          result.beamsNotUse_ = beamsNotUseBuilder_.build();
        }
        if (((bitField0_ & 0x00000200) != 0)) {
          azimuthcorrection_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.azimuthcorrection_ = azimuthcorrection_;
        if (((bitField0_ & 0x00000400) != 0)) {
          verticalcorrection_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.verticalcorrection_ = verticalcorrection_;
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_Laser3D result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.deviceInfo_ = deviceInfoBuilder_ == null
              ? deviceInfo_
              : deviceInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.installInfo_ = installInfoBuilder_ == null
              ? installInfo_
              : installInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.header_ = headerBuilder_ == null
              ? header_
              : headerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.useForLoc_ = useForLoc_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.is3DLocalization_ = is3DLocalization_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.lasertype_ = lasertype_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.factor_ = factor_;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.is3DobstacleDetection_ = is3DobstacleDetection_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_Laser3D) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_Laser3D)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_Laser3D other) {
        if (other == rbk.protocol.MessageLaser.Message_Laser3D.getDefaultInstance()) return this;
        if (other.hasDeviceInfo()) {
          mergeDeviceInfo(other.getDeviceInfo());
        }
        if (other.hasInstallInfo()) {
          mergeInstallInfo(other.getInstallInfo());
        }
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (beams3DBuilder_ == null) {
          if (!other.beams3D_.isEmpty()) {
            if (beams3D_.isEmpty()) {
              beams3D_ = other.beams3D_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureBeams3DIsMutable();
              beams3D_.addAll(other.beams3D_);
            }
            onChanged();
          }
        } else {
          if (!other.beams3D_.isEmpty()) {
            if (beams3DBuilder_.isEmpty()) {
              beams3DBuilder_.dispose();
              beams3DBuilder_ = null;
              beams3D_ = other.beams3D_;
              bitField0_ = (bitField0_ & ~0x00000008);
              beams3DBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBeams3DFieldBuilder() : null;
            } else {
              beams3DBuilder_.addAllMessages(other.beams3D_);
            }
          }
        }
        if (other.getUseForLoc() != false) {
          setUseForLoc(other.getUseForLoc());
        }
        if (beamsNotUseBuilder_ == null) {
          if (!other.beamsNotUse_.isEmpty()) {
            if (beamsNotUse_.isEmpty()) {
              beamsNotUse_ = other.beamsNotUse_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureBeamsNotUseIsMutable();
              beamsNotUse_.addAll(other.beamsNotUse_);
            }
            onChanged();
          }
        } else {
          if (!other.beamsNotUse_.isEmpty()) {
            if (beamsNotUseBuilder_.isEmpty()) {
              beamsNotUseBuilder_.dispose();
              beamsNotUseBuilder_ = null;
              beamsNotUse_ = other.beamsNotUse_;
              bitField0_ = (bitField0_ & ~0x00000020);
              beamsNotUseBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBeamsNotUseFieldBuilder() : null;
            } else {
              beamsNotUseBuilder_.addAllMessages(other.beamsNotUse_);
            }
          }
        }
        if (other.getIs3DLocalization() != false) {
          setIs3DLocalization(other.getIs3DLocalization());
        }
        if (other.getLasertype() != 0) {
          setLasertype(other.getLasertype());
        }
        if (other.getFactor() != 0F) {
          setFactor(other.getFactor());
        }
        if (!other.azimuthcorrection_.isEmpty()) {
          if (azimuthcorrection_.isEmpty()) {
            azimuthcorrection_ = other.azimuthcorrection_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureAzimuthcorrectionIsMutable();
            azimuthcorrection_.addAll(other.azimuthcorrection_);
          }
          onChanged();
        }
        if (!other.verticalcorrection_.isEmpty()) {
          if (verticalcorrection_.isEmpty()) {
            verticalcorrection_ = other.verticalcorrection_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureVerticalcorrectionIsMutable();
            verticalcorrection_.addAll(other.verticalcorrection_);
          }
          onChanged();
        }
        if (other.getIs3DobstacleDetection() != false) {
          setIs3DobstacleDetection(other.getIs3DobstacleDetection());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getDeviceInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getInstallInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getHeaderFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                rbk.protocol.MessageLaser.Message_LaserBeam3D m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_LaserBeam3D.parser(),
                        extensionRegistry);
                if (beams3DBuilder_ == null) {
                  ensureBeams3DIsMutable();
                  beams3D_.add(m);
                } else {
                  beams3DBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 40: {
                useForLoc_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                rbk.protocol.MessageLaser.Message_LaserBeam m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_LaserBeam.parser(),
                        extensionRegistry);
                if (beamsNotUseBuilder_ == null) {
                  ensureBeamsNotUseIsMutable();
                  beamsNotUse_.add(m);
                } else {
                  beamsNotUseBuilder_.addMessage(m);
                }
                break;
              } // case 50
              case 56: {
                is3DLocalization_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                lasertype_ = input.readUInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 77: {
                factor_ = input.readFloat();
                bitField0_ |= 0x00000100;
                break;
              } // case 77
              case 85: {
                float v = input.readFloat();
                ensureAzimuthcorrectionIsMutable();
                azimuthcorrection_.addFloat(v);
                break;
              } // case 85
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureAzimuthcorrectionIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  azimuthcorrection_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              } // case 82
              case 93: {
                float v = input.readFloat();
                ensureVerticalcorrectionIsMutable();
                verticalcorrection_.addFloat(v);
                break;
              } // case 93
              case 90: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureVerticalcorrectionIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  verticalcorrection_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              } // case 90
              case 96: {
                is3DobstacleDetection_ = input.readBool();
                bitField0_ |= 0x00000800;
                break;
              } // case 96
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private rbk.protocol.MessageLaser.Message_LaserDeviceInfo deviceInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder> deviceInfoBuilder_;
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       * @return Whether the deviceInfo field is set.
       */
      public boolean hasDeviceInfo() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       * @return The deviceInfo.
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo() {
        if (deviceInfoBuilder_ == null) {
          return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
        } else {
          return deviceInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder setDeviceInfo(rbk.protocol.MessageLaser.Message_LaserDeviceInfo value) {
        if (deviceInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deviceInfo_ = value;
        } else {
          deviceInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder setDeviceInfo(
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder builderForValue) {
        if (deviceInfoBuilder_ == null) {
          deviceInfo_ = builderForValue.build();
        } else {
          deviceInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder mergeDeviceInfo(rbk.protocol.MessageLaser.Message_LaserDeviceInfo value) {
        if (deviceInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            deviceInfo_ != null &&
            deviceInfo_ != rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance()) {
            getDeviceInfoBuilder().mergeFrom(value);
          } else {
            deviceInfo_ = value;
          }
        } else {
          deviceInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder clearDeviceInfo() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceInfo_ = null;
        if (deviceInfoBuilder_ != null) {
          deviceInfoBuilder_.dispose();
          deviceInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder getDeviceInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDeviceInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder() {
        if (deviceInfoBuilder_ != null) {
          return deviceInfoBuilder_.getMessageOrBuilder();
        } else {
          return deviceInfo_ == null ?
              rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder> 
          getDeviceInfoFieldBuilder() {
        if (deviceInfoBuilder_ == null) {
          deviceInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder>(
                  getDeviceInfo(),
                  getParentForChildren(),
                  isClean());
          deviceInfo_ = null;
        }
        return deviceInfoBuilder_;
      }

      private rbk.protocol.MessageLaser.Message_LaserInstallInfo installInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder> installInfoBuilder_;
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       * @return Whether the installInfo field is set.
       */
      public boolean hasInstallInfo() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       * @return The installInfo.
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo() {
        if (installInfoBuilder_ == null) {
          return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
        } else {
          return installInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder setInstallInfo(rbk.protocol.MessageLaser.Message_LaserInstallInfo value) {
        if (installInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          installInfo_ = value;
        } else {
          installInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder setInstallInfo(
          rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder builderForValue) {
        if (installInfoBuilder_ == null) {
          installInfo_ = builderForValue.build();
        } else {
          installInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder mergeInstallInfo(rbk.protocol.MessageLaser.Message_LaserInstallInfo value) {
        if (installInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            installInfo_ != null &&
            installInfo_ != rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance()) {
            getInstallInfoBuilder().mergeFrom(value);
          } else {
            installInfo_ = value;
          }
        } else {
          installInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder clearInstallInfo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        installInfo_ = null;
        if (installInfoBuilder_ != null) {
          installInfoBuilder_.dispose();
          installInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder getInstallInfoBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInstallInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder() {
        if (installInfoBuilder_ != null) {
          return installInfoBuilder_.getMessageOrBuilder();
        } else {
          return installInfo_ == null ?
              rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder> 
          getInstallInfoFieldBuilder() {
        if (installInfoBuilder_ == null) {
          installInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder>(
                  getInstallInfo(),
                  getParentForChildren(),
                  isClean());
          installInfo_ = null;
        }
        return installInfoBuilder_;
      }

      private rbk.protocol.MessageHeader.Message_Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       * @return The header.
       */
      public rbk.protocol.MessageHeader.Message_Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder setHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder setHeader(
          rbk.protocol.MessageHeader.Message_Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder mergeHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            header_ != null &&
            header_ != rbk.protocol.MessageHeader.Message_Header.getDefaultInstance()) {
            getHeaderBuilder().mergeFrom(value);
          } else {
            header_ = value;
          }
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder clearHeader() {
        bitField0_ = (bitField0_ & ~0x00000004);
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public rbk.protocol.MessageHeader.Message_Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam3D> beams3D_ =
        java.util.Collections.emptyList();
      private void ensureBeams3DIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          beams3D_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_LaserBeam3D>(beams3D_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam3D, rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder, rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder> beams3DBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam3D> getBeams3DList() {
        if (beams3DBuilder_ == null) {
          return java.util.Collections.unmodifiableList(beams3D_);
        } else {
          return beams3DBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public int getBeams3DCount() {
        if (beams3DBuilder_ == null) {
          return beams3D_.size();
        } else {
          return beams3DBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam3D getBeams3D(int index) {
        if (beams3DBuilder_ == null) {
          return beams3D_.get(index);
        } else {
          return beams3DBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder setBeams3D(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam3D value) {
        if (beams3DBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeams3DIsMutable();
          beams3D_.set(index, value);
          onChanged();
        } else {
          beams3DBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder setBeams3D(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder builderForValue) {
        if (beams3DBuilder_ == null) {
          ensureBeams3DIsMutable();
          beams3D_.set(index, builderForValue.build());
          onChanged();
        } else {
          beams3DBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder addBeams3D(rbk.protocol.MessageLaser.Message_LaserBeam3D value) {
        if (beams3DBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeams3DIsMutable();
          beams3D_.add(value);
          onChanged();
        } else {
          beams3DBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder addBeams3D(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam3D value) {
        if (beams3DBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeams3DIsMutable();
          beams3D_.add(index, value);
          onChanged();
        } else {
          beams3DBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder addBeams3D(
          rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder builderForValue) {
        if (beams3DBuilder_ == null) {
          ensureBeams3DIsMutable();
          beams3D_.add(builderForValue.build());
          onChanged();
        } else {
          beams3DBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder addBeams3D(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder builderForValue) {
        if (beams3DBuilder_ == null) {
          ensureBeams3DIsMutable();
          beams3D_.add(index, builderForValue.build());
          onChanged();
        } else {
          beams3DBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder addAllBeams3D(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_LaserBeam3D> values) {
        if (beams3DBuilder_ == null) {
          ensureBeams3DIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, beams3D_);
          onChanged();
        } else {
          beams3DBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder clearBeams3D() {
        if (beams3DBuilder_ == null) {
          beams3D_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          beams3DBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public Builder removeBeams3D(int index) {
        if (beams3DBuilder_ == null) {
          ensureBeams3DIsMutable();
          beams3D_.remove(index);
          onChanged();
        } else {
          beams3DBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder getBeams3DBuilder(
          int index) {
        return getBeams3DFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder getBeams3DOrBuilder(
          int index) {
        if (beams3DBuilder_ == null) {
          return beams3D_.get(index);  } else {
          return beams3DBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder> 
           getBeams3DOrBuilderList() {
        if (beams3DBuilder_ != null) {
          return beams3DBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(beams3D_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder addBeams3DBuilder() {
        return getBeams3DFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_LaserBeam3D.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder addBeams3DBuilder(
          int index) {
        return getBeams3DFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_LaserBeam3D.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam3D beams3D = 4;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder> 
           getBeams3DBuilderList() {
        return getBeams3DFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam3D, rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder, rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder> 
          getBeams3DFieldBuilder() {
        if (beams3DBuilder_ == null) {
          beams3DBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserBeam3D, rbk.protocol.MessageLaser.Message_LaserBeam3D.Builder, rbk.protocol.MessageLaser.Message_LaserBeam3DOrBuilder>(
                  beams3D_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          beams3D_ = null;
        }
        return beams3DBuilder_;
      }

      private boolean useForLoc_ ;
      /**
       * <code>bool use_forLoc = 5;</code>
       * @return The useForLoc.
       */
      @java.lang.Override
      public boolean getUseForLoc() {
        return useForLoc_;
      }
      /**
       * <code>bool use_forLoc = 5;</code>
       * @param value The useForLoc to set.
       * @return This builder for chaining.
       */
      public Builder setUseForLoc(boolean value) {

        useForLoc_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>bool use_forLoc = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearUseForLoc() {
        bitField0_ = (bitField0_ & ~0x00000010);
        useForLoc_ = false;
        onChanged();
        return this;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> beamsNotUse_ =
        java.util.Collections.emptyList();
      private void ensureBeamsNotUseIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          beamsNotUse_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_LaserBeam>(beamsNotUse_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> beamsNotUseBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> getBeamsNotUseList() {
        if (beamsNotUseBuilder_ == null) {
          return java.util.Collections.unmodifiableList(beamsNotUse_);
        } else {
          return beamsNotUseBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public int getBeamsNotUseCount() {
        if (beamsNotUseBuilder_ == null) {
          return beamsNotUse_.size();
        } else {
          return beamsNotUseBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam getBeamsNotUse(int index) {
        if (beamsNotUseBuilder_ == null) {
          return beamsNotUse_.get(index);
        } else {
          return beamsNotUseBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder setBeamsNotUse(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsNotUseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.set(index, value);
          onChanged();
        } else {
          beamsNotUseBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder setBeamsNotUse(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.set(index, builderForValue.build());
          onChanged();
        } else {
          beamsNotUseBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addBeamsNotUse(rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsNotUseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.add(value);
          onChanged();
        } else {
          beamsNotUseBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addBeamsNotUse(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsNotUseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.add(index, value);
          onChanged();
        } else {
          beamsNotUseBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addBeamsNotUse(
          rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.add(builderForValue.build());
          onChanged();
        } else {
          beamsNotUseBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addBeamsNotUse(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.add(index, builderForValue.build());
          onChanged();
        } else {
          beamsNotUseBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder addAllBeamsNotUse(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_LaserBeam> values) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, beamsNotUse_);
          onChanged();
        } else {
          beamsNotUseBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder clearBeamsNotUse() {
        if (beamsNotUseBuilder_ == null) {
          beamsNotUse_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          beamsNotUseBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public Builder removeBeamsNotUse(int index) {
        if (beamsNotUseBuilder_ == null) {
          ensureBeamsNotUseIsMutable();
          beamsNotUse_.remove(index);
          onChanged();
        } else {
          beamsNotUseBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder getBeamsNotUseBuilder(
          int index) {
        return getBeamsNotUseFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsNotUseOrBuilder(
          int index) {
        if (beamsNotUseBuilder_ == null) {
          return beamsNotUse_.get(index);  } else {
          return beamsNotUseBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
           getBeamsNotUseOrBuilderList() {
        if (beamsNotUseBuilder_ != null) {
          return beamsNotUseBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(beamsNotUse_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder addBeamsNotUseBuilder() {
        return getBeamsNotUseFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder addBeamsNotUseBuilder(
          int index) {
        return getBeamsNotUseFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams_not_use = 6;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam.Builder> 
           getBeamsNotUseBuilderList() {
        return getBeamsNotUseFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
          getBeamsNotUseFieldBuilder() {
        if (beamsNotUseBuilder_ == null) {
          beamsNotUseBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder>(
                  beamsNotUse_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          beamsNotUse_ = null;
        }
        return beamsNotUseBuilder_;
      }

      private boolean is3DLocalization_ ;
      /**
       * <code>bool is3DLocalization = 7;</code>
       * @return The is3DLocalization.
       */
      @java.lang.Override
      public boolean getIs3DLocalization() {
        return is3DLocalization_;
      }
      /**
       * <code>bool is3DLocalization = 7;</code>
       * @param value The is3DLocalization to set.
       * @return This builder for chaining.
       */
      public Builder setIs3DLocalization(boolean value) {

        is3DLocalization_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>bool is3DLocalization = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearIs3DLocalization() {
        bitField0_ = (bitField0_ & ~0x00000040);
        is3DLocalization_ = false;
        onChanged();
        return this;
      }

      private int lasertype_ ;
      /**
       * <pre>
       * lasertype = 1---robosense 16  lasertype = 2----robosense helios   lasertype = 3----velodyne 16
       * </pre>
       *
       * <code>uint32 lasertype = 8;</code>
       * @return The lasertype.
       */
      @java.lang.Override
      public int getLasertype() {
        return lasertype_;
      }
      /**
       * <pre>
       * lasertype = 1---robosense 16  lasertype = 2----robosense helios   lasertype = 3----velodyne 16
       * </pre>
       *
       * <code>uint32 lasertype = 8;</code>
       * @param value The lasertype to set.
       * @return This builder for chaining.
       */
      public Builder setLasertype(int value) {

        lasertype_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * lasertype = 1---robosense 16  lasertype = 2----robosense helios   lasertype = 3----velodyne 16
       * </pre>
       *
       * <code>uint32 lasertype = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearLasertype() {
        bitField0_ = (bitField0_ & ~0x00000080);
        lasertype_ = 0;
        onChanged();
        return this;
      }

      private float factor_ ;
      /**
       * <code>float factor = 9;</code>
       * @return The factor.
       */
      @java.lang.Override
      public float getFactor() {
        return factor_;
      }
      /**
       * <code>float factor = 9;</code>
       * @param value The factor to set.
       * @return This builder for chaining.
       */
      public Builder setFactor(float value) {

        factor_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>float factor = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearFactor() {
        bitField0_ = (bitField0_ & ~0x00000100);
        factor_ = 0F;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.FloatList azimuthcorrection_ = emptyFloatList();
      private void ensureAzimuthcorrectionIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          azimuthcorrection_ = mutableCopy(azimuthcorrection_);
          bitField0_ |= 0x00000200;
        }
      }
      /**
       * <code>repeated float azimuthcorrection = 10;</code>
       * @return A list containing the azimuthcorrection.
       */
      public java.util.List<java.lang.Float>
          getAzimuthcorrectionList() {
        return ((bitField0_ & 0x00000200) != 0) ?
                 java.util.Collections.unmodifiableList(azimuthcorrection_) : azimuthcorrection_;
      }
      /**
       * <code>repeated float azimuthcorrection = 10;</code>
       * @return The count of azimuthcorrection.
       */
      public int getAzimuthcorrectionCount() {
        return azimuthcorrection_.size();
      }
      /**
       * <code>repeated float azimuthcorrection = 10;</code>
       * @param index The index of the element to return.
       * @return The azimuthcorrection at the given index.
       */
      public float getAzimuthcorrection(int index) {
        return azimuthcorrection_.getFloat(index);
      }
      /**
       * <code>repeated float azimuthcorrection = 10;</code>
       * @param index The index to set the value at.
       * @param value The azimuthcorrection to set.
       * @return This builder for chaining.
       */
      public Builder setAzimuthcorrection(
          int index, float value) {

        ensureAzimuthcorrectionIsMutable();
        azimuthcorrection_.setFloat(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float azimuthcorrection = 10;</code>
       * @param value The azimuthcorrection to add.
       * @return This builder for chaining.
       */
      public Builder addAzimuthcorrection(float value) {

        ensureAzimuthcorrectionIsMutable();
        azimuthcorrection_.addFloat(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float azimuthcorrection = 10;</code>
       * @param values The azimuthcorrection to add.
       * @return This builder for chaining.
       */
      public Builder addAllAzimuthcorrection(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureAzimuthcorrectionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, azimuthcorrection_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float azimuthcorrection = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearAzimuthcorrection() {
        azimuthcorrection_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.FloatList verticalcorrection_ = emptyFloatList();
      private void ensureVerticalcorrectionIsMutable() {
        if (!((bitField0_ & 0x00000400) != 0)) {
          verticalcorrection_ = mutableCopy(verticalcorrection_);
          bitField0_ |= 0x00000400;
        }
      }
      /**
       * <code>repeated float verticalcorrection = 11;</code>
       * @return A list containing the verticalcorrection.
       */
      public java.util.List<java.lang.Float>
          getVerticalcorrectionList() {
        return ((bitField0_ & 0x00000400) != 0) ?
                 java.util.Collections.unmodifiableList(verticalcorrection_) : verticalcorrection_;
      }
      /**
       * <code>repeated float verticalcorrection = 11;</code>
       * @return The count of verticalcorrection.
       */
      public int getVerticalcorrectionCount() {
        return verticalcorrection_.size();
      }
      /**
       * <code>repeated float verticalcorrection = 11;</code>
       * @param index The index of the element to return.
       * @return The verticalcorrection at the given index.
       */
      public float getVerticalcorrection(int index) {
        return verticalcorrection_.getFloat(index);
      }
      /**
       * <code>repeated float verticalcorrection = 11;</code>
       * @param index The index to set the value at.
       * @param value The verticalcorrection to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalcorrection(
          int index, float value) {

        ensureVerticalcorrectionIsMutable();
        verticalcorrection_.setFloat(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float verticalcorrection = 11;</code>
       * @param value The verticalcorrection to add.
       * @return This builder for chaining.
       */
      public Builder addVerticalcorrection(float value) {

        ensureVerticalcorrectionIsMutable();
        verticalcorrection_.addFloat(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float verticalcorrection = 11;</code>
       * @param values The verticalcorrection to add.
       * @return This builder for chaining.
       */
      public Builder addAllVerticalcorrection(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureVerticalcorrectionIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, verticalcorrection_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float verticalcorrection = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalcorrection() {
        verticalcorrection_ = emptyFloatList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private boolean is3DobstacleDetection_ ;
      /**
       * <code>bool is3DobstacleDetection = 12;</code>
       * @return The is3DobstacleDetection.
       */
      @java.lang.Override
      public boolean getIs3DobstacleDetection() {
        return is3DobstacleDetection_;
      }
      /**
       * <code>bool is3DobstacleDetection = 12;</code>
       * @param value The is3DobstacleDetection to set.
       * @return This builder for chaining.
       */
      public Builder setIs3DobstacleDetection(boolean value) {

        is3DobstacleDetection_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>bool is3DobstacleDetection = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearIs3DobstacleDetection() {
        bitField0_ = (bitField0_ & ~0x00000800);
        is3DobstacleDetection_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_Laser3D)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_Laser3D)
    private static final rbk.protocol.MessageLaser.Message_Laser3D DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_Laser3D();
    }

    public static rbk.protocol.MessageLaser.Message_Laser3D getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_Laser3D>
        PARSER = new com.google.protobuf.AbstractParser<Message_Laser3D>() {
      @java.lang.Override
      public Message_Laser3D parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_Laser3D> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_Laser3D> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_Laser3D getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_AllLasersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_AllLasers)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_Laser> 
        getLaserList();
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_Laser getLaser(int index);
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    int getLaserCount();
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserOrBuilder> 
        getLaserOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserOrBuilder getLaserOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_AllLasers}
   */
  public static final class Message_AllLasers extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_AllLasers)
      Message_AllLasersOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_AllLasers.newBuilder() to construct.
    private Message_AllLasers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_AllLasers() {
      laser_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_AllLasers();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_AllLasers.class, rbk.protocol.MessageLaser.Message_AllLasers.Builder.class);
    }

    public static final int LASER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_Laser> laser_;
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_Laser> getLaserList() {
      return laser_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserOrBuilder> 
        getLaserOrBuilderList() {
      return laser_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    @java.lang.Override
    public int getLaserCount() {
      return laser_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_Laser getLaser(int index) {
      return laser_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserOrBuilder getLaserOrBuilder(
        int index) {
      return laser_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < laser_.size(); i++) {
        output.writeMessage(1, laser_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < laser_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, laser_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_AllLasers)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_AllLasers other = (rbk.protocol.MessageLaser.Message_AllLasers) obj;

      if (!getLaserList()
          .equals(other.getLaserList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLaserCount() > 0) {
        hash = (37 * hash) + LASER_FIELD_NUMBER;
        hash = (53 * hash) + getLaserList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_AllLasers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_AllLasers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_AllLasers prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_AllLasers}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_AllLasers)
        rbk.protocol.MessageLaser.Message_AllLasersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_AllLasers.class, rbk.protocol.MessageLaser.Message_AllLasers.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_AllLasers.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (laserBuilder_ == null) {
          laser_ = java.util.Collections.emptyList();
        } else {
          laser_ = null;
          laserBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_AllLasers getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_AllLasers.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_AllLasers build() {
        rbk.protocol.MessageLaser.Message_AllLasers result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_AllLasers buildPartial() {
        rbk.protocol.MessageLaser.Message_AllLasers result = new rbk.protocol.MessageLaser.Message_AllLasers(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_AllLasers result) {
        if (laserBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            laser_ = java.util.Collections.unmodifiableList(laser_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.laser_ = laser_;
        } else {
          result.laser_ = laserBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_AllLasers result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_AllLasers) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_AllLasers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_AllLasers other) {
        if (other == rbk.protocol.MessageLaser.Message_AllLasers.getDefaultInstance()) return this;
        if (laserBuilder_ == null) {
          if (!other.laser_.isEmpty()) {
            if (laser_.isEmpty()) {
              laser_ = other.laser_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLaserIsMutable();
              laser_.addAll(other.laser_);
            }
            onChanged();
          }
        } else {
          if (!other.laser_.isEmpty()) {
            if (laserBuilder_.isEmpty()) {
              laserBuilder_.dispose();
              laserBuilder_ = null;
              laser_ = other.laser_;
              bitField0_ = (bitField0_ & ~0x00000001);
              laserBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLaserFieldBuilder() : null;
            } else {
              laserBuilder_.addAllMessages(other.laser_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                rbk.protocol.MessageLaser.Message_Laser m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_Laser.parser(),
                        extensionRegistry);
                if (laserBuilder_ == null) {
                  ensureLaserIsMutable();
                  laser_.add(m);
                } else {
                  laserBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<rbk.protocol.MessageLaser.Message_Laser> laser_ =
        java.util.Collections.emptyList();
      private void ensureLaserIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          laser_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_Laser>(laser_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_Laser, rbk.protocol.MessageLaser.Message_Laser.Builder, rbk.protocol.MessageLaser.Message_LaserOrBuilder> laserBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_Laser> getLaserList() {
        if (laserBuilder_ == null) {
          return java.util.Collections.unmodifiableList(laser_);
        } else {
          return laserBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public int getLaserCount() {
        if (laserBuilder_ == null) {
          return laser_.size();
        } else {
          return laserBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser getLaser(int index) {
        if (laserBuilder_ == null) {
          return laser_.get(index);
        } else {
          return laserBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder setLaser(
          int index, rbk.protocol.MessageLaser.Message_Laser value) {
        if (laserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLaserIsMutable();
          laser_.set(index, value);
          onChanged();
        } else {
          laserBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder setLaser(
          int index, rbk.protocol.MessageLaser.Message_Laser.Builder builderForValue) {
        if (laserBuilder_ == null) {
          ensureLaserIsMutable();
          laser_.set(index, builderForValue.build());
          onChanged();
        } else {
          laserBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder addLaser(rbk.protocol.MessageLaser.Message_Laser value) {
        if (laserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLaserIsMutable();
          laser_.add(value);
          onChanged();
        } else {
          laserBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder addLaser(
          int index, rbk.protocol.MessageLaser.Message_Laser value) {
        if (laserBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLaserIsMutable();
          laser_.add(index, value);
          onChanged();
        } else {
          laserBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder addLaser(
          rbk.protocol.MessageLaser.Message_Laser.Builder builderForValue) {
        if (laserBuilder_ == null) {
          ensureLaserIsMutable();
          laser_.add(builderForValue.build());
          onChanged();
        } else {
          laserBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder addLaser(
          int index, rbk.protocol.MessageLaser.Message_Laser.Builder builderForValue) {
        if (laserBuilder_ == null) {
          ensureLaserIsMutable();
          laser_.add(index, builderForValue.build());
          onChanged();
        } else {
          laserBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder addAllLaser(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_Laser> values) {
        if (laserBuilder_ == null) {
          ensureLaserIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, laser_);
          onChanged();
        } else {
          laserBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder clearLaser() {
        if (laserBuilder_ == null) {
          laser_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          laserBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public Builder removeLaser(int index) {
        if (laserBuilder_ == null) {
          ensureLaserIsMutable();
          laser_.remove(index);
          onChanged();
        } else {
          laserBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser.Builder getLaserBuilder(
          int index) {
        return getLaserFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserOrBuilder getLaserOrBuilder(
          int index) {
        if (laserBuilder_ == null) {
          return laser_.get(index);  } else {
          return laserBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserOrBuilder> 
           getLaserOrBuilderList() {
        if (laserBuilder_ != null) {
          return laserBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(laser_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser.Builder addLaserBuilder() {
        return getLaserFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_Laser.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser.Builder addLaserBuilder(
          int index) {
        return getLaserFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_Laser.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser laser = 1;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_Laser.Builder> 
           getLaserBuilderList() {
        return getLaserFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_Laser, rbk.protocol.MessageLaser.Message_Laser.Builder, rbk.protocol.MessageLaser.Message_LaserOrBuilder> 
          getLaserFieldBuilder() {
        if (laserBuilder_ == null) {
          laserBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_Laser, rbk.protocol.MessageLaser.Message_Laser.Builder, rbk.protocol.MessageLaser.Message_LaserOrBuilder>(
                  laser_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          laser_ = null;
        }
        return laserBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_AllLasers)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_AllLasers)
    private static final rbk.protocol.MessageLaser.Message_AllLasers DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_AllLasers();
    }

    public static rbk.protocol.MessageLaser.Message_AllLasers getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_AllLasers>
        PARSER = new com.google.protobuf.AbstractParser<Message_AllLasers>() {
      @java.lang.Override
      public Message_AllLasers parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_AllLasers> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_AllLasers> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_AllLasers getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_AllLasers3DOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_AllLasers3D)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_Laser3D> 
        getLasers3DList();
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_Laser3D getLasers3D(int index);
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    int getLasers3DCount();
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_Laser3DOrBuilder> 
        getLasers3DOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_Laser3DOrBuilder getLasers3DOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_AllLasers3D}
   */
  public static final class Message_AllLasers3D extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_AllLasers3D)
      Message_AllLasers3DOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_AllLasers3D.newBuilder() to construct.
    private Message_AllLasers3D(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_AllLasers3D() {
      lasers3D_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_AllLasers3D();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers3D_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers3D_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_AllLasers3D.class, rbk.protocol.MessageLaser.Message_AllLasers3D.Builder.class);
    }

    public static final int LASERS3D_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_Laser3D> lasers3D_;
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_Laser3D> getLasers3DList() {
      return lasers3D_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_Laser3DOrBuilder> 
        getLasers3DOrBuilderList() {
      return lasers3D_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    @java.lang.Override
    public int getLasers3DCount() {
      return lasers3D_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_Laser3D getLasers3D(int index) {
      return lasers3D_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_Laser3DOrBuilder getLasers3DOrBuilder(
        int index) {
      return lasers3D_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < lasers3D_.size(); i++) {
        output.writeMessage(1, lasers3D_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < lasers3D_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, lasers3D_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_AllLasers3D)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_AllLasers3D other = (rbk.protocol.MessageLaser.Message_AllLasers3D) obj;

      if (!getLasers3DList()
          .equals(other.getLasers3DList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getLasers3DCount() > 0) {
        hash = (37 * hash) + LASERS3D_FIELD_NUMBER;
        hash = (53 * hash) + getLasers3DList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_AllLasers3D parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_AllLasers3D prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_AllLasers3D}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_AllLasers3D)
        rbk.protocol.MessageLaser.Message_AllLasers3DOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers3D_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers3D_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_AllLasers3D.class, rbk.protocol.MessageLaser.Message_AllLasers3D.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_AllLasers3D.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (lasers3DBuilder_ == null) {
          lasers3D_ = java.util.Collections.emptyList();
        } else {
          lasers3D_ = null;
          lasers3DBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_AllLasers3D_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_AllLasers3D getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_AllLasers3D.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_AllLasers3D build() {
        rbk.protocol.MessageLaser.Message_AllLasers3D result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_AllLasers3D buildPartial() {
        rbk.protocol.MessageLaser.Message_AllLasers3D result = new rbk.protocol.MessageLaser.Message_AllLasers3D(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_AllLasers3D result) {
        if (lasers3DBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            lasers3D_ = java.util.Collections.unmodifiableList(lasers3D_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.lasers3D_ = lasers3D_;
        } else {
          result.lasers3D_ = lasers3DBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_AllLasers3D result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_AllLasers3D) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_AllLasers3D)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_AllLasers3D other) {
        if (other == rbk.protocol.MessageLaser.Message_AllLasers3D.getDefaultInstance()) return this;
        if (lasers3DBuilder_ == null) {
          if (!other.lasers3D_.isEmpty()) {
            if (lasers3D_.isEmpty()) {
              lasers3D_ = other.lasers3D_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLasers3DIsMutable();
              lasers3D_.addAll(other.lasers3D_);
            }
            onChanged();
          }
        } else {
          if (!other.lasers3D_.isEmpty()) {
            if (lasers3DBuilder_.isEmpty()) {
              lasers3DBuilder_.dispose();
              lasers3DBuilder_ = null;
              lasers3D_ = other.lasers3D_;
              bitField0_ = (bitField0_ & ~0x00000001);
              lasers3DBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLasers3DFieldBuilder() : null;
            } else {
              lasers3DBuilder_.addAllMessages(other.lasers3D_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                rbk.protocol.MessageLaser.Message_Laser3D m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_Laser3D.parser(),
                        extensionRegistry);
                if (lasers3DBuilder_ == null) {
                  ensureLasers3DIsMutable();
                  lasers3D_.add(m);
                } else {
                  lasers3DBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<rbk.protocol.MessageLaser.Message_Laser3D> lasers3D_ =
        java.util.Collections.emptyList();
      private void ensureLasers3DIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          lasers3D_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_Laser3D>(lasers3D_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_Laser3D, rbk.protocol.MessageLaser.Message_Laser3D.Builder, rbk.protocol.MessageLaser.Message_Laser3DOrBuilder> lasers3DBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_Laser3D> getLasers3DList() {
        if (lasers3DBuilder_ == null) {
          return java.util.Collections.unmodifiableList(lasers3D_);
        } else {
          return lasers3DBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public int getLasers3DCount() {
        if (lasers3DBuilder_ == null) {
          return lasers3D_.size();
        } else {
          return lasers3DBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser3D getLasers3D(int index) {
        if (lasers3DBuilder_ == null) {
          return lasers3D_.get(index);
        } else {
          return lasers3DBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder setLasers3D(
          int index, rbk.protocol.MessageLaser.Message_Laser3D value) {
        if (lasers3DBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLasers3DIsMutable();
          lasers3D_.set(index, value);
          onChanged();
        } else {
          lasers3DBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder setLasers3D(
          int index, rbk.protocol.MessageLaser.Message_Laser3D.Builder builderForValue) {
        if (lasers3DBuilder_ == null) {
          ensureLasers3DIsMutable();
          lasers3D_.set(index, builderForValue.build());
          onChanged();
        } else {
          lasers3DBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder addLasers3D(rbk.protocol.MessageLaser.Message_Laser3D value) {
        if (lasers3DBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLasers3DIsMutable();
          lasers3D_.add(value);
          onChanged();
        } else {
          lasers3DBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder addLasers3D(
          int index, rbk.protocol.MessageLaser.Message_Laser3D value) {
        if (lasers3DBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLasers3DIsMutable();
          lasers3D_.add(index, value);
          onChanged();
        } else {
          lasers3DBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder addLasers3D(
          rbk.protocol.MessageLaser.Message_Laser3D.Builder builderForValue) {
        if (lasers3DBuilder_ == null) {
          ensureLasers3DIsMutable();
          lasers3D_.add(builderForValue.build());
          onChanged();
        } else {
          lasers3DBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder addLasers3D(
          int index, rbk.protocol.MessageLaser.Message_Laser3D.Builder builderForValue) {
        if (lasers3DBuilder_ == null) {
          ensureLasers3DIsMutable();
          lasers3D_.add(index, builderForValue.build());
          onChanged();
        } else {
          lasers3DBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder addAllLasers3D(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_Laser3D> values) {
        if (lasers3DBuilder_ == null) {
          ensureLasers3DIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, lasers3D_);
          onChanged();
        } else {
          lasers3DBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder clearLasers3D() {
        if (lasers3DBuilder_ == null) {
          lasers3D_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          lasers3DBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public Builder removeLasers3D(int index) {
        if (lasers3DBuilder_ == null) {
          ensureLasers3DIsMutable();
          lasers3D_.remove(index);
          onChanged();
        } else {
          lasers3DBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser3D.Builder getLasers3DBuilder(
          int index) {
        return getLasers3DFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser3DOrBuilder getLasers3DOrBuilder(
          int index) {
        if (lasers3DBuilder_ == null) {
          return lasers3D_.get(index);  } else {
          return lasers3DBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_Laser3DOrBuilder> 
           getLasers3DOrBuilderList() {
        if (lasers3DBuilder_ != null) {
          return lasers3DBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(lasers3D_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser3D.Builder addLasers3DBuilder() {
        return getLasers3DFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_Laser3D.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_Laser3D.Builder addLasers3DBuilder(
          int index) {
        return getLasers3DFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_Laser3D.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_Laser3D lasers3d = 1;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_Laser3D.Builder> 
           getLasers3DBuilderList() {
        return getLasers3DFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_Laser3D, rbk.protocol.MessageLaser.Message_Laser3D.Builder, rbk.protocol.MessageLaser.Message_Laser3DOrBuilder> 
          getLasers3DFieldBuilder() {
        if (lasers3DBuilder_ == null) {
          lasers3DBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_Laser3D, rbk.protocol.MessageLaser.Message_Laser3D.Builder, rbk.protocol.MessageLaser.Message_Laser3DOrBuilder>(
                  lasers3D_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          lasers3D_ = null;
        }
        return lasers3DBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_AllLasers3D)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_AllLasers3D)
    private static final rbk.protocol.MessageLaser.Message_AllLasers3D DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_AllLasers3D();
    }

    public static rbk.protocol.MessageLaser.Message_AllLasers3D getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_AllLasers3D>
        PARSER = new com.google.protobuf.AbstractParser<Message_AllLasers3D>() {
      @java.lang.Override
      public Message_AllLasers3D parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_AllLasers3D> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_AllLasers3D> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_AllLasers3D getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserClusterFeatureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserClusterFeature)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>double avg_rssi = 1;</code>
     * @return The avgRssi.
     */
    double getAvgRssi();

    /**
     * <code>double num_points = 2;</code>
     * @return The numPoints.
     */
    double getNumPoints();

    /**
     * <code>double std = 3;</code>
     * @return The std.
     */
    double getStd();

    /**
     * <code>double avg_median_dev = 4;</code>
     * @return The avgMedianDev.
     */
    double getAvgMedianDev();

    /**
     * <code>double prev_jump = 5;</code>
     * @return The prevJump.
     */
    double getPrevJump();

    /**
     * <code>double next_jump = 6;</code>
     * @return The nextJump.
     */
    double getNextJump();

    /**
     * <code>double width = 7;</code>
     * @return The width.
     */
    double getWidth();

    /**
     * <code>double linearity = 8;</code>
     * @return The linearity.
     */
    double getLinearity();

    /**
     * <code>double circularity = 9;</code>
     * @return The circularity.
     */
    double getCircularity();

    /**
     * <code>double radius = 10;</code>
     * @return The radius.
     */
    double getRadius();

    /**
     * <code>double boundary_length = 11;</code>
     * @return The boundaryLength.
     */
    double getBoundaryLength();

    /**
     * <code>double ang_diff = 12;</code>
     * @return The angDiff.
     */
    double getAngDiff();

    /**
     * <code>double mean_curvature = 13;</code>
     * @return The meanCurvature.
     */
    double getMeanCurvature();

    /**
     * <code>double boundary_regularity = 14;</code>
     * @return The boundaryRegularity.
     */
    double getBoundaryRegularity();

    /**
     * <code>double iav = 15;</code>
     * @return The iav.
     */
    double getIav();

    /**
     * <code>double std_iav = 16;</code>
     * @return The stdIav.
     */
    double getStdIav();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserClusterFeature}
   */
  public static final class Message_LaserClusterFeature extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserClusterFeature)
      Message_LaserClusterFeatureOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserClusterFeature.newBuilder() to construct.
    private Message_LaserClusterFeature(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserClusterFeature() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserClusterFeature();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserClusterFeature_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserClusterFeature_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserClusterFeature.class, rbk.protocol.MessageLaser.Message_LaserClusterFeature.Builder.class);
    }

    public static final int AVG_RSSI_FIELD_NUMBER = 1;
    private double avgRssi_ = 0D;
    /**
     * <code>double avg_rssi = 1;</code>
     * @return The avgRssi.
     */
    @java.lang.Override
    public double getAvgRssi() {
      return avgRssi_;
    }

    public static final int NUM_POINTS_FIELD_NUMBER = 2;
    private double numPoints_ = 0D;
    /**
     * <code>double num_points = 2;</code>
     * @return The numPoints.
     */
    @java.lang.Override
    public double getNumPoints() {
      return numPoints_;
    }

    public static final int STD_FIELD_NUMBER = 3;
    private double std_ = 0D;
    /**
     * <code>double std = 3;</code>
     * @return The std.
     */
    @java.lang.Override
    public double getStd() {
      return std_;
    }

    public static final int AVG_MEDIAN_DEV_FIELD_NUMBER = 4;
    private double avgMedianDev_ = 0D;
    /**
     * <code>double avg_median_dev = 4;</code>
     * @return The avgMedianDev.
     */
    @java.lang.Override
    public double getAvgMedianDev() {
      return avgMedianDev_;
    }

    public static final int PREV_JUMP_FIELD_NUMBER = 5;
    private double prevJump_ = 0D;
    /**
     * <code>double prev_jump = 5;</code>
     * @return The prevJump.
     */
    @java.lang.Override
    public double getPrevJump() {
      return prevJump_;
    }

    public static final int NEXT_JUMP_FIELD_NUMBER = 6;
    private double nextJump_ = 0D;
    /**
     * <code>double next_jump = 6;</code>
     * @return The nextJump.
     */
    @java.lang.Override
    public double getNextJump() {
      return nextJump_;
    }

    public static final int WIDTH_FIELD_NUMBER = 7;
    private double width_ = 0D;
    /**
     * <code>double width = 7;</code>
     * @return The width.
     */
    @java.lang.Override
    public double getWidth() {
      return width_;
    }

    public static final int LINEARITY_FIELD_NUMBER = 8;
    private double linearity_ = 0D;
    /**
     * <code>double linearity = 8;</code>
     * @return The linearity.
     */
    @java.lang.Override
    public double getLinearity() {
      return linearity_;
    }

    public static final int CIRCULARITY_FIELD_NUMBER = 9;
    private double circularity_ = 0D;
    /**
     * <code>double circularity = 9;</code>
     * @return The circularity.
     */
    @java.lang.Override
    public double getCircularity() {
      return circularity_;
    }

    public static final int RADIUS_FIELD_NUMBER = 10;
    private double radius_ = 0D;
    /**
     * <code>double radius = 10;</code>
     * @return The radius.
     */
    @java.lang.Override
    public double getRadius() {
      return radius_;
    }

    public static final int BOUNDARY_LENGTH_FIELD_NUMBER = 11;
    private double boundaryLength_ = 0D;
    /**
     * <code>double boundary_length = 11;</code>
     * @return The boundaryLength.
     */
    @java.lang.Override
    public double getBoundaryLength() {
      return boundaryLength_;
    }

    public static final int ANG_DIFF_FIELD_NUMBER = 12;
    private double angDiff_ = 0D;
    /**
     * <code>double ang_diff = 12;</code>
     * @return The angDiff.
     */
    @java.lang.Override
    public double getAngDiff() {
      return angDiff_;
    }

    public static final int MEAN_CURVATURE_FIELD_NUMBER = 13;
    private double meanCurvature_ = 0D;
    /**
     * <code>double mean_curvature = 13;</code>
     * @return The meanCurvature.
     */
    @java.lang.Override
    public double getMeanCurvature() {
      return meanCurvature_;
    }

    public static final int BOUNDARY_REGULARITY_FIELD_NUMBER = 14;
    private double boundaryRegularity_ = 0D;
    /**
     * <code>double boundary_regularity = 14;</code>
     * @return The boundaryRegularity.
     */
    @java.lang.Override
    public double getBoundaryRegularity() {
      return boundaryRegularity_;
    }

    public static final int IAV_FIELD_NUMBER = 15;
    private double iav_ = 0D;
    /**
     * <code>double iav = 15;</code>
     * @return The iav.
     */
    @java.lang.Override
    public double getIav() {
      return iav_;
    }

    public static final int STD_IAV_FIELD_NUMBER = 16;
    private double stdIav_ = 0D;
    /**
     * <code>double std_iav = 16;</code>
     * @return The stdIav.
     */
    @java.lang.Override
    public double getStdIav() {
      return stdIav_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(avgRssi_) != 0) {
        output.writeDouble(1, avgRssi_);
      }
      if (java.lang.Double.doubleToRawLongBits(numPoints_) != 0) {
        output.writeDouble(2, numPoints_);
      }
      if (java.lang.Double.doubleToRawLongBits(std_) != 0) {
        output.writeDouble(3, std_);
      }
      if (java.lang.Double.doubleToRawLongBits(avgMedianDev_) != 0) {
        output.writeDouble(4, avgMedianDev_);
      }
      if (java.lang.Double.doubleToRawLongBits(prevJump_) != 0) {
        output.writeDouble(5, prevJump_);
      }
      if (java.lang.Double.doubleToRawLongBits(nextJump_) != 0) {
        output.writeDouble(6, nextJump_);
      }
      if (java.lang.Double.doubleToRawLongBits(width_) != 0) {
        output.writeDouble(7, width_);
      }
      if (java.lang.Double.doubleToRawLongBits(linearity_) != 0) {
        output.writeDouble(8, linearity_);
      }
      if (java.lang.Double.doubleToRawLongBits(circularity_) != 0) {
        output.writeDouble(9, circularity_);
      }
      if (java.lang.Double.doubleToRawLongBits(radius_) != 0) {
        output.writeDouble(10, radius_);
      }
      if (java.lang.Double.doubleToRawLongBits(boundaryLength_) != 0) {
        output.writeDouble(11, boundaryLength_);
      }
      if (java.lang.Double.doubleToRawLongBits(angDiff_) != 0) {
        output.writeDouble(12, angDiff_);
      }
      if (java.lang.Double.doubleToRawLongBits(meanCurvature_) != 0) {
        output.writeDouble(13, meanCurvature_);
      }
      if (java.lang.Double.doubleToRawLongBits(boundaryRegularity_) != 0) {
        output.writeDouble(14, boundaryRegularity_);
      }
      if (java.lang.Double.doubleToRawLongBits(iav_) != 0) {
        output.writeDouble(15, iav_);
      }
      if (java.lang.Double.doubleToRawLongBits(stdIav_) != 0) {
        output.writeDouble(16, stdIav_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(avgRssi_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, avgRssi_);
      }
      if (java.lang.Double.doubleToRawLongBits(numPoints_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, numPoints_);
      }
      if (java.lang.Double.doubleToRawLongBits(std_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, std_);
      }
      if (java.lang.Double.doubleToRawLongBits(avgMedianDev_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, avgMedianDev_);
      }
      if (java.lang.Double.doubleToRawLongBits(prevJump_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, prevJump_);
      }
      if (java.lang.Double.doubleToRawLongBits(nextJump_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, nextJump_);
      }
      if (java.lang.Double.doubleToRawLongBits(width_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, width_);
      }
      if (java.lang.Double.doubleToRawLongBits(linearity_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, linearity_);
      }
      if (java.lang.Double.doubleToRawLongBits(circularity_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, circularity_);
      }
      if (java.lang.Double.doubleToRawLongBits(radius_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, radius_);
      }
      if (java.lang.Double.doubleToRawLongBits(boundaryLength_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, boundaryLength_);
      }
      if (java.lang.Double.doubleToRawLongBits(angDiff_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, angDiff_);
      }
      if (java.lang.Double.doubleToRawLongBits(meanCurvature_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(13, meanCurvature_);
      }
      if (java.lang.Double.doubleToRawLongBits(boundaryRegularity_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(14, boundaryRegularity_);
      }
      if (java.lang.Double.doubleToRawLongBits(iav_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(15, iav_);
      }
      if (java.lang.Double.doubleToRawLongBits(stdIav_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(16, stdIav_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserClusterFeature)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserClusterFeature other = (rbk.protocol.MessageLaser.Message_LaserClusterFeature) obj;

      if (java.lang.Double.doubleToLongBits(getAvgRssi())
          != java.lang.Double.doubleToLongBits(
              other.getAvgRssi())) return false;
      if (java.lang.Double.doubleToLongBits(getNumPoints())
          != java.lang.Double.doubleToLongBits(
              other.getNumPoints())) return false;
      if (java.lang.Double.doubleToLongBits(getStd())
          != java.lang.Double.doubleToLongBits(
              other.getStd())) return false;
      if (java.lang.Double.doubleToLongBits(getAvgMedianDev())
          != java.lang.Double.doubleToLongBits(
              other.getAvgMedianDev())) return false;
      if (java.lang.Double.doubleToLongBits(getPrevJump())
          != java.lang.Double.doubleToLongBits(
              other.getPrevJump())) return false;
      if (java.lang.Double.doubleToLongBits(getNextJump())
          != java.lang.Double.doubleToLongBits(
              other.getNextJump())) return false;
      if (java.lang.Double.doubleToLongBits(getWidth())
          != java.lang.Double.doubleToLongBits(
              other.getWidth())) return false;
      if (java.lang.Double.doubleToLongBits(getLinearity())
          != java.lang.Double.doubleToLongBits(
              other.getLinearity())) return false;
      if (java.lang.Double.doubleToLongBits(getCircularity())
          != java.lang.Double.doubleToLongBits(
              other.getCircularity())) return false;
      if (java.lang.Double.doubleToLongBits(getRadius())
          != java.lang.Double.doubleToLongBits(
              other.getRadius())) return false;
      if (java.lang.Double.doubleToLongBits(getBoundaryLength())
          != java.lang.Double.doubleToLongBits(
              other.getBoundaryLength())) return false;
      if (java.lang.Double.doubleToLongBits(getAngDiff())
          != java.lang.Double.doubleToLongBits(
              other.getAngDiff())) return false;
      if (java.lang.Double.doubleToLongBits(getMeanCurvature())
          != java.lang.Double.doubleToLongBits(
              other.getMeanCurvature())) return false;
      if (java.lang.Double.doubleToLongBits(getBoundaryRegularity())
          != java.lang.Double.doubleToLongBits(
              other.getBoundaryRegularity())) return false;
      if (java.lang.Double.doubleToLongBits(getIav())
          != java.lang.Double.doubleToLongBits(
              other.getIav())) return false;
      if (java.lang.Double.doubleToLongBits(getStdIav())
          != java.lang.Double.doubleToLongBits(
              other.getStdIav())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + AVG_RSSI_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAvgRssi()));
      hash = (37 * hash) + NUM_POINTS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getNumPoints()));
      hash = (37 * hash) + STD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getStd()));
      hash = (37 * hash) + AVG_MEDIAN_DEV_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAvgMedianDev()));
      hash = (37 * hash) + PREV_JUMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getPrevJump()));
      hash = (37 * hash) + NEXT_JUMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getNextJump()));
      hash = (37 * hash) + WIDTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getWidth()));
      hash = (37 * hash) + LINEARITY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLinearity()));
      hash = (37 * hash) + CIRCULARITY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getCircularity()));
      hash = (37 * hash) + RADIUS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRadius()));
      hash = (37 * hash) + BOUNDARY_LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getBoundaryLength()));
      hash = (37 * hash) + ANG_DIFF_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAngDiff()));
      hash = (37 * hash) + MEAN_CURVATURE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMeanCurvature()));
      hash = (37 * hash) + BOUNDARY_REGULARITY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getBoundaryRegularity()));
      hash = (37 * hash) + IAV_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getIav()));
      hash = (37 * hash) + STD_IAV_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getStdIav()));
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserClusterFeature prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserClusterFeature}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserClusterFeature)
        rbk.protocol.MessageLaser.Message_LaserClusterFeatureOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserClusterFeature_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserClusterFeature_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserClusterFeature.class, rbk.protocol.MessageLaser.Message_LaserClusterFeature.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserClusterFeature.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        avgRssi_ = 0D;
        numPoints_ = 0D;
        std_ = 0D;
        avgMedianDev_ = 0D;
        prevJump_ = 0D;
        nextJump_ = 0D;
        width_ = 0D;
        linearity_ = 0D;
        circularity_ = 0D;
        radius_ = 0D;
        boundaryLength_ = 0D;
        angDiff_ = 0D;
        meanCurvature_ = 0D;
        boundaryRegularity_ = 0D;
        iav_ = 0D;
        stdIav_ = 0D;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserClusterFeature_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserClusterFeature getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserClusterFeature.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserClusterFeature build() {
        rbk.protocol.MessageLaser.Message_LaserClusterFeature result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserClusterFeature buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserClusterFeature result = new rbk.protocol.MessageLaser.Message_LaserClusterFeature(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserClusterFeature result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.avgRssi_ = avgRssi_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.numPoints_ = numPoints_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.std_ = std_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.avgMedianDev_ = avgMedianDev_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.prevJump_ = prevJump_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.nextJump_ = nextJump_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.width_ = width_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.linearity_ = linearity_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.circularity_ = circularity_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.radius_ = radius_;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.boundaryLength_ = boundaryLength_;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.angDiff_ = angDiff_;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.meanCurvature_ = meanCurvature_;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.boundaryRegularity_ = boundaryRegularity_;
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.iav_ = iav_;
        }
        if (((from_bitField0_ & 0x00008000) != 0)) {
          result.stdIav_ = stdIav_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserClusterFeature) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserClusterFeature)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserClusterFeature other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserClusterFeature.getDefaultInstance()) return this;
        if (other.getAvgRssi() != 0D) {
          setAvgRssi(other.getAvgRssi());
        }
        if (other.getNumPoints() != 0D) {
          setNumPoints(other.getNumPoints());
        }
        if (other.getStd() != 0D) {
          setStd(other.getStd());
        }
        if (other.getAvgMedianDev() != 0D) {
          setAvgMedianDev(other.getAvgMedianDev());
        }
        if (other.getPrevJump() != 0D) {
          setPrevJump(other.getPrevJump());
        }
        if (other.getNextJump() != 0D) {
          setNextJump(other.getNextJump());
        }
        if (other.getWidth() != 0D) {
          setWidth(other.getWidth());
        }
        if (other.getLinearity() != 0D) {
          setLinearity(other.getLinearity());
        }
        if (other.getCircularity() != 0D) {
          setCircularity(other.getCircularity());
        }
        if (other.getRadius() != 0D) {
          setRadius(other.getRadius());
        }
        if (other.getBoundaryLength() != 0D) {
          setBoundaryLength(other.getBoundaryLength());
        }
        if (other.getAngDiff() != 0D) {
          setAngDiff(other.getAngDiff());
        }
        if (other.getMeanCurvature() != 0D) {
          setMeanCurvature(other.getMeanCurvature());
        }
        if (other.getBoundaryRegularity() != 0D) {
          setBoundaryRegularity(other.getBoundaryRegularity());
        }
        if (other.getIav() != 0D) {
          setIav(other.getIav());
        }
        if (other.getStdIav() != 0D) {
          setStdIav(other.getStdIav());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                avgRssi_ = input.readDouble();
                bitField0_ |= 0x00000001;
                break;
              } // case 9
              case 17: {
                numPoints_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                std_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 33: {
                avgMedianDev_ = input.readDouble();
                bitField0_ |= 0x00000008;
                break;
              } // case 33
              case 41: {
                prevJump_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              case 49: {
                nextJump_ = input.readDouble();
                bitField0_ |= 0x00000020;
                break;
              } // case 49
              case 57: {
                width_ = input.readDouble();
                bitField0_ |= 0x00000040;
                break;
              } // case 57
              case 65: {
                linearity_ = input.readDouble();
                bitField0_ |= 0x00000080;
                break;
              } // case 65
              case 73: {
                circularity_ = input.readDouble();
                bitField0_ |= 0x00000100;
                break;
              } // case 73
              case 81: {
                radius_ = input.readDouble();
                bitField0_ |= 0x00000200;
                break;
              } // case 81
              case 89: {
                boundaryLength_ = input.readDouble();
                bitField0_ |= 0x00000400;
                break;
              } // case 89
              case 97: {
                angDiff_ = input.readDouble();
                bitField0_ |= 0x00000800;
                break;
              } // case 97
              case 105: {
                meanCurvature_ = input.readDouble();
                bitField0_ |= 0x00001000;
                break;
              } // case 105
              case 113: {
                boundaryRegularity_ = input.readDouble();
                bitField0_ |= 0x00002000;
                break;
              } // case 113
              case 121: {
                iav_ = input.readDouble();
                bitField0_ |= 0x00004000;
                break;
              } // case 121
              case 129: {
                stdIav_ = input.readDouble();
                bitField0_ |= 0x00008000;
                break;
              } // case 129
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double avgRssi_ ;
      /**
       * <code>double avg_rssi = 1;</code>
       * @return The avgRssi.
       */
      @java.lang.Override
      public double getAvgRssi() {
        return avgRssi_;
      }
      /**
       * <code>double avg_rssi = 1;</code>
       * @param value The avgRssi to set.
       * @return This builder for chaining.
       */
      public Builder setAvgRssi(double value) {

        avgRssi_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>double avg_rssi = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAvgRssi() {
        bitField0_ = (bitField0_ & ~0x00000001);
        avgRssi_ = 0D;
        onChanged();
        return this;
      }

      private double numPoints_ ;
      /**
       * <code>double num_points = 2;</code>
       * @return The numPoints.
       */
      @java.lang.Override
      public double getNumPoints() {
        return numPoints_;
      }
      /**
       * <code>double num_points = 2;</code>
       * @param value The numPoints to set.
       * @return This builder for chaining.
       */
      public Builder setNumPoints(double value) {

        numPoints_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>double num_points = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNumPoints() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numPoints_ = 0D;
        onChanged();
        return this;
      }

      private double std_ ;
      /**
       * <code>double std = 3;</code>
       * @return The std.
       */
      @java.lang.Override
      public double getStd() {
        return std_;
      }
      /**
       * <code>double std = 3;</code>
       * @param value The std to set.
       * @return This builder for chaining.
       */
      public Builder setStd(double value) {

        std_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>double std = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStd() {
        bitField0_ = (bitField0_ & ~0x00000004);
        std_ = 0D;
        onChanged();
        return this;
      }

      private double avgMedianDev_ ;
      /**
       * <code>double avg_median_dev = 4;</code>
       * @return The avgMedianDev.
       */
      @java.lang.Override
      public double getAvgMedianDev() {
        return avgMedianDev_;
      }
      /**
       * <code>double avg_median_dev = 4;</code>
       * @param value The avgMedianDev to set.
       * @return This builder for chaining.
       */
      public Builder setAvgMedianDev(double value) {

        avgMedianDev_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>double avg_median_dev = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAvgMedianDev() {
        bitField0_ = (bitField0_ & ~0x00000008);
        avgMedianDev_ = 0D;
        onChanged();
        return this;
      }

      private double prevJump_ ;
      /**
       * <code>double prev_jump = 5;</code>
       * @return The prevJump.
       */
      @java.lang.Override
      public double getPrevJump() {
        return prevJump_;
      }
      /**
       * <code>double prev_jump = 5;</code>
       * @param value The prevJump to set.
       * @return This builder for chaining.
       */
      public Builder setPrevJump(double value) {

        prevJump_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>double prev_jump = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrevJump() {
        bitField0_ = (bitField0_ & ~0x00000010);
        prevJump_ = 0D;
        onChanged();
        return this;
      }

      private double nextJump_ ;
      /**
       * <code>double next_jump = 6;</code>
       * @return The nextJump.
       */
      @java.lang.Override
      public double getNextJump() {
        return nextJump_;
      }
      /**
       * <code>double next_jump = 6;</code>
       * @param value The nextJump to set.
       * @return This builder for chaining.
       */
      public Builder setNextJump(double value) {

        nextJump_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>double next_jump = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearNextJump() {
        bitField0_ = (bitField0_ & ~0x00000020);
        nextJump_ = 0D;
        onChanged();
        return this;
      }

      private double width_ ;
      /**
       * <code>double width = 7;</code>
       * @return The width.
       */
      @java.lang.Override
      public double getWidth() {
        return width_;
      }
      /**
       * <code>double width = 7;</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(double value) {

        width_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>double width = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000040);
        width_ = 0D;
        onChanged();
        return this;
      }

      private double linearity_ ;
      /**
       * <code>double linearity = 8;</code>
       * @return The linearity.
       */
      @java.lang.Override
      public double getLinearity() {
        return linearity_;
      }
      /**
       * <code>double linearity = 8;</code>
       * @param value The linearity to set.
       * @return This builder for chaining.
       */
      public Builder setLinearity(double value) {

        linearity_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>double linearity = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearLinearity() {
        bitField0_ = (bitField0_ & ~0x00000080);
        linearity_ = 0D;
        onChanged();
        return this;
      }

      private double circularity_ ;
      /**
       * <code>double circularity = 9;</code>
       * @return The circularity.
       */
      @java.lang.Override
      public double getCircularity() {
        return circularity_;
      }
      /**
       * <code>double circularity = 9;</code>
       * @param value The circularity to set.
       * @return This builder for chaining.
       */
      public Builder setCircularity(double value) {

        circularity_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>double circularity = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearCircularity() {
        bitField0_ = (bitField0_ & ~0x00000100);
        circularity_ = 0D;
        onChanged();
        return this;
      }

      private double radius_ ;
      /**
       * <code>double radius = 10;</code>
       * @return The radius.
       */
      @java.lang.Override
      public double getRadius() {
        return radius_;
      }
      /**
       * <code>double radius = 10;</code>
       * @param value The radius to set.
       * @return This builder for chaining.
       */
      public Builder setRadius(double value) {

        radius_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>double radius = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearRadius() {
        bitField0_ = (bitField0_ & ~0x00000200);
        radius_ = 0D;
        onChanged();
        return this;
      }

      private double boundaryLength_ ;
      /**
       * <code>double boundary_length = 11;</code>
       * @return The boundaryLength.
       */
      @java.lang.Override
      public double getBoundaryLength() {
        return boundaryLength_;
      }
      /**
       * <code>double boundary_length = 11;</code>
       * @param value The boundaryLength to set.
       * @return This builder for chaining.
       */
      public Builder setBoundaryLength(double value) {

        boundaryLength_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>double boundary_length = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoundaryLength() {
        bitField0_ = (bitField0_ & ~0x00000400);
        boundaryLength_ = 0D;
        onChanged();
        return this;
      }

      private double angDiff_ ;
      /**
       * <code>double ang_diff = 12;</code>
       * @return The angDiff.
       */
      @java.lang.Override
      public double getAngDiff() {
        return angDiff_;
      }
      /**
       * <code>double ang_diff = 12;</code>
       * @param value The angDiff to set.
       * @return This builder for chaining.
       */
      public Builder setAngDiff(double value) {

        angDiff_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>double ang_diff = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearAngDiff() {
        bitField0_ = (bitField0_ & ~0x00000800);
        angDiff_ = 0D;
        onChanged();
        return this;
      }

      private double meanCurvature_ ;
      /**
       * <code>double mean_curvature = 13;</code>
       * @return The meanCurvature.
       */
      @java.lang.Override
      public double getMeanCurvature() {
        return meanCurvature_;
      }
      /**
       * <code>double mean_curvature = 13;</code>
       * @param value The meanCurvature to set.
       * @return This builder for chaining.
       */
      public Builder setMeanCurvature(double value) {

        meanCurvature_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <code>double mean_curvature = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearMeanCurvature() {
        bitField0_ = (bitField0_ & ~0x00001000);
        meanCurvature_ = 0D;
        onChanged();
        return this;
      }

      private double boundaryRegularity_ ;
      /**
       * <code>double boundary_regularity = 14;</code>
       * @return The boundaryRegularity.
       */
      @java.lang.Override
      public double getBoundaryRegularity() {
        return boundaryRegularity_;
      }
      /**
       * <code>double boundary_regularity = 14;</code>
       * @param value The boundaryRegularity to set.
       * @return This builder for chaining.
       */
      public Builder setBoundaryRegularity(double value) {

        boundaryRegularity_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <code>double boundary_regularity = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoundaryRegularity() {
        bitField0_ = (bitField0_ & ~0x00002000);
        boundaryRegularity_ = 0D;
        onChanged();
        return this;
      }

      private double iav_ ;
      /**
       * <code>double iav = 15;</code>
       * @return The iav.
       */
      @java.lang.Override
      public double getIav() {
        return iav_;
      }
      /**
       * <code>double iav = 15;</code>
       * @param value The iav to set.
       * @return This builder for chaining.
       */
      public Builder setIav(double value) {

        iav_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <code>double iav = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearIav() {
        bitField0_ = (bitField0_ & ~0x00004000);
        iav_ = 0D;
        onChanged();
        return this;
      }

      private double stdIav_ ;
      /**
       * <code>double std_iav = 16;</code>
       * @return The stdIav.
       */
      @java.lang.Override
      public double getStdIav() {
        return stdIav_;
      }
      /**
       * <code>double std_iav = 16;</code>
       * @param value The stdIav to set.
       * @return This builder for chaining.
       */
      public Builder setStdIav(double value) {

        stdIav_ = value;
        bitField0_ |= 0x00008000;
        onChanged();
        return this;
      }
      /**
       * <code>double std_iav = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearStdIav() {
        bitField0_ = (bitField0_ & ~0x00008000);
        stdIav_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserClusterFeature)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserClusterFeature)
    private static final rbk.protocol.MessageLaser.Message_LaserClusterFeature DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserClusterFeature();
    }

    public static rbk.protocol.MessageLaser.Message_LaserClusterFeature getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserClusterFeature>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserClusterFeature>() {
      @java.lang.Override
      public Message_LaserClusterFeature parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserClusterFeature> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserClusterFeature> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserClusterFeature getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserClusterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserCluster)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return Whether the deviceInfo field is set.
     */
    boolean hasDeviceInfo();
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return The deviceInfo.
     */
    rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo();
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder();

    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return Whether the installInfo field is set.
     */
    boolean hasInstallInfo();
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return The installInfo.
     */
    rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo();
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder();

    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return The header.
     */
    rbk.protocol.MessageHeader.Message_Header getHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     */
    rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> 
        getBeamsList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeam getBeams(int index);
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    int getBeamsCount();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
        getBeamsOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsOrBuilder(
        int index);

    /**
     * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
     * @return Whether the features field is set.
     */
    boolean hasFeatures();
    /**
     * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
     * @return The features.
     */
    rbk.protocol.MessageLaser.Message_LaserClusterFeature getFeatures();
    /**
     * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserClusterFeatureOrBuilder getFeaturesOrBuilder();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserCluster}
   */
  public static final class Message_LaserCluster extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserCluster)
      Message_LaserClusterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserCluster.newBuilder() to construct.
    private Message_LaserCluster(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserCluster() {
      beams_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserCluster();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserCluster_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserCluster_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserCluster.class, rbk.protocol.MessageLaser.Message_LaserCluster.Builder.class);
    }

    public static final int DEVICE_INFO_FIELD_NUMBER = 1;
    private rbk.protocol.MessageLaser.Message_LaserDeviceInfo deviceInfo_;
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return Whether the deviceInfo field is set.
     */
    @java.lang.Override
    public boolean hasDeviceInfo() {
      return deviceInfo_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     * @return The deviceInfo.
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo() {
      return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
    }
    /**
     * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder() {
      return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
    }

    public static final int INSTALL_INFO_FIELD_NUMBER = 2;
    private rbk.protocol.MessageLaser.Message_LaserInstallInfo installInfo_;
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return Whether the installInfo field is set.
     */
    @java.lang.Override
    public boolean hasInstallInfo() {
      return installInfo_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     * @return The installInfo.
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo() {
      return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
    }
    /**
     * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder() {
      return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
    }

    public static final int HEADER_FIELD_NUMBER = 3;
    private rbk.protocol.MessageHeader.Message_Header header_;
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     * @return The header.
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_Header getHeader() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 3;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }

    public static final int BEAMS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> beams_;
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> getBeamsList() {
      return beams_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
        getBeamsOrBuilderList() {
      return beams_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public int getBeamsCount() {
      return beams_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeam getBeams(int index) {
      return beams_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsOrBuilder(
        int index) {
      return beams_.get(index);
    }

    public static final int FEATURES_FIELD_NUMBER = 5;
    private rbk.protocol.MessageLaser.Message_LaserClusterFeature features_;
    /**
     * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
     * @return Whether the features field is set.
     */
    @java.lang.Override
    public boolean hasFeatures() {
      return features_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
     * @return The features.
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserClusterFeature getFeatures() {
      return features_ == null ? rbk.protocol.MessageLaser.Message_LaserClusterFeature.getDefaultInstance() : features_;
    }
    /**
     * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserClusterFeatureOrBuilder getFeaturesOrBuilder() {
      return features_ == null ? rbk.protocol.MessageLaser.Message_LaserClusterFeature.getDefaultInstance() : features_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (deviceInfo_ != null) {
        output.writeMessage(1, getDeviceInfo());
      }
      if (installInfo_ != null) {
        output.writeMessage(2, getInstallInfo());
      }
      if (header_ != null) {
        output.writeMessage(3, getHeader());
      }
      for (int i = 0; i < beams_.size(); i++) {
        output.writeMessage(4, beams_.get(i));
      }
      if (features_ != null) {
        output.writeMessage(5, getFeatures());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (deviceInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDeviceInfo());
      }
      if (installInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getInstallInfo());
      }
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getHeader());
      }
      for (int i = 0; i < beams_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, beams_.get(i));
      }
      if (features_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getFeatures());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserCluster)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserCluster other = (rbk.protocol.MessageLaser.Message_LaserCluster) obj;

      if (hasDeviceInfo() != other.hasDeviceInfo()) return false;
      if (hasDeviceInfo()) {
        if (!getDeviceInfo()
            .equals(other.getDeviceInfo())) return false;
      }
      if (hasInstallInfo() != other.hasInstallInfo()) return false;
      if (hasInstallInfo()) {
        if (!getInstallInfo()
            .equals(other.getInstallInfo())) return false;
      }
      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (!getBeamsList()
          .equals(other.getBeamsList())) return false;
      if (hasFeatures() != other.hasFeatures()) return false;
      if (hasFeatures()) {
        if (!getFeatures()
            .equals(other.getFeatures())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDeviceInfo()) {
        hash = (37 * hash) + DEVICE_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getDeviceInfo().hashCode();
      }
      if (hasInstallInfo()) {
        hash = (37 * hash) + INSTALL_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInstallInfo().hashCode();
      }
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (getBeamsCount() > 0) {
        hash = (37 * hash) + BEAMS_FIELD_NUMBER;
        hash = (53 * hash) + getBeamsList().hashCode();
      }
      if (hasFeatures()) {
        hash = (37 * hash) + FEATURES_FIELD_NUMBER;
        hash = (53 * hash) + getFeatures().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserCluster parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserCluster parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserCluster parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserCluster prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserCluster}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserCluster)
        rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserCluster_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserCluster_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserCluster.class, rbk.protocol.MessageLaser.Message_LaserCluster.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserCluster.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        deviceInfo_ = null;
        if (deviceInfoBuilder_ != null) {
          deviceInfoBuilder_.dispose();
          deviceInfoBuilder_ = null;
        }
        installInfo_ = null;
        if (installInfoBuilder_ != null) {
          installInfoBuilder_.dispose();
          installInfoBuilder_ = null;
        }
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        if (beamsBuilder_ == null) {
          beams_ = java.util.Collections.emptyList();
        } else {
          beams_ = null;
          beamsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        features_ = null;
        if (featuresBuilder_ != null) {
          featuresBuilder_.dispose();
          featuresBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserCluster_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserCluster getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserCluster.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserCluster build() {
        rbk.protocol.MessageLaser.Message_LaserCluster result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserCluster buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserCluster result = new rbk.protocol.MessageLaser.Message_LaserCluster(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_LaserCluster result) {
        if (beamsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            beams_ = java.util.Collections.unmodifiableList(beams_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.beams_ = beams_;
        } else {
          result.beams_ = beamsBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserCluster result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.deviceInfo_ = deviceInfoBuilder_ == null
              ? deviceInfo_
              : deviceInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.installInfo_ = installInfoBuilder_ == null
              ? installInfo_
              : installInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.header_ = headerBuilder_ == null
              ? header_
              : headerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.features_ = featuresBuilder_ == null
              ? features_
              : featuresBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserCluster) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserCluster)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserCluster other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserCluster.getDefaultInstance()) return this;
        if (other.hasDeviceInfo()) {
          mergeDeviceInfo(other.getDeviceInfo());
        }
        if (other.hasInstallInfo()) {
          mergeInstallInfo(other.getInstallInfo());
        }
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (beamsBuilder_ == null) {
          if (!other.beams_.isEmpty()) {
            if (beams_.isEmpty()) {
              beams_ = other.beams_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureBeamsIsMutable();
              beams_.addAll(other.beams_);
            }
            onChanged();
          }
        } else {
          if (!other.beams_.isEmpty()) {
            if (beamsBuilder_.isEmpty()) {
              beamsBuilder_.dispose();
              beamsBuilder_ = null;
              beams_ = other.beams_;
              bitField0_ = (bitField0_ & ~0x00000008);
              beamsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBeamsFieldBuilder() : null;
            } else {
              beamsBuilder_.addAllMessages(other.beams_);
            }
          }
        }
        if (other.hasFeatures()) {
          mergeFeatures(other.getFeatures());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getDeviceInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getInstallInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getHeaderFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                rbk.protocol.MessageLaser.Message_LaserBeam m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_LaserBeam.parser(),
                        extensionRegistry);
                if (beamsBuilder_ == null) {
                  ensureBeamsIsMutable();
                  beams_.add(m);
                } else {
                  beamsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getFeaturesFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private rbk.protocol.MessageLaser.Message_LaserDeviceInfo deviceInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder> deviceInfoBuilder_;
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       * @return Whether the deviceInfo field is set.
       */
      public boolean hasDeviceInfo() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       * @return The deviceInfo.
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo getDeviceInfo() {
        if (deviceInfoBuilder_ == null) {
          return deviceInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
        } else {
          return deviceInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder setDeviceInfo(rbk.protocol.MessageLaser.Message_LaserDeviceInfo value) {
        if (deviceInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deviceInfo_ = value;
        } else {
          deviceInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder setDeviceInfo(
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder builderForValue) {
        if (deviceInfoBuilder_ == null) {
          deviceInfo_ = builderForValue.build();
        } else {
          deviceInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder mergeDeviceInfo(rbk.protocol.MessageLaser.Message_LaserDeviceInfo value) {
        if (deviceInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            deviceInfo_ != null &&
            deviceInfo_ != rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance()) {
            getDeviceInfoBuilder().mergeFrom(value);
          } else {
            deviceInfo_ = value;
          }
        } else {
          deviceInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public Builder clearDeviceInfo() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceInfo_ = null;
        if (deviceInfoBuilder_ != null) {
          deviceInfoBuilder_.dispose();
          deviceInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder getDeviceInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDeviceInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder getDeviceInfoOrBuilder() {
        if (deviceInfoBuilder_ != null) {
          return deviceInfoBuilder_.getMessageOrBuilder();
        } else {
          return deviceInfo_ == null ?
              rbk.protocol.MessageLaser.Message_LaserDeviceInfo.getDefaultInstance() : deviceInfo_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserDeviceInfo device_info = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder> 
          getDeviceInfoFieldBuilder() {
        if (deviceInfoBuilder_ == null) {
          deviceInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserDeviceInfo, rbk.protocol.MessageLaser.Message_LaserDeviceInfo.Builder, rbk.protocol.MessageLaser.Message_LaserDeviceInfoOrBuilder>(
                  getDeviceInfo(),
                  getParentForChildren(),
                  isClean());
          deviceInfo_ = null;
        }
        return deviceInfoBuilder_;
      }

      private rbk.protocol.MessageLaser.Message_LaserInstallInfo installInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder> installInfoBuilder_;
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       * @return Whether the installInfo field is set.
       */
      public boolean hasInstallInfo() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       * @return The installInfo.
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo getInstallInfo() {
        if (installInfoBuilder_ == null) {
          return installInfo_ == null ? rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
        } else {
          return installInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder setInstallInfo(rbk.protocol.MessageLaser.Message_LaserInstallInfo value) {
        if (installInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          installInfo_ = value;
        } else {
          installInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder setInstallInfo(
          rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder builderForValue) {
        if (installInfoBuilder_ == null) {
          installInfo_ = builderForValue.build();
        } else {
          installInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder mergeInstallInfo(rbk.protocol.MessageLaser.Message_LaserInstallInfo value) {
        if (installInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            installInfo_ != null &&
            installInfo_ != rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance()) {
            getInstallInfoBuilder().mergeFrom(value);
          } else {
            installInfo_ = value;
          }
        } else {
          installInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public Builder clearInstallInfo() {
        bitField0_ = (bitField0_ & ~0x00000002);
        installInfo_ = null;
        if (installInfoBuilder_ != null) {
          installInfoBuilder_.dispose();
          installInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder getInstallInfoBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInstallInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder getInstallInfoOrBuilder() {
        if (installInfoBuilder_ != null) {
          return installInfoBuilder_.getMessageOrBuilder();
        } else {
          return installInfo_ == null ?
              rbk.protocol.MessageLaser.Message_LaserInstallInfo.getDefaultInstance() : installInfo_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserInstallInfo install_info = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder> 
          getInstallInfoFieldBuilder() {
        if (installInfoBuilder_ == null) {
          installInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserInstallInfo, rbk.protocol.MessageLaser.Message_LaserInstallInfo.Builder, rbk.protocol.MessageLaser.Message_LaserInstallInfoOrBuilder>(
                  getInstallInfo(),
                  getParentForChildren(),
                  isClean());
          installInfo_ = null;
        }
        return installInfoBuilder_;
      }

      private rbk.protocol.MessageHeader.Message_Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       * @return The header.
       */
      public rbk.protocol.MessageHeader.Message_Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder setHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder setHeader(
          rbk.protocol.MessageHeader.Message_Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder mergeHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            header_ != null &&
            header_ != rbk.protocol.MessageHeader.Message_Header.getDefaultInstance()) {
            getHeaderBuilder().mergeFrom(value);
          } else {
            header_ = value;
          }
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public Builder clearHeader() {
        bitField0_ = (bitField0_ & ~0x00000004);
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public rbk.protocol.MessageHeader.Message_Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> beams_ =
        java.util.Collections.emptyList();
      private void ensureBeamsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          beams_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_LaserBeam>(beams_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> beamsBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam> getBeamsList() {
        if (beamsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(beams_);
        } else {
          return beamsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public int getBeamsCount() {
        if (beamsBuilder_ == null) {
          return beams_.size();
        } else {
          return beamsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam getBeams(int index) {
        if (beamsBuilder_ == null) {
          return beams_.get(index);
        } else {
          return beamsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder setBeams(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsIsMutable();
          beams_.set(index, value);
          onChanged();
        } else {
          beamsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder setBeams(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          beams_.set(index, builderForValue.build());
          onChanged();
        } else {
          beamsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addBeams(rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsIsMutable();
          beams_.add(value);
          onChanged();
        } else {
          beamsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addBeams(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam value) {
        if (beamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBeamsIsMutable();
          beams_.add(index, value);
          onChanged();
        } else {
          beamsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addBeams(
          rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          beams_.add(builderForValue.build());
          onChanged();
        } else {
          beamsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addBeams(
          int index, rbk.protocol.MessageLaser.Message_LaserBeam.Builder builderForValue) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          beams_.add(index, builderForValue.build());
          onChanged();
        } else {
          beamsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder addAllBeams(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_LaserBeam> values) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, beams_);
          onChanged();
        } else {
          beamsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder clearBeams() {
        if (beamsBuilder_ == null) {
          beams_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          beamsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public Builder removeBeams(int index) {
        if (beamsBuilder_ == null) {
          ensureBeamsIsMutable();
          beams_.remove(index);
          onChanged();
        } else {
          beamsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder getBeamsBuilder(
          int index) {
        return getBeamsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder getBeamsOrBuilder(
          int index) {
        if (beamsBuilder_ == null) {
          return beams_.get(index);  } else {
          return beamsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
           getBeamsOrBuilderList() {
        if (beamsBuilder_ != null) {
          return beamsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(beams_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder addBeamsBuilder() {
        return getBeamsFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserBeam.Builder addBeamsBuilder(
          int index) {
        return getBeamsFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_LaserBeam.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserBeam beams = 4;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserBeam.Builder> 
           getBeamsBuilderList() {
        return getBeamsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder> 
          getBeamsFieldBuilder() {
        if (beamsBuilder_ == null) {
          beamsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserBeam, rbk.protocol.MessageLaser.Message_LaserBeam.Builder, rbk.protocol.MessageLaser.Message_LaserBeamOrBuilder>(
                  beams_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          beams_ = null;
        }
        return beamsBuilder_;
      }

      private rbk.protocol.MessageLaser.Message_LaserClusterFeature features_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserClusterFeature, rbk.protocol.MessageLaser.Message_LaserClusterFeature.Builder, rbk.protocol.MessageLaser.Message_LaserClusterFeatureOrBuilder> featuresBuilder_;
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       * @return Whether the features field is set.
       */
      public boolean hasFeatures() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       * @return The features.
       */
      public rbk.protocol.MessageLaser.Message_LaserClusterFeature getFeatures() {
        if (featuresBuilder_ == null) {
          return features_ == null ? rbk.protocol.MessageLaser.Message_LaserClusterFeature.getDefaultInstance() : features_;
        } else {
          return featuresBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       */
      public Builder setFeatures(rbk.protocol.MessageLaser.Message_LaserClusterFeature value) {
        if (featuresBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          features_ = value;
        } else {
          featuresBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       */
      public Builder setFeatures(
          rbk.protocol.MessageLaser.Message_LaserClusterFeature.Builder builderForValue) {
        if (featuresBuilder_ == null) {
          features_ = builderForValue.build();
        } else {
          featuresBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       */
      public Builder mergeFeatures(rbk.protocol.MessageLaser.Message_LaserClusterFeature value) {
        if (featuresBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            features_ != null &&
            features_ != rbk.protocol.MessageLaser.Message_LaserClusterFeature.getDefaultInstance()) {
            getFeaturesBuilder().mergeFrom(value);
          } else {
            features_ = value;
          }
        } else {
          featuresBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       */
      public Builder clearFeatures() {
        bitField0_ = (bitField0_ & ~0x00000010);
        features_ = null;
        if (featuresBuilder_ != null) {
          featuresBuilder_.dispose();
          featuresBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserClusterFeature.Builder getFeaturesBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getFeaturesFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserClusterFeatureOrBuilder getFeaturesOrBuilder() {
        if (featuresBuilder_ != null) {
          return featuresBuilder_.getMessageOrBuilder();
        } else {
          return features_ == null ?
              rbk.protocol.MessageLaser.Message_LaserClusterFeature.getDefaultInstance() : features_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_LaserClusterFeature features = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserClusterFeature, rbk.protocol.MessageLaser.Message_LaserClusterFeature.Builder, rbk.protocol.MessageLaser.Message_LaserClusterFeatureOrBuilder> 
          getFeaturesFieldBuilder() {
        if (featuresBuilder_ == null) {
          featuresBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserClusterFeature, rbk.protocol.MessageLaser.Message_LaserClusterFeature.Builder, rbk.protocol.MessageLaser.Message_LaserClusterFeatureOrBuilder>(
                  getFeatures(),
                  getParentForChildren(),
                  isClean());
          features_ = null;
        }
        return featuresBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserCluster)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserCluster)
    private static final rbk.protocol.MessageLaser.Message_LaserCluster DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserCluster();
    }

    public static rbk.protocol.MessageLaser.Message_LaserCluster getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserCluster>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserCluster>() {
      @java.lang.Override
      public Message_LaserCluster parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserCluster> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserCluster> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserCluster getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserSegResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserSegResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return The header.
     */
    rbk.protocol.MessageHeader.Message_Header getHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     */
    rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_LaserCluster> 
        getClustersList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserCluster getClusters(int index);
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    int getClustersCount();
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder> 
        getClustersOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder getClustersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserSegResult}
   */
  public static final class Message_LaserSegResult extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserSegResult)
      Message_LaserSegResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserSegResult.newBuilder() to construct.
    private Message_LaserSegResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserSegResult() {
      clusters_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserSegResult();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserSegResult_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserSegResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserSegResult.class, rbk.protocol.MessageLaser.Message_LaserSegResult.Builder.class);
    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private rbk.protocol.MessageHeader.Message_Header header_;
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_Header getHeader() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }

    public static final int CLUSTERS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_LaserCluster> clusters_;
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_LaserCluster> getClustersList() {
      return clusters_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder> 
        getClustersOrBuilderList() {
      return clusters_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    @java.lang.Override
    public int getClustersCount() {
      return clusters_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserCluster getClusters(int index) {
      return clusters_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder getClustersOrBuilder(
        int index) {
      return clusters_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (header_ != null) {
        output.writeMessage(1, getHeader());
      }
      for (int i = 0; i < clusters_.size(); i++) {
        output.writeMessage(2, clusters_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      for (int i = 0; i < clusters_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, clusters_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserSegResult)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserSegResult other = (rbk.protocol.MessageLaser.Message_LaserSegResult) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (!getClustersList()
          .equals(other.getClustersList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (getClustersCount() > 0) {
        hash = (37 * hash) + CLUSTERS_FIELD_NUMBER;
        hash = (53 * hash) + getClustersList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserSegResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserSegResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserSegResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserSegResult)
        rbk.protocol.MessageLaser.Message_LaserSegResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserSegResult_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserSegResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserSegResult.class, rbk.protocol.MessageLaser.Message_LaserSegResult.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserSegResult.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        if (clustersBuilder_ == null) {
          clusters_ = java.util.Collections.emptyList();
        } else {
          clusters_ = null;
          clustersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserSegResult_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserSegResult getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserSegResult.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserSegResult build() {
        rbk.protocol.MessageLaser.Message_LaserSegResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserSegResult buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserSegResult result = new rbk.protocol.MessageLaser.Message_LaserSegResult(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_LaserSegResult result) {
        if (clustersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            clusters_ = java.util.Collections.unmodifiableList(clusters_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.clusters_ = clusters_;
        } else {
          result.clusters_ = clustersBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserSegResult result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.header_ = headerBuilder_ == null
              ? header_
              : headerBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserSegResult) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserSegResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserSegResult other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserSegResult.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (clustersBuilder_ == null) {
          if (!other.clusters_.isEmpty()) {
            if (clusters_.isEmpty()) {
              clusters_ = other.clusters_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureClustersIsMutable();
              clusters_.addAll(other.clusters_);
            }
            onChanged();
          }
        } else {
          if (!other.clusters_.isEmpty()) {
            if (clustersBuilder_.isEmpty()) {
              clustersBuilder_.dispose();
              clustersBuilder_ = null;
              clusters_ = other.clusters_;
              bitField0_ = (bitField0_ & ~0x00000002);
              clustersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getClustersFieldBuilder() : null;
            } else {
              clustersBuilder_.addAllMessages(other.clusters_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getHeaderFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                rbk.protocol.MessageLaser.Message_LaserCluster m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_LaserCluster.parser(),
                        extensionRegistry);
                if (clustersBuilder_ == null) {
                  ensureClustersIsMutable();
                  clusters_.add(m);
                } else {
                  clustersBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private rbk.protocol.MessageHeader.Message_Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       * @return The header.
       */
      public rbk.protocol.MessageHeader.Message_Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder setHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder setHeader(
          rbk.protocol.MessageHeader.Message_Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder mergeHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            header_ != null &&
            header_ != rbk.protocol.MessageHeader.Message_Header.getDefaultInstance()) {
            getHeaderBuilder().mergeFrom(value);
          } else {
            header_ = value;
          }
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder clearHeader() {
        bitField0_ = (bitField0_ & ~0x00000001);
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public rbk.protocol.MessageHeader.Message_Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_LaserCluster> clusters_ =
        java.util.Collections.emptyList();
      private void ensureClustersIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          clusters_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_LaserCluster>(clusters_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserCluster, rbk.protocol.MessageLaser.Message_LaserCluster.Builder, rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder> clustersBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserCluster> getClustersList() {
        if (clustersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(clusters_);
        } else {
          return clustersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public int getClustersCount() {
        if (clustersBuilder_ == null) {
          return clusters_.size();
        } else {
          return clustersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserCluster getClusters(int index) {
        if (clustersBuilder_ == null) {
          return clusters_.get(index);
        } else {
          return clustersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder setClusters(
          int index, rbk.protocol.MessageLaser.Message_LaserCluster value) {
        if (clustersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClustersIsMutable();
          clusters_.set(index, value);
          onChanged();
        } else {
          clustersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder setClusters(
          int index, rbk.protocol.MessageLaser.Message_LaserCluster.Builder builderForValue) {
        if (clustersBuilder_ == null) {
          ensureClustersIsMutable();
          clusters_.set(index, builderForValue.build());
          onChanged();
        } else {
          clustersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder addClusters(rbk.protocol.MessageLaser.Message_LaserCluster value) {
        if (clustersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClustersIsMutable();
          clusters_.add(value);
          onChanged();
        } else {
          clustersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder addClusters(
          int index, rbk.protocol.MessageLaser.Message_LaserCluster value) {
        if (clustersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureClustersIsMutable();
          clusters_.add(index, value);
          onChanged();
        } else {
          clustersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder addClusters(
          rbk.protocol.MessageLaser.Message_LaserCluster.Builder builderForValue) {
        if (clustersBuilder_ == null) {
          ensureClustersIsMutable();
          clusters_.add(builderForValue.build());
          onChanged();
        } else {
          clustersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder addClusters(
          int index, rbk.protocol.MessageLaser.Message_LaserCluster.Builder builderForValue) {
        if (clustersBuilder_ == null) {
          ensureClustersIsMutable();
          clusters_.add(index, builderForValue.build());
          onChanged();
        } else {
          clustersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder addAllClusters(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_LaserCluster> values) {
        if (clustersBuilder_ == null) {
          ensureClustersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, clusters_);
          onChanged();
        } else {
          clustersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder clearClusters() {
        if (clustersBuilder_ == null) {
          clusters_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          clustersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public Builder removeClusters(int index) {
        if (clustersBuilder_ == null) {
          ensureClustersIsMutable();
          clusters_.remove(index);
          onChanged();
        } else {
          clustersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserCluster.Builder getClustersBuilder(
          int index) {
        return getClustersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder getClustersOrBuilder(
          int index) {
        if (clustersBuilder_ == null) {
          return clusters_.get(index);  } else {
          return clustersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder> 
           getClustersOrBuilderList() {
        if (clustersBuilder_ != null) {
          return clustersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(clusters_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserCluster.Builder addClustersBuilder() {
        return getClustersFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_LaserCluster.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserCluster.Builder addClustersBuilder(
          int index) {
        return getClustersFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_LaserCluster.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserCluster clusters = 2;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserCluster.Builder> 
           getClustersBuilderList() {
        return getClustersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserCluster, rbk.protocol.MessageLaser.Message_LaserCluster.Builder, rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder> 
          getClustersFieldBuilder() {
        if (clustersBuilder_ == null) {
          clustersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserCluster, rbk.protocol.MessageLaser.Message_LaserCluster.Builder, rbk.protocol.MessageLaser.Message_LaserClusterOrBuilder>(
                  clusters_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          clusters_ = null;
        }
        return clustersBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserSegResult)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserSegResult)
    private static final rbk.protocol.MessageLaser.Message_LaserSegResult DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserSegResult();
    }

    public static rbk.protocol.MessageLaser.Message_LaserSegResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserSegResult>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserSegResult>() {
      @java.lang.Override
      public Message_LaserSegResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserSegResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserSegResult> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserSegResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_SensorPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_SensorPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 世界坐标x
     * </pre>
     *
     * <code>double x = 1;</code>
     * @return The x.
     */
    double getX();

    /**
     * <pre>
     * 世界坐标y
     * </pre>
     *
     * <code>double y = 2;</code>
     * @return The y.
     */
    double getY();

    /**
     * <pre>
     * 世界坐标z
     * </pre>
     *
     * <code>double z = 3;</code>
     * @return The z.
     */
    double getZ();

    /**
     * <pre>
     * 是否是障碍物
     * </pre>
     *
     * <code>bool is_obstacle = 4;</code>
     * @return The isObstacle.
     */
    boolean getIsObstacle();

    /**
     * <pre>
     * 如果是激光则为rssi，其他为-1
     * </pre>
     *
     * <code>double rssi = 5;</code>
     * @return The rssi.
     */
    double getRssi();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_SensorPoint}
   */
  public static final class Message_SensorPoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_SensorPoint)
      Message_SensorPointOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_SensorPoint.newBuilder() to construct.
    private Message_SensorPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_SensorPoint() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_SensorPoint();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_SensorPoint.class, rbk.protocol.MessageLaser.Message_SensorPoint.Builder.class);
    }

    public static final int X_FIELD_NUMBER = 1;
    private double x_ = 0D;
    /**
     * <pre>
     * 世界坐标x
     * </pre>
     *
     * <code>double x = 1;</code>
     * @return The x.
     */
    @java.lang.Override
    public double getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private double y_ = 0D;
    /**
     * <pre>
     * 世界坐标y
     * </pre>
     *
     * <code>double y = 2;</code>
     * @return The y.
     */
    @java.lang.Override
    public double getY() {
      return y_;
    }

    public static final int Z_FIELD_NUMBER = 3;
    private double z_ = 0D;
    /**
     * <pre>
     * 世界坐标z
     * </pre>
     *
     * <code>double z = 3;</code>
     * @return The z.
     */
    @java.lang.Override
    public double getZ() {
      return z_;
    }

    public static final int IS_OBSTACLE_FIELD_NUMBER = 4;
    private boolean isObstacle_ = false;
    /**
     * <pre>
     * 是否是障碍物
     * </pre>
     *
     * <code>bool is_obstacle = 4;</code>
     * @return The isObstacle.
     */
    @java.lang.Override
    public boolean getIsObstacle() {
      return isObstacle_;
    }

    public static final int RSSI_FIELD_NUMBER = 5;
    private double rssi_ = 0D;
    /**
     * <pre>
     * 如果是激光则为rssi，其他为-1
     * </pre>
     *
     * <code>double rssi = 5;</code>
     * @return The rssi.
     */
    @java.lang.Override
    public double getRssi() {
      return rssi_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(x_) != 0) {
        output.writeDouble(1, x_);
      }
      if (java.lang.Double.doubleToRawLongBits(y_) != 0) {
        output.writeDouble(2, y_);
      }
      if (java.lang.Double.doubleToRawLongBits(z_) != 0) {
        output.writeDouble(3, z_);
      }
      if (isObstacle_ != false) {
        output.writeBool(4, isObstacle_);
      }
      if (java.lang.Double.doubleToRawLongBits(rssi_) != 0) {
        output.writeDouble(5, rssi_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(x_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, x_);
      }
      if (java.lang.Double.doubleToRawLongBits(y_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, y_);
      }
      if (java.lang.Double.doubleToRawLongBits(z_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, z_);
      }
      if (isObstacle_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isObstacle_);
      }
      if (java.lang.Double.doubleToRawLongBits(rssi_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, rssi_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_SensorPoint)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_SensorPoint other = (rbk.protocol.MessageLaser.Message_SensorPoint) obj;

      if (java.lang.Double.doubleToLongBits(getX())
          != java.lang.Double.doubleToLongBits(
              other.getX())) return false;
      if (java.lang.Double.doubleToLongBits(getY())
          != java.lang.Double.doubleToLongBits(
              other.getY())) return false;
      if (java.lang.Double.doubleToLongBits(getZ())
          != java.lang.Double.doubleToLongBits(
              other.getZ())) return false;
      if (getIsObstacle()
          != other.getIsObstacle()) return false;
      if (java.lang.Double.doubleToLongBits(getRssi())
          != java.lang.Double.doubleToLongBits(
              other.getRssi())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getX()));
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getY()));
      hash = (37 * hash) + Z_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getZ()));
      hash = (37 * hash) + IS_OBSTACLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsObstacle());
      hash = (37 * hash) + RSSI_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRssi()));
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_SensorPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_SensorPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_SensorPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_SensorPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_SensorPoint)
        rbk.protocol.MessageLaser.Message_SensorPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_SensorPoint.class, rbk.protocol.MessageLaser.Message_SensorPoint.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_SensorPoint.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        x_ = 0D;
        y_ = 0D;
        z_ = 0D;
        isObstacle_ = false;
        rssi_ = 0D;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPoint_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPoint getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_SensorPoint.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPoint build() {
        rbk.protocol.MessageLaser.Message_SensorPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPoint buildPartial() {
        rbk.protocol.MessageLaser.Message_SensorPoint result = new rbk.protocol.MessageLaser.Message_SensorPoint(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_SensorPoint result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.x_ = x_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.y_ = y_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.z_ = z_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.isObstacle_ = isObstacle_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.rssi_ = rssi_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_SensorPoint) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_SensorPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_SensorPoint other) {
        if (other == rbk.protocol.MessageLaser.Message_SensorPoint.getDefaultInstance()) return this;
        if (other.getX() != 0D) {
          setX(other.getX());
        }
        if (other.getY() != 0D) {
          setY(other.getY());
        }
        if (other.getZ() != 0D) {
          setZ(other.getZ());
        }
        if (other.getIsObstacle() != false) {
          setIsObstacle(other.getIsObstacle());
        }
        if (other.getRssi() != 0D) {
          setRssi(other.getRssi());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                x_ = input.readDouble();
                bitField0_ |= 0x00000001;
                break;
              } // case 9
              case 17: {
                y_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                z_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 32: {
                isObstacle_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 41: {
                rssi_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double x_ ;
      /**
       * <pre>
       * 世界坐标x
       * </pre>
       *
       * <code>double x = 1;</code>
       * @return The x.
       */
      @java.lang.Override
      public double getX() {
        return x_;
      }
      /**
       * <pre>
       * 世界坐标x
       * </pre>
       *
       * <code>double x = 1;</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(double value) {

        x_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 世界坐标x
       * </pre>
       *
       * <code>double x = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0D;
        onChanged();
        return this;
      }

      private double y_ ;
      /**
       * <pre>
       * 世界坐标y
       * </pre>
       *
       * <code>double y = 2;</code>
       * @return The y.
       */
      @java.lang.Override
      public double getY() {
        return y_;
      }
      /**
       * <pre>
       * 世界坐标y
       * </pre>
       *
       * <code>double y = 2;</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(double value) {

        y_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 世界坐标y
       * </pre>
       *
       * <code>double y = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0D;
        onChanged();
        return this;
      }

      private double z_ ;
      /**
       * <pre>
       * 世界坐标z
       * </pre>
       *
       * <code>double z = 3;</code>
       * @return The z.
       */
      @java.lang.Override
      public double getZ() {
        return z_;
      }
      /**
       * <pre>
       * 世界坐标z
       * </pre>
       *
       * <code>double z = 3;</code>
       * @param value The z to set.
       * @return This builder for chaining.
       */
      public Builder setZ(double value) {

        z_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 世界坐标z
       * </pre>
       *
       * <code>double z = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        z_ = 0D;
        onChanged();
        return this;
      }

      private boolean isObstacle_ ;
      /**
       * <pre>
       * 是否是障碍物
       * </pre>
       *
       * <code>bool is_obstacle = 4;</code>
       * @return The isObstacle.
       */
      @java.lang.Override
      public boolean getIsObstacle() {
        return isObstacle_;
      }
      /**
       * <pre>
       * 是否是障碍物
       * </pre>
       *
       * <code>bool is_obstacle = 4;</code>
       * @param value The isObstacle to set.
       * @return This builder for chaining.
       */
      public Builder setIsObstacle(boolean value) {

        isObstacle_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 是否是障碍物
       * </pre>
       *
       * <code>bool is_obstacle = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsObstacle() {
        bitField0_ = (bitField0_ & ~0x00000008);
        isObstacle_ = false;
        onChanged();
        return this;
      }

      private double rssi_ ;
      /**
       * <pre>
       * 如果是激光则为rssi，其他为-1
       * </pre>
       *
       * <code>double rssi = 5;</code>
       * @return The rssi.
       */
      @java.lang.Override
      public double getRssi() {
        return rssi_;
      }
      /**
       * <pre>
       * 如果是激光则为rssi，其他为-1
       * </pre>
       *
       * <code>double rssi = 5;</code>
       * @param value The rssi to set.
       * @return This builder for chaining.
       */
      public Builder setRssi(double value) {

        rssi_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 如果是激光则为rssi，其他为-1
       * </pre>
       *
       * <code>double rssi = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearRssi() {
        bitField0_ = (bitField0_ & ~0x00000010);
        rssi_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_SensorPoint)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_SensorPoint)
    private static final rbk.protocol.MessageLaser.Message_SensorPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_SensorPoint();
    }

    public static rbk.protocol.MessageLaser.Message_SensorPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_SensorPoint>
        PARSER = new com.google.protobuf.AbstractParser<Message_SensorPoint>() {
      @java.lang.Override
      public Message_SensorPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_SensorPoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_SensorPoint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_SensorPointClusterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_SensorPointCluster)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 各种类型的数据的时间戳
     * </pre>
     *
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <pre>
     * 各种类型的数据的时间戳
     * </pre>
     *
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return The header.
     */
    rbk.protocol.MessageHeader.Message_Header getHeader();
    /**
     * <pre>
     * 各种类型的数据的时间戳
     * </pre>
     *
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     */
    rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <pre>
     * 点云数据的类型
     * </pre>
     *
     * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * 点云数据的类型
     * </pre>
     *
     * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
     * @return The type.
     */
    rbk.protocol.MessageLaser.Message_SensorPointCluster.Type getType();

    /**
     * <pre>
     * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
     * </pre>
     *
     * <code>string id = 3;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
     * </pre>
     *
     * <code>string id = 3;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_SensorPoint> 
        getPointList();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    rbk.protocol.MessageLaser.Message_SensorPoint getPoint(int index);
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    int getPointCount();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointOrBuilder> 
        getPointOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    rbk.protocol.MessageLaser.Message_SensorPointOrBuilder getPointOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_SensorPointCluster}
   */
  public static final class Message_SensorPointCluster extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_SensorPointCluster)
      Message_SensorPointClusterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_SensorPointCluster.newBuilder() to construct.
    private Message_SensorPointCluster(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_SensorPointCluster() {
      type_ = 0;
      id_ = "";
      point_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_SensorPointCluster();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCluster_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCluster_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_SensorPointCluster.class, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder.class);
    }

    /**
     * Protobuf enum {@code rbk.protocol.Message_SensorPointCluster.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>Ultrasonic = 0;</code>
       */
      Ultrasonic(0),
      /**
       * <code>Laser = 1;</code>
       */
      Laser(1),
      /**
       * <code>Fallingdown = 2;</code>
       */
      Fallingdown(2),
      /**
       * <code>Collision = 3;</code>
       */
      Collision(3),
      /**
       * <code>Infrared = 4;</code>
       */
      Infrared(4),
      /**
       * <code>VirtualPoint = 5;</code>
       */
      VirtualPoint(5),
      /**
       * <code>APIObstacle = 6;</code>
       */
      APIObstacle(6),
      /**
       * <code>ReservedPoint = 7;</code>
       */
      ReservedPoint(7),
      /**
       * <code>DiUltrasonic = 8;</code>
       */
      DiUltrasonic(8),
      /**
       * <code>DepthCamera = 9;</code>
       */
      DepthCamera(9),
      /**
       * <code>ReservedDepthCamera = 10;</code>
       */
      ReservedDepthCamera(10),
      /**
       * <code>DistanceNode = 11;</code>
       */
      DistanceNode(11),
      /**
       * <code>ADCollision = 12;</code>
       */
      ADCollision(12),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>Ultrasonic = 0;</code>
       */
      public static final int Ultrasonic_VALUE = 0;
      /**
       * <code>Laser = 1;</code>
       */
      public static final int Laser_VALUE = 1;
      /**
       * <code>Fallingdown = 2;</code>
       */
      public static final int Fallingdown_VALUE = 2;
      /**
       * <code>Collision = 3;</code>
       */
      public static final int Collision_VALUE = 3;
      /**
       * <code>Infrared = 4;</code>
       */
      public static final int Infrared_VALUE = 4;
      /**
       * <code>VirtualPoint = 5;</code>
       */
      public static final int VirtualPoint_VALUE = 5;
      /**
       * <code>APIObstacle = 6;</code>
       */
      public static final int APIObstacle_VALUE = 6;
      /**
       * <code>ReservedPoint = 7;</code>
       */
      public static final int ReservedPoint_VALUE = 7;
      /**
       * <code>DiUltrasonic = 8;</code>
       */
      public static final int DiUltrasonic_VALUE = 8;
      /**
       * <code>DepthCamera = 9;</code>
       */
      public static final int DepthCamera_VALUE = 9;
      /**
       * <code>ReservedDepthCamera = 10;</code>
       */
      public static final int ReservedDepthCamera_VALUE = 10;
      /**
       * <code>DistanceNode = 11;</code>
       */
      public static final int DistanceNode_VALUE = 11;
      /**
       * <code>ADCollision = 12;</code>
       */
      public static final int ADCollision_VALUE = 12;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return Ultrasonic;
          case 1: return Laser;
          case 2: return Fallingdown;
          case 3: return Collision;
          case 4: return Infrared;
          case 5: return VirtualPoint;
          case 6: return APIObstacle;
          case 7: return ReservedPoint;
          case 8: return DiUltrasonic;
          case 9: return DepthCamera;
          case 10: return ReservedDepthCamera;
          case 11: return DistanceNode;
          case 12: return ADCollision;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.Message_SensorPointCluster.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:rbk.protocol.Message_SensorPointCluster.Type)
    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private rbk.protocol.MessageHeader.Message_Header header_;
    /**
     * <pre>
     * 各种类型的数据的时间戳
     * </pre>
     *
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <pre>
     * 各种类型的数据的时间戳
     * </pre>
     *
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_Header getHeader() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }
    /**
     * <pre>
     * 各种类型的数据的时间戳
     * </pre>
     *
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_ = 0;
    /**
     * <pre>
     * 点云数据的类型
     * </pre>
     *
     * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * 点云数据的类型
     * </pre>
     *
     * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
     * @return The type.
     */
    @java.lang.Override public rbk.protocol.MessageLaser.Message_SensorPointCluster.Type getType() {
      rbk.protocol.MessageLaser.Message_SensorPointCluster.Type result = rbk.protocol.MessageLaser.Message_SensorPointCluster.Type.forNumber(type_);
      return result == null ? rbk.protocol.MessageLaser.Message_SensorPointCluster.Type.UNRECOGNIZED : result;
    }

    public static final int ID_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object id_ = "";
    /**
     * <pre>
     * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
     * </pre>
     *
     * <code>string id = 3;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
     * </pre>
     *
     * <code>string id = 3;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int POINT_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_SensorPoint> point_;
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_SensorPoint> getPointList() {
      return point_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointOrBuilder> 
        getPointOrBuilderList() {
      return point_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    @java.lang.Override
    public int getPointCount() {
      return point_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPoint getPoint(int index) {
      return point_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPointOrBuilder getPointOrBuilder(
        int index) {
      return point_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (header_ != null) {
        output.writeMessage(1, getHeader());
      }
      if (type_ != rbk.protocol.MessageLaser.Message_SensorPointCluster.Type.Ultrasonic.getNumber()) {
        output.writeEnum(2, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, id_);
      }
      for (int i = 0; i < point_.size(); i++) {
        output.writeMessage(4, point_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      if (type_ != rbk.protocol.MessageLaser.Message_SensorPointCluster.Type.Ultrasonic.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, id_);
      }
      for (int i = 0; i < point_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, point_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_SensorPointCluster)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_SensorPointCluster other = (rbk.protocol.MessageLaser.Message_SensorPointCluster) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (type_ != other.type_) return false;
      if (!getId()
          .equals(other.getId())) return false;
      if (!getPointList()
          .equals(other.getPointList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      if (getPointCount() > 0) {
        hash = (37 * hash) + POINT_FIELD_NUMBER;
        hash = (53 * hash) + getPointList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCluster parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_SensorPointCluster prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_SensorPointCluster}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_SensorPointCluster)
        rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCluster_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCluster_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_SensorPointCluster.class, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_SensorPointCluster.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        type_ = 0;
        id_ = "";
        if (pointBuilder_ == null) {
          point_ = java.util.Collections.emptyList();
        } else {
          point_ = null;
          pointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCluster_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPointCluster getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_SensorPointCluster.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPointCluster build() {
        rbk.protocol.MessageLaser.Message_SensorPointCluster result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPointCluster buildPartial() {
        rbk.protocol.MessageLaser.Message_SensorPointCluster result = new rbk.protocol.MessageLaser.Message_SensorPointCluster(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_SensorPointCluster result) {
        if (pointBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            point_ = java.util.Collections.unmodifiableList(point_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.point_ = point_;
        } else {
          result.point_ = pointBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_SensorPointCluster result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.header_ = headerBuilder_ == null
              ? header_
              : headerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.id_ = id_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_SensorPointCluster) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_SensorPointCluster)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_SensorPointCluster other) {
        if (other == rbk.protocol.MessageLaser.Message_SensorPointCluster.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (pointBuilder_ == null) {
          if (!other.point_.isEmpty()) {
            if (point_.isEmpty()) {
              point_ = other.point_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensurePointIsMutable();
              point_.addAll(other.point_);
            }
            onChanged();
          }
        } else {
          if (!other.point_.isEmpty()) {
            if (pointBuilder_.isEmpty()) {
              pointBuilder_.dispose();
              pointBuilder_ = null;
              point_ = other.point_;
              bitField0_ = (bitField0_ & ~0x00000008);
              pointBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPointFieldBuilder() : null;
            } else {
              pointBuilder_.addAllMessages(other.point_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getHeaderFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                id_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                rbk.protocol.MessageLaser.Message_SensorPoint m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_SensorPoint.parser(),
                        extensionRegistry);
                if (pointBuilder_ == null) {
                  ensurePointIsMutable();
                  point_.add(m);
                } else {
                  pointBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private rbk.protocol.MessageHeader.Message_Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> headerBuilder_;
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       * @return The header.
       */
      public rbk.protocol.MessageHeader.Message_Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder setHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder setHeader(
          rbk.protocol.MessageHeader.Message_Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder mergeHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            header_ != null &&
            header_ != rbk.protocol.MessageHeader.Message_Header.getDefaultInstance()) {
            getHeaderBuilder().mergeFrom(value);
          } else {
            header_ = value;
          }
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder clearHeader() {
        bitField0_ = (bitField0_ & ~0x00000001);
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public rbk.protocol.MessageHeader.Message_Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <pre>
       * 各种类型的数据的时间戳
       * </pre>
       *
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private int type_ = 0;
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
       * @return The type.
       */
      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPointCluster.Type getType() {
        rbk.protocol.MessageLaser.Message_SensorPointCluster.Type result = rbk.protocol.MessageLaser.Message_SensorPointCluster.Type.forNumber(type_);
        return result == null ? rbk.protocol.MessageLaser.Message_SensorPointCluster.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(rbk.protocol.MessageLaser.Message_SensorPointCluster.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_SensorPointCluster.Type type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 3;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 3;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 3;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        id_ = getDefaultInstance().getId();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 3;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        id_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_SensorPoint> point_ =
        java.util.Collections.emptyList();
      private void ensurePointIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          point_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_SensorPoint>(point_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_SensorPoint, rbk.protocol.MessageLaser.Message_SensorPoint.Builder, rbk.protocol.MessageLaser.Message_SensorPointOrBuilder> pointBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_SensorPoint> getPointList() {
        if (pointBuilder_ == null) {
          return java.util.Collections.unmodifiableList(point_);
        } else {
          return pointBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public int getPointCount() {
        if (pointBuilder_ == null) {
          return point_.size();
        } else {
          return pointBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPoint getPoint(int index) {
        if (pointBuilder_ == null) {
          return point_.get(index);
        } else {
          return pointBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder setPoint(
          int index, rbk.protocol.MessageLaser.Message_SensorPoint value) {
        if (pointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointIsMutable();
          point_.set(index, value);
          onChanged();
        } else {
          pointBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder setPoint(
          int index, rbk.protocol.MessageLaser.Message_SensorPoint.Builder builderForValue) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          point_.set(index, builderForValue.build());
          onChanged();
        } else {
          pointBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder addPoint(rbk.protocol.MessageLaser.Message_SensorPoint value) {
        if (pointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointIsMutable();
          point_.add(value);
          onChanged();
        } else {
          pointBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder addPoint(
          int index, rbk.protocol.MessageLaser.Message_SensorPoint value) {
        if (pointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointIsMutable();
          point_.add(index, value);
          onChanged();
        } else {
          pointBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder addPoint(
          rbk.protocol.MessageLaser.Message_SensorPoint.Builder builderForValue) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          point_.add(builderForValue.build());
          onChanged();
        } else {
          pointBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder addPoint(
          int index, rbk.protocol.MessageLaser.Message_SensorPoint.Builder builderForValue) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          point_.add(index, builderForValue.build());
          onChanged();
        } else {
          pointBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder addAllPoint(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_SensorPoint> values) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, point_);
          onChanged();
        } else {
          pointBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder clearPoint() {
        if (pointBuilder_ == null) {
          point_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          pointBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public Builder removePoint(int index) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          point_.remove(index);
          onChanged();
        } else {
          pointBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPoint.Builder getPointBuilder(
          int index) {
        return getPointFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointOrBuilder getPointOrBuilder(
          int index) {
        if (pointBuilder_ == null) {
          return point_.get(index);  } else {
          return pointBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointOrBuilder> 
           getPointOrBuilderList() {
        if (pointBuilder_ != null) {
          return pointBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(point_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPoint.Builder addPointBuilder() {
        return getPointFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_SensorPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPoint.Builder addPointBuilder(
          int index) {
        return getPointFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_SensorPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPoint point = 4;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_SensorPoint.Builder> 
           getPointBuilderList() {
        return getPointFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_SensorPoint, rbk.protocol.MessageLaser.Message_SensorPoint.Builder, rbk.protocol.MessageLaser.Message_SensorPointOrBuilder> 
          getPointFieldBuilder() {
        if (pointBuilder_ == null) {
          pointBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_SensorPoint, rbk.protocol.MessageLaser.Message_SensorPoint.Builder, rbk.protocol.MessageLaser.Message_SensorPointOrBuilder>(
                  point_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          point_ = null;
        }
        return pointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_SensorPointCluster)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_SensorPointCluster)
    private static final rbk.protocol.MessageLaser.Message_SensorPointCluster DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_SensorPointCluster();
    }

    public static rbk.protocol.MessageLaser.Message_SensorPointCluster getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_SensorPointCluster>
        PARSER = new com.google.protobuf.AbstractParser<Message_SensorPointCluster>() {
      @java.lang.Override
      public Message_SensorPointCluster parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_SensorPointCluster> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_SensorPointCluster> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPointCluster getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_SensorPointCloudOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_SensorPointCloud)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> 
        getGlobalClusterList();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_SensorPointCluster getGlobalCluster(int index);
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    int getGlobalClusterCount();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> 
        getGlobalClusterOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder getGlobalClusterOrBuilder(
        int index);

    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> 
        getLocalClusterList();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_SensorPointCluster getLocalCluster(int index);
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    int getLocalClusterCount();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> 
        getLocalClusterOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder getLocalClusterOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_SensorPointCloud}
   */
  public static final class Message_SensorPointCloud extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_SensorPointCloud)
      Message_SensorPointCloudOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_SensorPointCloud.newBuilder() to construct.
    private Message_SensorPointCloud(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_SensorPointCloud() {
      globalCluster_ = java.util.Collections.emptyList();
      localCluster_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_SensorPointCloud();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCloud_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCloud_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_SensorPointCloud.class, rbk.protocol.MessageLaser.Message_SensorPointCloud.Builder.class);
    }

    public static final int GLOBAL_CLUSTER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> globalCluster_;
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> getGlobalClusterList() {
      return globalCluster_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> 
        getGlobalClusterOrBuilderList() {
      return globalCluster_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    @java.lang.Override
    public int getGlobalClusterCount() {
      return globalCluster_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPointCluster getGlobalCluster(int index) {
      return globalCluster_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder getGlobalClusterOrBuilder(
        int index) {
      return globalCluster_.get(index);
    }

    public static final int LOCAL_CLUSTER_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> localCluster_;
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> getLocalClusterList() {
      return localCluster_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> 
        getLocalClusterOrBuilderList() {
      return localCluster_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    @java.lang.Override
    public int getLocalClusterCount() {
      return localCluster_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPointCluster getLocalCluster(int index) {
      return localCluster_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder getLocalClusterOrBuilder(
        int index) {
      return localCluster_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < globalCluster_.size(); i++) {
        output.writeMessage(1, globalCluster_.get(i));
      }
      for (int i = 0; i < localCluster_.size(); i++) {
        output.writeMessage(2, localCluster_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < globalCluster_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, globalCluster_.get(i));
      }
      for (int i = 0; i < localCluster_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, localCluster_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_SensorPointCloud)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_SensorPointCloud other = (rbk.protocol.MessageLaser.Message_SensorPointCloud) obj;

      if (!getGlobalClusterList()
          .equals(other.getGlobalClusterList())) return false;
      if (!getLocalClusterList()
          .equals(other.getLocalClusterList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getGlobalClusterCount() > 0) {
        hash = (37 * hash) + GLOBAL_CLUSTER_FIELD_NUMBER;
        hash = (53 * hash) + getGlobalClusterList().hashCode();
      }
      if (getLocalClusterCount() > 0) {
        hash = (37 * hash) + LOCAL_CLUSTER_FIELD_NUMBER;
        hash = (53 * hash) + getLocalClusterList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_SensorPointCloud parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_SensorPointCloud prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_SensorPointCloud}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_SensorPointCloud)
        rbk.protocol.MessageLaser.Message_SensorPointCloudOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCloud_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCloud_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_SensorPointCloud.class, rbk.protocol.MessageLaser.Message_SensorPointCloud.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_SensorPointCloud.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (globalClusterBuilder_ == null) {
          globalCluster_ = java.util.Collections.emptyList();
        } else {
          globalCluster_ = null;
          globalClusterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (localClusterBuilder_ == null) {
          localCluster_ = java.util.Collections.emptyList();
        } else {
          localCluster_ = null;
          localClusterBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_SensorPointCloud_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPointCloud getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_SensorPointCloud.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPointCloud build() {
        rbk.protocol.MessageLaser.Message_SensorPointCloud result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_SensorPointCloud buildPartial() {
        rbk.protocol.MessageLaser.Message_SensorPointCloud result = new rbk.protocol.MessageLaser.Message_SensorPointCloud(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_SensorPointCloud result) {
        if (globalClusterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            globalCluster_ = java.util.Collections.unmodifiableList(globalCluster_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.globalCluster_ = globalCluster_;
        } else {
          result.globalCluster_ = globalClusterBuilder_.build();
        }
        if (localClusterBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            localCluster_ = java.util.Collections.unmodifiableList(localCluster_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.localCluster_ = localCluster_;
        } else {
          result.localCluster_ = localClusterBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_SensorPointCloud result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_SensorPointCloud) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_SensorPointCloud)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_SensorPointCloud other) {
        if (other == rbk.protocol.MessageLaser.Message_SensorPointCloud.getDefaultInstance()) return this;
        if (globalClusterBuilder_ == null) {
          if (!other.globalCluster_.isEmpty()) {
            if (globalCluster_.isEmpty()) {
              globalCluster_ = other.globalCluster_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureGlobalClusterIsMutable();
              globalCluster_.addAll(other.globalCluster_);
            }
            onChanged();
          }
        } else {
          if (!other.globalCluster_.isEmpty()) {
            if (globalClusterBuilder_.isEmpty()) {
              globalClusterBuilder_.dispose();
              globalClusterBuilder_ = null;
              globalCluster_ = other.globalCluster_;
              bitField0_ = (bitField0_ & ~0x00000001);
              globalClusterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getGlobalClusterFieldBuilder() : null;
            } else {
              globalClusterBuilder_.addAllMessages(other.globalCluster_);
            }
          }
        }
        if (localClusterBuilder_ == null) {
          if (!other.localCluster_.isEmpty()) {
            if (localCluster_.isEmpty()) {
              localCluster_ = other.localCluster_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureLocalClusterIsMutable();
              localCluster_.addAll(other.localCluster_);
            }
            onChanged();
          }
        } else {
          if (!other.localCluster_.isEmpty()) {
            if (localClusterBuilder_.isEmpty()) {
              localClusterBuilder_.dispose();
              localClusterBuilder_ = null;
              localCluster_ = other.localCluster_;
              bitField0_ = (bitField0_ & ~0x00000002);
              localClusterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLocalClusterFieldBuilder() : null;
            } else {
              localClusterBuilder_.addAllMessages(other.localCluster_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                rbk.protocol.MessageLaser.Message_SensorPointCluster m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_SensorPointCluster.parser(),
                        extensionRegistry);
                if (globalClusterBuilder_ == null) {
                  ensureGlobalClusterIsMutable();
                  globalCluster_.add(m);
                } else {
                  globalClusterBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                rbk.protocol.MessageLaser.Message_SensorPointCluster m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_SensorPointCluster.parser(),
                        extensionRegistry);
                if (localClusterBuilder_ == null) {
                  ensureLocalClusterIsMutable();
                  localCluster_.add(m);
                } else {
                  localClusterBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> globalCluster_ =
        java.util.Collections.emptyList();
      private void ensureGlobalClusterIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          globalCluster_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_SensorPointCluster>(globalCluster_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_SensorPointCluster, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder, rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> globalClusterBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> getGlobalClusterList() {
        if (globalClusterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(globalCluster_);
        } else {
          return globalClusterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public int getGlobalClusterCount() {
        if (globalClusterBuilder_ == null) {
          return globalCluster_.size();
        } else {
          return globalClusterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointCluster getGlobalCluster(int index) {
        if (globalClusterBuilder_ == null) {
          return globalCluster_.get(index);
        } else {
          return globalClusterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder setGlobalCluster(
          int index, rbk.protocol.MessageLaser.Message_SensorPointCluster value) {
        if (globalClusterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGlobalClusterIsMutable();
          globalCluster_.set(index, value);
          onChanged();
        } else {
          globalClusterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder setGlobalCluster(
          int index, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder builderForValue) {
        if (globalClusterBuilder_ == null) {
          ensureGlobalClusterIsMutable();
          globalCluster_.set(index, builderForValue.build());
          onChanged();
        } else {
          globalClusterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder addGlobalCluster(rbk.protocol.MessageLaser.Message_SensorPointCluster value) {
        if (globalClusterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGlobalClusterIsMutable();
          globalCluster_.add(value);
          onChanged();
        } else {
          globalClusterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder addGlobalCluster(
          int index, rbk.protocol.MessageLaser.Message_SensorPointCluster value) {
        if (globalClusterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGlobalClusterIsMutable();
          globalCluster_.add(index, value);
          onChanged();
        } else {
          globalClusterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder addGlobalCluster(
          rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder builderForValue) {
        if (globalClusterBuilder_ == null) {
          ensureGlobalClusterIsMutable();
          globalCluster_.add(builderForValue.build());
          onChanged();
        } else {
          globalClusterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder addGlobalCluster(
          int index, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder builderForValue) {
        if (globalClusterBuilder_ == null) {
          ensureGlobalClusterIsMutable();
          globalCluster_.add(index, builderForValue.build());
          onChanged();
        } else {
          globalClusterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder addAllGlobalCluster(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_SensorPointCluster> values) {
        if (globalClusterBuilder_ == null) {
          ensureGlobalClusterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, globalCluster_);
          onChanged();
        } else {
          globalClusterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder clearGlobalCluster() {
        if (globalClusterBuilder_ == null) {
          globalCluster_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          globalClusterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public Builder removeGlobalCluster(int index) {
        if (globalClusterBuilder_ == null) {
          ensureGlobalClusterIsMutable();
          globalCluster_.remove(index);
          onChanged();
        } else {
          globalClusterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder getGlobalClusterBuilder(
          int index) {
        return getGlobalClusterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder getGlobalClusterOrBuilder(
          int index) {
        if (globalClusterBuilder_ == null) {
          return globalCluster_.get(index);  } else {
          return globalClusterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> 
           getGlobalClusterOrBuilderList() {
        if (globalClusterBuilder_ != null) {
          return globalClusterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(globalCluster_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder addGlobalClusterBuilder() {
        return getGlobalClusterFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_SensorPointCluster.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder addGlobalClusterBuilder(
          int index) {
        return getGlobalClusterFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_SensorPointCluster.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster global_cluster = 1;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder> 
           getGlobalClusterBuilderList() {
        return getGlobalClusterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_SensorPointCluster, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder, rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> 
          getGlobalClusterFieldBuilder() {
        if (globalClusterBuilder_ == null) {
          globalClusterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_SensorPointCluster, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder, rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder>(
                  globalCluster_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          globalCluster_ = null;
        }
        return globalClusterBuilder_;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> localCluster_ =
        java.util.Collections.emptyList();
      private void ensureLocalClusterIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          localCluster_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_SensorPointCluster>(localCluster_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_SensorPointCluster, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder, rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> localClusterBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster> getLocalClusterList() {
        if (localClusterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(localCluster_);
        } else {
          return localClusterBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public int getLocalClusterCount() {
        if (localClusterBuilder_ == null) {
          return localCluster_.size();
        } else {
          return localClusterBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointCluster getLocalCluster(int index) {
        if (localClusterBuilder_ == null) {
          return localCluster_.get(index);
        } else {
          return localClusterBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder setLocalCluster(
          int index, rbk.protocol.MessageLaser.Message_SensorPointCluster value) {
        if (localClusterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocalClusterIsMutable();
          localCluster_.set(index, value);
          onChanged();
        } else {
          localClusterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder setLocalCluster(
          int index, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder builderForValue) {
        if (localClusterBuilder_ == null) {
          ensureLocalClusterIsMutable();
          localCluster_.set(index, builderForValue.build());
          onChanged();
        } else {
          localClusterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder addLocalCluster(rbk.protocol.MessageLaser.Message_SensorPointCluster value) {
        if (localClusterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocalClusterIsMutable();
          localCluster_.add(value);
          onChanged();
        } else {
          localClusterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder addLocalCluster(
          int index, rbk.protocol.MessageLaser.Message_SensorPointCluster value) {
        if (localClusterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLocalClusterIsMutable();
          localCluster_.add(index, value);
          onChanged();
        } else {
          localClusterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder addLocalCluster(
          rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder builderForValue) {
        if (localClusterBuilder_ == null) {
          ensureLocalClusterIsMutable();
          localCluster_.add(builderForValue.build());
          onChanged();
        } else {
          localClusterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder addLocalCluster(
          int index, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder builderForValue) {
        if (localClusterBuilder_ == null) {
          ensureLocalClusterIsMutable();
          localCluster_.add(index, builderForValue.build());
          onChanged();
        } else {
          localClusterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder addAllLocalCluster(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_SensorPointCluster> values) {
        if (localClusterBuilder_ == null) {
          ensureLocalClusterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, localCluster_);
          onChanged();
        } else {
          localClusterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder clearLocalCluster() {
        if (localClusterBuilder_ == null) {
          localCluster_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          localClusterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public Builder removeLocalCluster(int index) {
        if (localClusterBuilder_ == null) {
          ensureLocalClusterIsMutable();
          localCluster_.remove(index);
          onChanged();
        } else {
          localClusterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder getLocalClusterBuilder(
          int index) {
        return getLocalClusterFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder getLocalClusterOrBuilder(
          int index) {
        if (localClusterBuilder_ == null) {
          return localCluster_.get(index);  } else {
          return localClusterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> 
           getLocalClusterOrBuilderList() {
        if (localClusterBuilder_ != null) {
          return localClusterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(localCluster_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder addLocalClusterBuilder() {
        return getLocalClusterFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_SensorPointCluster.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder addLocalClusterBuilder(
          int index) {
        return getLocalClusterFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_SensorPointCluster.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_SensorPointCluster local_cluster = 2;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder> 
           getLocalClusterBuilderList() {
        return getLocalClusterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_SensorPointCluster, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder, rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder> 
          getLocalClusterFieldBuilder() {
        if (localClusterBuilder_ == null) {
          localClusterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_SensorPointCluster, rbk.protocol.MessageLaser.Message_SensorPointCluster.Builder, rbk.protocol.MessageLaser.Message_SensorPointClusterOrBuilder>(
                  localCluster_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          localCluster_ = null;
        }
        return localClusterBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_SensorPointCloud)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_SensorPointCloud)
    private static final rbk.protocol.MessageLaser.Message_SensorPointCloud DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_SensorPointCloud();
    }

    public static rbk.protocol.MessageLaser.Message_SensorPointCloud getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_SensorPointCloud>
        PARSER = new com.google.protobuf.AbstractParser<Message_SensorPointCloud>() {
      @java.lang.Override
      public Message_SensorPointCloud parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_SensorPointCloud> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_SensorPointCloud> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_SensorPointCloud getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserPoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 世界坐标x
     * </pre>
     *
     * <code>double x = 1;</code>
     * @return The x.
     */
    double getX();

    /**
     * <pre>
     * 世界坐标y
     * </pre>
     *
     * <code>double y = 2;</code>
     * @return The y.
     */
    double getY();

    /**
     * <pre>
     * 世界坐标z
     * </pre>
     *
     * <code>double z = 3;</code>
     * @return The z.
     */
    double getZ();

    /**
     * <pre>
     * 点云数据的类型
     * </pre>
     *
     * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * 点云数据的类型
     * </pre>
     *
     * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
     * @return The type.
     */
    rbk.protocol.MessageLaser.Message_LaserPoint.Type getType();

    /**
     * <pre>
     * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
     * </pre>
     *
     * <code>string id = 5;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
     * </pre>
     *
     * <code>string id = 5;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * 是否是障碍物
     * </pre>
     *
     * <code>bool is_obstacle = 6;</code>
     * @return The isObstacle.
     */
    boolean getIsObstacle();

    /**
     * <pre>
     * 如果是激光则为rssi，其他为-1
     * </pre>
     *
     * <code>double rssi = 7;</code>
     * @return The rssi.
     */
    double getRssi();

    /**
     * <pre>
     * 这个点的时间
     * </pre>
     *
     * <code>uint64 data_nsec = 8;</code>
     * @return The dataNsec.
     */
    long getDataNsec();
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserPoint}
   */
  public static final class Message_LaserPoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserPoint)
      Message_LaserPointOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserPoint.newBuilder() to construct.
    private Message_LaserPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserPoint() {
      type_ = 0;
      id_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserPoint();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserPoint.class, rbk.protocol.MessageLaser.Message_LaserPoint.Builder.class);
    }

    /**
     * Protobuf enum {@code rbk.protocol.Message_LaserPoint.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>Ultrasonic = 0;</code>
       */
      Ultrasonic(0),
      /**
       * <code>Laser = 1;</code>
       */
      Laser(1),
      /**
       * <code>Fallingdown = 2;</code>
       */
      Fallingdown(2),
      /**
       * <code>Collision = 3;</code>
       */
      Collision(3),
      /**
       * <code>Infrared = 4;</code>
       */
      Infrared(4),
      /**
       * <code>VirtualPoint = 5;</code>
       */
      VirtualPoint(5),
      /**
       * <code>APIObstacle = 6;</code>
       */
      APIObstacle(6),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>Ultrasonic = 0;</code>
       */
      public static final int Ultrasonic_VALUE = 0;
      /**
       * <code>Laser = 1;</code>
       */
      public static final int Laser_VALUE = 1;
      /**
       * <code>Fallingdown = 2;</code>
       */
      public static final int Fallingdown_VALUE = 2;
      /**
       * <code>Collision = 3;</code>
       */
      public static final int Collision_VALUE = 3;
      /**
       * <code>Infrared = 4;</code>
       */
      public static final int Infrared_VALUE = 4;
      /**
       * <code>VirtualPoint = 5;</code>
       */
      public static final int VirtualPoint_VALUE = 5;
      /**
       * <code>APIObstacle = 6;</code>
       */
      public static final int APIObstacle_VALUE = 6;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return Ultrasonic;
          case 1: return Laser;
          case 2: return Fallingdown;
          case 3: return Collision;
          case 4: return Infrared;
          case 5: return VirtualPoint;
          case 6: return APIObstacle;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.Message_LaserPoint.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:rbk.protocol.Message_LaserPoint.Type)
    }

    public static final int X_FIELD_NUMBER = 1;
    private double x_ = 0D;
    /**
     * <pre>
     * 世界坐标x
     * </pre>
     *
     * <code>double x = 1;</code>
     * @return The x.
     */
    @java.lang.Override
    public double getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private double y_ = 0D;
    /**
     * <pre>
     * 世界坐标y
     * </pre>
     *
     * <code>double y = 2;</code>
     * @return The y.
     */
    @java.lang.Override
    public double getY() {
      return y_;
    }

    public static final int Z_FIELD_NUMBER = 3;
    private double z_ = 0D;
    /**
     * <pre>
     * 世界坐标z
     * </pre>
     *
     * <code>double z = 3;</code>
     * @return The z.
     */
    @java.lang.Override
    public double getZ() {
      return z_;
    }

    public static final int TYPE_FIELD_NUMBER = 4;
    private int type_ = 0;
    /**
     * <pre>
     * 点云数据的类型
     * </pre>
     *
     * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * 点云数据的类型
     * </pre>
     *
     * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
     * @return The type.
     */
    @java.lang.Override public rbk.protocol.MessageLaser.Message_LaserPoint.Type getType() {
      rbk.protocol.MessageLaser.Message_LaserPoint.Type result = rbk.protocol.MessageLaser.Message_LaserPoint.Type.forNumber(type_);
      return result == null ? rbk.protocol.MessageLaser.Message_LaserPoint.Type.UNRECOGNIZED : result;
    }

    public static final int ID_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object id_ = "";
    /**
     * <pre>
     * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
     * </pre>
     *
     * <code>string id = 5;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
     * </pre>
     *
     * <code>string id = 5;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IS_OBSTACLE_FIELD_NUMBER = 6;
    private boolean isObstacle_ = false;
    /**
     * <pre>
     * 是否是障碍物
     * </pre>
     *
     * <code>bool is_obstacle = 6;</code>
     * @return The isObstacle.
     */
    @java.lang.Override
    public boolean getIsObstacle() {
      return isObstacle_;
    }

    public static final int RSSI_FIELD_NUMBER = 7;
    private double rssi_ = 0D;
    /**
     * <pre>
     * 如果是激光则为rssi，其他为-1
     * </pre>
     *
     * <code>double rssi = 7;</code>
     * @return The rssi.
     */
    @java.lang.Override
    public double getRssi() {
      return rssi_;
    }

    public static final int DATA_NSEC_FIELD_NUMBER = 8;
    private long dataNsec_ = 0L;
    /**
     * <pre>
     * 这个点的时间
     * </pre>
     *
     * <code>uint64 data_nsec = 8;</code>
     * @return The dataNsec.
     */
    @java.lang.Override
    public long getDataNsec() {
      return dataNsec_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(x_) != 0) {
        output.writeDouble(1, x_);
      }
      if (java.lang.Double.doubleToRawLongBits(y_) != 0) {
        output.writeDouble(2, y_);
      }
      if (java.lang.Double.doubleToRawLongBits(z_) != 0) {
        output.writeDouble(3, z_);
      }
      if (type_ != rbk.protocol.MessageLaser.Message_LaserPoint.Type.Ultrasonic.getNumber()) {
        output.writeEnum(4, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, id_);
      }
      if (isObstacle_ != false) {
        output.writeBool(6, isObstacle_);
      }
      if (java.lang.Double.doubleToRawLongBits(rssi_) != 0) {
        output.writeDouble(7, rssi_);
      }
      if (dataNsec_ != 0L) {
        output.writeUInt64(8, dataNsec_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(x_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, x_);
      }
      if (java.lang.Double.doubleToRawLongBits(y_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, y_);
      }
      if (java.lang.Double.doubleToRawLongBits(z_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, z_);
      }
      if (type_ != rbk.protocol.MessageLaser.Message_LaserPoint.Type.Ultrasonic.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, id_);
      }
      if (isObstacle_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, isObstacle_);
      }
      if (java.lang.Double.doubleToRawLongBits(rssi_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, rssi_);
      }
      if (dataNsec_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, dataNsec_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserPoint)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserPoint other = (rbk.protocol.MessageLaser.Message_LaserPoint) obj;

      if (java.lang.Double.doubleToLongBits(getX())
          != java.lang.Double.doubleToLongBits(
              other.getX())) return false;
      if (java.lang.Double.doubleToLongBits(getY())
          != java.lang.Double.doubleToLongBits(
              other.getY())) return false;
      if (java.lang.Double.doubleToLongBits(getZ())
          != java.lang.Double.doubleToLongBits(
              other.getZ())) return false;
      if (type_ != other.type_) return false;
      if (!getId()
          .equals(other.getId())) return false;
      if (getIsObstacle()
          != other.getIsObstacle()) return false;
      if (java.lang.Double.doubleToLongBits(getRssi())
          != java.lang.Double.doubleToLongBits(
              other.getRssi())) return false;
      if (getDataNsec()
          != other.getDataNsec()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getX()));
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getY()));
      hash = (37 * hash) + Z_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getZ()));
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (37 * hash) + IS_OBSTACLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsObstacle());
      hash = (37 * hash) + RSSI_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getRssi()));
      hash = (37 * hash) + DATA_NSEC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getDataNsec());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserPoint)
        rbk.protocol.MessageLaser.Message_LaserPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserPoint.class, rbk.protocol.MessageLaser.Message_LaserPoint.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserPoint.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        x_ = 0D;
        y_ = 0D;
        z_ = 0D;
        type_ = 0;
        id_ = "";
        isObstacle_ = false;
        rssi_ = 0D;
        dataNsec_ = 0L;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPoint_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserPoint getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserPoint.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserPoint build() {
        rbk.protocol.MessageLaser.Message_LaserPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserPoint buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserPoint result = new rbk.protocol.MessageLaser.Message_LaserPoint(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserPoint result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.x_ = x_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.y_ = y_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.z_ = z_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.id_ = id_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.isObstacle_ = isObstacle_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.rssi_ = rssi_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.dataNsec_ = dataNsec_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserPoint) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserPoint other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserPoint.getDefaultInstance()) return this;
        if (other.getX() != 0D) {
          setX(other.getX());
        }
        if (other.getY() != 0D) {
          setY(other.getY());
        }
        if (other.getZ() != 0D) {
          setZ(other.getZ());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          bitField0_ |= 0x00000010;
          onChanged();
        }
        if (other.getIsObstacle() != false) {
          setIsObstacle(other.getIsObstacle());
        }
        if (other.getRssi() != 0D) {
          setRssi(other.getRssi());
        }
        if (other.getDataNsec() != 0L) {
          setDataNsec(other.getDataNsec());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 9: {
                x_ = input.readDouble();
                bitField0_ |= 0x00000001;
                break;
              } // case 9
              case 17: {
                y_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                z_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 32: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                id_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 48: {
                isObstacle_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 57: {
                rssi_ = input.readDouble();
                bitField0_ |= 0x00000040;
                break;
              } // case 57
              case 64: {
                dataNsec_ = input.readUInt64();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private double x_ ;
      /**
       * <pre>
       * 世界坐标x
       * </pre>
       *
       * <code>double x = 1;</code>
       * @return The x.
       */
      @java.lang.Override
      public double getX() {
        return x_;
      }
      /**
       * <pre>
       * 世界坐标x
       * </pre>
       *
       * <code>double x = 1;</code>
       * @param value The x to set.
       * @return This builder for chaining.
       */
      public Builder setX(double value) {

        x_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 世界坐标x
       * </pre>
       *
       * <code>double x = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0D;
        onChanged();
        return this;
      }

      private double y_ ;
      /**
       * <pre>
       * 世界坐标y
       * </pre>
       *
       * <code>double y = 2;</code>
       * @return The y.
       */
      @java.lang.Override
      public double getY() {
        return y_;
      }
      /**
       * <pre>
       * 世界坐标y
       * </pre>
       *
       * <code>double y = 2;</code>
       * @param value The y to set.
       * @return This builder for chaining.
       */
      public Builder setY(double value) {

        y_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 世界坐标y
       * </pre>
       *
       * <code>double y = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0D;
        onChanged();
        return this;
      }

      private double z_ ;
      /**
       * <pre>
       * 世界坐标z
       * </pre>
       *
       * <code>double z = 3;</code>
       * @return The z.
       */
      @java.lang.Override
      public double getZ() {
        return z_;
      }
      /**
       * <pre>
       * 世界坐标z
       * </pre>
       *
       * <code>double z = 3;</code>
       * @param value The z to set.
       * @return This builder for chaining.
       */
      public Builder setZ(double value) {

        z_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 世界坐标z
       * </pre>
       *
       * <code>double z = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000004);
        z_ = 0D;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
       * @return The type.
       */
      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserPoint.Type getType() {
        rbk.protocol.MessageLaser.Message_LaserPoint.Type result = rbk.protocol.MessageLaser.Message_LaserPoint.Type.forNumber(type_);
        return result == null ? rbk.protocol.MessageLaser.Message_LaserPoint.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(rbk.protocol.MessageLaser.Message_LaserPoint.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 点云数据的类型
       * </pre>
       *
       * <code>.rbk.protocol.Message_LaserPoint.Type type = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 5;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 5;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 5;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        id_ = getDefaultInstance().getId();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 点云类型的id号，如果是激光的话，为index，APIObstacle则为障碍物名称
       * </pre>
       *
       * <code>string id = 5;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        id_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      private boolean isObstacle_ ;
      /**
       * <pre>
       * 是否是障碍物
       * </pre>
       *
       * <code>bool is_obstacle = 6;</code>
       * @return The isObstacle.
       */
      @java.lang.Override
      public boolean getIsObstacle() {
        return isObstacle_;
      }
      /**
       * <pre>
       * 是否是障碍物
       * </pre>
       *
       * <code>bool is_obstacle = 6;</code>
       * @param value The isObstacle to set.
       * @return This builder for chaining.
       */
      public Builder setIsObstacle(boolean value) {

        isObstacle_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 是否是障碍物
       * </pre>
       *
       * <code>bool is_obstacle = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsObstacle() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isObstacle_ = false;
        onChanged();
        return this;
      }

      private double rssi_ ;
      /**
       * <pre>
       * 如果是激光则为rssi，其他为-1
       * </pre>
       *
       * <code>double rssi = 7;</code>
       * @return The rssi.
       */
      @java.lang.Override
      public double getRssi() {
        return rssi_;
      }
      /**
       * <pre>
       * 如果是激光则为rssi，其他为-1
       * </pre>
       *
       * <code>double rssi = 7;</code>
       * @param value The rssi to set.
       * @return This builder for chaining.
       */
      public Builder setRssi(double value) {

        rssi_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 如果是激光则为rssi，其他为-1
       * </pre>
       *
       * <code>double rssi = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearRssi() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rssi_ = 0D;
        onChanged();
        return this;
      }

      private long dataNsec_ ;
      /**
       * <pre>
       * 这个点的时间
       * </pre>
       *
       * <code>uint64 data_nsec = 8;</code>
       * @return The dataNsec.
       */
      @java.lang.Override
      public long getDataNsec() {
        return dataNsec_;
      }
      /**
       * <pre>
       * 这个点的时间
       * </pre>
       *
       * <code>uint64 data_nsec = 8;</code>
       * @param value The dataNsec to set.
       * @return This builder for chaining.
       */
      public Builder setDataNsec(long value) {

        dataNsec_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 这个点的时间
       * </pre>
       *
       * <code>uint64 data_nsec = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearDataNsec() {
        bitField0_ = (bitField0_ & ~0x00000080);
        dataNsec_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserPoint)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserPoint)
    private static final rbk.protocol.MessageLaser.Message_LaserPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserPoint();
    }

    public static rbk.protocol.MessageLaser.Message_LaserPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserPoint>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserPoint>() {
      @java.lang.Override
      public Message_LaserPoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserPoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserPoint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserPoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface Message_LaserPointCloudOrBuilder extends
      // @@protoc_insertion_point(interface_extends:rbk.protocol.Message_LaserPointCloud)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return Whether the header field is set.
     */
    boolean hasHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return The header.
     */
    rbk.protocol.MessageHeader.Message_Header getHeader();
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     */
    rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder();

    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    java.util.List<rbk.protocol.MessageLaser.Message_LaserPoint> 
        getPointList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserPoint getPoint(int index);
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    int getPointCount();
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserPointOrBuilder> 
        getPointOrBuilderList();
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    rbk.protocol.MessageLaser.Message_LaserPointOrBuilder getPointOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code rbk.protocol.Message_LaserPointCloud}
   */
  public static final class Message_LaserPointCloud extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:rbk.protocol.Message_LaserPointCloud)
      Message_LaserPointCloudOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Message_LaserPointCloud.newBuilder() to construct.
    private Message_LaserPointCloud(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Message_LaserPointCloud() {
      point_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Message_LaserPointCloud();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPointCloud_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPointCloud_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              rbk.protocol.MessageLaser.Message_LaserPointCloud.class, rbk.protocol.MessageLaser.Message_LaserPointCloud.Builder.class);
    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private rbk.protocol.MessageHeader.Message_Header header_;
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return Whether the header field is set.
     */
    @java.lang.Override
    public boolean hasHeader() {
      return header_ != null;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_Header getHeader() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }
    /**
     * <code>.rbk.protocol.Message_Header header = 1;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
      return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
    }

    public static final int POINT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<rbk.protocol.MessageLaser.Message_LaserPoint> point_;
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    @java.lang.Override
    public java.util.List<rbk.protocol.MessageLaser.Message_LaserPoint> getPointList() {
      return point_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserPointOrBuilder> 
        getPointOrBuilderList() {
      return point_;
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    @java.lang.Override
    public int getPointCount() {
      return point_.size();
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserPoint getPoint(int index) {
      return point_.get(index);
    }
    /**
     * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
     */
    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserPointOrBuilder getPointOrBuilder(
        int index) {
      return point_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (header_ != null) {
        output.writeMessage(1, getHeader());
      }
      for (int i = 0; i < point_.size(); i++) {
        output.writeMessage(2, point_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (header_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getHeader());
      }
      for (int i = 0; i < point_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, point_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof rbk.protocol.MessageLaser.Message_LaserPointCloud)) {
        return super.equals(obj);
      }
      rbk.protocol.MessageLaser.Message_LaserPointCloud other = (rbk.protocol.MessageLaser.Message_LaserPointCloud) obj;

      if (hasHeader() != other.hasHeader()) return false;
      if (hasHeader()) {
        if (!getHeader()
            .equals(other.getHeader())) return false;
      }
      if (!getPointList()
          .equals(other.getPointList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeader()) {
        hash = (37 * hash) + HEADER_FIELD_NUMBER;
        hash = (53 * hash) + getHeader().hashCode();
      }
      if (getPointCount() > 0) {
        hash = (37 * hash) + POINT_FIELD_NUMBER;
        hash = (53 * hash) + getPointList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static rbk.protocol.MessageLaser.Message_LaserPointCloud parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(rbk.protocol.MessageLaser.Message_LaserPointCloud prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code rbk.protocol.Message_LaserPointCloud}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:rbk.protocol.Message_LaserPointCloud)
        rbk.protocol.MessageLaser.Message_LaserPointCloudOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPointCloud_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPointCloud_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                rbk.protocol.MessageLaser.Message_LaserPointCloud.class, rbk.protocol.MessageLaser.Message_LaserPointCloud.Builder.class);
      }

      // Construct using rbk.protocol.MessageLaser.Message_LaserPointCloud.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        if (pointBuilder_ == null) {
          point_ = java.util.Collections.emptyList();
        } else {
          point_ = null;
          pointBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return rbk.protocol.MessageLaser.internal_static_rbk_protocol_Message_LaserPointCloud_descriptor;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserPointCloud getDefaultInstanceForType() {
        return rbk.protocol.MessageLaser.Message_LaserPointCloud.getDefaultInstance();
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserPointCloud build() {
        rbk.protocol.MessageLaser.Message_LaserPointCloud result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public rbk.protocol.MessageLaser.Message_LaserPointCloud buildPartial() {
        rbk.protocol.MessageLaser.Message_LaserPointCloud result = new rbk.protocol.MessageLaser.Message_LaserPointCloud(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(rbk.protocol.MessageLaser.Message_LaserPointCloud result) {
        if (pointBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            point_ = java.util.Collections.unmodifiableList(point_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.point_ = point_;
        } else {
          result.point_ = pointBuilder_.build();
        }
      }

      private void buildPartial0(rbk.protocol.MessageLaser.Message_LaserPointCloud result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.header_ = headerBuilder_ == null
              ? header_
              : headerBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof rbk.protocol.MessageLaser.Message_LaserPointCloud) {
          return mergeFrom((rbk.protocol.MessageLaser.Message_LaserPointCloud)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(rbk.protocol.MessageLaser.Message_LaserPointCloud other) {
        if (other == rbk.protocol.MessageLaser.Message_LaserPointCloud.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (pointBuilder_ == null) {
          if (!other.point_.isEmpty()) {
            if (point_.isEmpty()) {
              point_ = other.point_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensurePointIsMutable();
              point_.addAll(other.point_);
            }
            onChanged();
          }
        } else {
          if (!other.point_.isEmpty()) {
            if (pointBuilder_.isEmpty()) {
              pointBuilder_.dispose();
              pointBuilder_ = null;
              point_ = other.point_;
              bitField0_ = (bitField0_ & ~0x00000002);
              pointBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPointFieldBuilder() : null;
            } else {
              pointBuilder_.addAllMessages(other.point_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getHeaderFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                rbk.protocol.MessageLaser.Message_LaserPoint m =
                    input.readMessage(
                        rbk.protocol.MessageLaser.Message_LaserPoint.parser(),
                        extensionRegistry);
                if (pointBuilder_ == null) {
                  ensurePointIsMutable();
                  point_.add(m);
                } else {
                  pointBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private rbk.protocol.MessageHeader.Message_Header header_;
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> headerBuilder_;
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       * @return Whether the header field is set.
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       * @return The header.
       */
      public rbk.protocol.MessageHeader.Message_Header getHeader() {
        if (headerBuilder_ == null) {
          return header_ == null ? rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder setHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder setHeader(
          rbk.protocol.MessageHeader.Message_Header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder mergeHeader(rbk.protocol.MessageHeader.Message_Header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            header_ != null &&
            header_ != rbk.protocol.MessageHeader.Message_Header.getDefaultInstance()) {
            getHeaderBuilder().mergeFrom(value);
          } else {
            header_ = value;
          }
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public Builder clearHeader() {
        bitField0_ = (bitField0_ & ~0x00000001);
        header_ = null;
        if (headerBuilder_ != null) {
          headerBuilder_.dispose();
          headerBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public rbk.protocol.MessageHeader.Message_Header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      public rbk.protocol.MessageHeader.Message_HeaderOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_ == null ?
              rbk.protocol.MessageHeader.Message_Header.getDefaultInstance() : header_;
        }
      }
      /**
       * <code>.rbk.protocol.Message_Header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              rbk.protocol.MessageHeader.Message_Header, rbk.protocol.MessageHeader.Message_Header.Builder, rbk.protocol.MessageHeader.Message_HeaderOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private java.util.List<rbk.protocol.MessageLaser.Message_LaserPoint> point_ =
        java.util.Collections.emptyList();
      private void ensurePointIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          point_ = new java.util.ArrayList<rbk.protocol.MessageLaser.Message_LaserPoint>(point_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserPoint, rbk.protocol.MessageLaser.Message_LaserPoint.Builder, rbk.protocol.MessageLaser.Message_LaserPointOrBuilder> pointBuilder_;

      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserPoint> getPointList() {
        if (pointBuilder_ == null) {
          return java.util.Collections.unmodifiableList(point_);
        } else {
          return pointBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public int getPointCount() {
        if (pointBuilder_ == null) {
          return point_.size();
        } else {
          return pointBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserPoint getPoint(int index) {
        if (pointBuilder_ == null) {
          return point_.get(index);
        } else {
          return pointBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder setPoint(
          int index, rbk.protocol.MessageLaser.Message_LaserPoint value) {
        if (pointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointIsMutable();
          point_.set(index, value);
          onChanged();
        } else {
          pointBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder setPoint(
          int index, rbk.protocol.MessageLaser.Message_LaserPoint.Builder builderForValue) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          point_.set(index, builderForValue.build());
          onChanged();
        } else {
          pointBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder addPoint(rbk.protocol.MessageLaser.Message_LaserPoint value) {
        if (pointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointIsMutable();
          point_.add(value);
          onChanged();
        } else {
          pointBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder addPoint(
          int index, rbk.protocol.MessageLaser.Message_LaserPoint value) {
        if (pointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePointIsMutable();
          point_.add(index, value);
          onChanged();
        } else {
          pointBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder addPoint(
          rbk.protocol.MessageLaser.Message_LaserPoint.Builder builderForValue) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          point_.add(builderForValue.build());
          onChanged();
        } else {
          pointBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder addPoint(
          int index, rbk.protocol.MessageLaser.Message_LaserPoint.Builder builderForValue) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          point_.add(index, builderForValue.build());
          onChanged();
        } else {
          pointBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder addAllPoint(
          java.lang.Iterable<? extends rbk.protocol.MessageLaser.Message_LaserPoint> values) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, point_);
          onChanged();
        } else {
          pointBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder clearPoint() {
        if (pointBuilder_ == null) {
          point_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          pointBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public Builder removePoint(int index) {
        if (pointBuilder_ == null) {
          ensurePointIsMutable();
          point_.remove(index);
          onChanged();
        } else {
          pointBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserPoint.Builder getPointBuilder(
          int index) {
        return getPointFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserPointOrBuilder getPointOrBuilder(
          int index) {
        if (pointBuilder_ == null) {
          return point_.get(index);  } else {
          return pointBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public java.util.List<? extends rbk.protocol.MessageLaser.Message_LaserPointOrBuilder> 
           getPointOrBuilderList() {
        if (pointBuilder_ != null) {
          return pointBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(point_);
        }
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserPoint.Builder addPointBuilder() {
        return getPointFieldBuilder().addBuilder(
            rbk.protocol.MessageLaser.Message_LaserPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public rbk.protocol.MessageLaser.Message_LaserPoint.Builder addPointBuilder(
          int index) {
        return getPointFieldBuilder().addBuilder(
            index, rbk.protocol.MessageLaser.Message_LaserPoint.getDefaultInstance());
      }
      /**
       * <code>repeated .rbk.protocol.Message_LaserPoint point = 2;</code>
       */
      public java.util.List<rbk.protocol.MessageLaser.Message_LaserPoint.Builder> 
           getPointBuilderList() {
        return getPointFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          rbk.protocol.MessageLaser.Message_LaserPoint, rbk.protocol.MessageLaser.Message_LaserPoint.Builder, rbk.protocol.MessageLaser.Message_LaserPointOrBuilder> 
          getPointFieldBuilder() {
        if (pointBuilder_ == null) {
          pointBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              rbk.protocol.MessageLaser.Message_LaserPoint, rbk.protocol.MessageLaser.Message_LaserPoint.Builder, rbk.protocol.MessageLaser.Message_LaserPointOrBuilder>(
                  point_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          point_ = null;
        }
        return pointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:rbk.protocol.Message_LaserPointCloud)
    }

    // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserPointCloud)
    private static final rbk.protocol.MessageLaser.Message_LaserPointCloud DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new rbk.protocol.MessageLaser.Message_LaserPointCloud();
    }

    public static rbk.protocol.MessageLaser.Message_LaserPointCloud getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Message_LaserPointCloud>
        PARSER = new com.google.protobuf.AbstractParser<Message_LaserPointCloud>() {
      @java.lang.Override
      public Message_LaserPointCloud parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Message_LaserPointCloud> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Message_LaserPointCloud> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public rbk.protocol.MessageLaser.Message_LaserPointCloud getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserInstallInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserInstallInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserDeviceInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserDeviceInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserBeam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserBeam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserBeam3D_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserBeam3D_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_Laser_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_Laser_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_Laser3D_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_Laser3D_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_AllLasers_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_AllLasers_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_AllLasers3D_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_AllLasers3D_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserClusterFeature_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserClusterFeature_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserCluster_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserCluster_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserSegResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserSegResult_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_SensorPoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_SensorPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_SensorPointCluster_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_SensorPointCluster_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_SensorPointCloud_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_SensorPointCloud_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserPoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserPoint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_rbk_protocol_Message_LaserPointCloud_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_rbk_protocol_Message_LaserPointCloud_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023message_laser.proto\022\014rbk.protocol\032\024mes" +
      "sage_header.proto\"X\n\030Message_LaserInstal" +
      "lInfo\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\013" +
      "\n\003yaw\030\004 \001(\001\022\016\n\006upside\030\005 \001(\010\"\353\001\n\027Message_" +
      "LaserDeviceInfo\022\023\n\013device_name\030\001 \001(\t\022\021\n\t" +
      "min_range\030\002 \001(\001\022\021\n\tmax_range\030\003 \001(\001\022\021\n\tmi" +
      "n_angle\030\004 \001(\001\022\021\n\tmax_angle\030\005 \001(\001\022\021\n\treal" +
      "_step\030\006 \001(\001\022\020\n\010pub_step\030\007 \001(\001\022\026\n\016time_in" +
      "crement\030\010 \001(\001\022\021\n\tscan_freq\030\t \001(\001\022\n\n\002id\030\n" +
      " \001(\r\022\023\n\013isClockWise\030\013 \001(\010\"\272\001\n\021Message_La" +
      "serBeam\022,\n\006header\030\001 \001(\0132\034.rbk.protocol.M" +
      "essage_Header\022\r\n\005angle\030\002 \001(\001\022\014\n\004dist\030\003 \001" +
      "(\001\022\t\n\001x\030\004 \001(\001\022\t\n\001y\030\005 \001(\001\022\014\n\004rssi\030\006 \001(\001\022\r" +
      "\n\005valid\030\007 \001(\010\022\022\n\nis_virtual\030\010 \001(\010\022\023\n\013is_" +
      "obstacle\030\t \001(\010\"\261\001\n\023Message_LaserBeam3D\022\n" +
      "\n\002id\030\001 \001(\r\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 " +
      "\001(\002\022\021\n\tintensity\030\005 \001(\r\022\014\n\004ring\030\006 \001(\r\022\021\n\t" +
      "timestamp\030\007 \001(\r\022\014\n\004data\030\010 \001(\014\022\024\n\014firstAz" +
      "imuth\030\t \001(\002\022\025\n\rsecondAzimuth\030\n \001(\002\"\352\002\n\rM" +
      "essage_Laser\022:\n\013device_info\030\001 \001(\0132%.rbk." +
      "protocol.Message_LaserDeviceInfo\022<\n\014inst" +
      "all_info\030\002 \001(\0132&.rbk.protocol.Message_La" +
      "serInstallInfo\022,\n\006header\030\003 \001(\0132\034.rbk.pro" +
      "tocol.Message_Header\022.\n\005beams\030\004 \003(\0132\037.rb" +
      "k.protocol.Message_LaserBeam\022\022\n\nuse_forL" +
      "oc\030\005 \001(\010\0226\n\rbeams_not_use\030\006 \003(\0132\037.rbk.pr" +
      "otocol.Message_LaserBeam\022\030\n\020is3DLocaliza" +
      "tion\030\007 \001(\010\022\033\n\023use_forBinDetection\030\010 \001(\010\"" +
      "\314\003\n\017Message_Laser3D\022:\n\013device_info\030\001 \001(\013" +
      "2%.rbk.protocol.Message_LaserDeviceInfo\022" +
      "<\n\014install_info\030\002 \001(\0132&.rbk.protocol.Mes" +
      "sage_LaserInstallInfo\022,\n\006header\030\003 \001(\0132\034." +
      "rbk.protocol.Message_Header\0222\n\007beams3D\030\004" +
      " \003(\0132!.rbk.protocol.Message_LaserBeam3D\022" +
      "\022\n\nuse_forLoc\030\005 \001(\010\0226\n\rbeams_not_use\030\006 \003" +
      "(\0132\037.rbk.protocol.Message_LaserBeam\022\030\n\020i" +
      "s3DLocalization\030\007 \001(\010\022\021\n\tlasertype\030\010 \001(\r" +
      "\022\016\n\006factor\030\t \001(\002\022\031\n\021azimuthcorrection\030\n " +
      "\003(\002\022\032\n\022verticalcorrection\030\013 \003(\002\022\035\n\025is3Do" +
      "bstacleDetection\030\014 \001(\010\"?\n\021Message_AllLas" +
      "ers\022*\n\005laser\030\001 \003(\0132\033.rbk.protocol.Messag" +
      "e_Laser\"F\n\023Message_AllLasers3D\022/\n\010lasers" +
      "3d\030\001 \003(\0132\035.rbk.protocol.Message_Laser3D\"" +
      "\323\002\n\033Message_LaserClusterFeature\022\020\n\010avg_r" +
      "ssi\030\001 \001(\001\022\022\n\nnum_points\030\002 \001(\001\022\013\n\003std\030\003 \001" +
      "(\001\022\026\n\016avg_median_dev\030\004 \001(\001\022\021\n\tprev_jump\030" +
      "\005 \001(\001\022\021\n\tnext_jump\030\006 \001(\001\022\r\n\005width\030\007 \001(\001\022" +
      "\021\n\tlinearity\030\010 \001(\001\022\023\n\013circularity\030\t \001(\001\022" +
      "\016\n\006radius\030\n \001(\001\022\027\n\017boundary_length\030\013 \001(\001" +
      "\022\020\n\010ang_diff\030\014 \001(\001\022\026\n\016mean_curvature\030\r \001" +
      "(\001\022\033\n\023boundary_regularity\030\016 \001(\001\022\013\n\003iav\030\017" +
      " \001(\001\022\017\n\007std_iav\030\020 \001(\001\"\253\002\n\024Message_LaserC" +
      "luster\022:\n\013device_info\030\001 \001(\0132%.rbk.protoc" +
      "ol.Message_LaserDeviceInfo\022<\n\014install_in" +
      "fo\030\002 \001(\0132&.rbk.protocol.Message_LaserIns" +
      "tallInfo\022,\n\006header\030\003 \001(\0132\034.rbk.protocol." +
      "Message_Header\022.\n\005beams\030\004 \003(\0132\037.rbk.prot" +
      "ocol.Message_LaserBeam\022;\n\010features\030\005 \001(\013" +
      "2).rbk.protocol.Message_LaserClusterFeat" +
      "ure\"|\n\026Message_LaserSegResult\022,\n\006header\030" +
      "\001 \001(\0132\034.rbk.protocol.Message_Header\0224\n\010c" +
      "lusters\030\002 \003(\0132\".rbk.protocol.Message_Las" +
      "erCluster\"Y\n\023Message_SensorPoint\022\t\n\001x\030\001 " +
      "\001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\023\n\013is_obstacle" +
      "\030\004 \001(\010\022\014\n\004rssi\030\005 \001(\001\"\254\003\n\032Message_SensorP" +
      "ointCluster\022,\n\006header\030\001 \001(\0132\034.rbk.protoc" +
      "ol.Message_Header\022;\n\004type\030\002 \001(\0162-.rbk.pr" +
      "otocol.Message_SensorPointCluster.Type\022\n" +
      "\n\002id\030\003 \001(\t\0220\n\005point\030\004 \003(\0132!.rbk.protocol" +
      ".Message_SensorPoint\"\344\001\n\004Type\022\016\n\nUltraso" +
      "nic\020\000\022\t\n\005Laser\020\001\022\017\n\013Fallingdown\020\002\022\r\n\tCol" +
      "lision\020\003\022\014\n\010Infrared\020\004\022\020\n\014VirtualPoint\020\005" +
      "\022\017\n\013APIObstacle\020\006\022\021\n\rReservedPoint\020\007\022\020\n\014" +
      "DiUltrasonic\020\010\022\017\n\013DepthCamera\020\t\022\027\n\023Reser" +
      "vedDepthCamera\020\n\022\020\n\014DistanceNode\020\013\022\017\n\013AD" +
      "Collision\020\014\"\235\001\n\030Message_SensorPointCloud" +
      "\022@\n\016global_cluster\030\001 \003(\0132(.rbk.protocol." +
      "Message_SensorPointCluster\022?\n\rlocal_clus" +
      "ter\030\002 \003(\0132(.rbk.protocol.Message_SensorP" +
      "ointCluster\"\240\002\n\022Message_LaserPoint\022\t\n\001x\030" +
      "\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\0223\n\004type\030\004 \001(" +
      "\0162%.rbk.protocol.Message_LaserPoint.Type" +
      "\022\n\n\002id\030\005 \001(\t\022\023\n\013is_obstacle\030\006 \001(\010\022\014\n\004rss" +
      "i\030\007 \001(\001\022\021\n\tdata_nsec\030\010 \001(\004\"r\n\004Type\022\016\n\nUl" +
      "trasonic\020\000\022\t\n\005Laser\020\001\022\017\n\013Fallingdown\020\002\022\r" +
      "\n\tCollision\020\003\022\014\n\010Infrared\020\004\022\020\n\014VirtualPo" +
      "int\020\005\022\017\n\013APIObstacle\020\006\"x\n\027Message_LaserP" +
      "ointCloud\022,\n\006header\030\001 \001(\0132\034.rbk.protocol" +
      ".Message_Header\022/\n\005point\030\002 \003(\0132 .rbk.pro" +
      "tocol.Message_LaserPointb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          rbk.protocol.MessageHeader.getDescriptor(),
        });
    internal_static_rbk_protocol_Message_LaserInstallInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_rbk_protocol_Message_LaserInstallInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserInstallInfo_descriptor,
        new java.lang.String[] { "X", "Y", "Z", "Yaw", "Upside", });
    internal_static_rbk_protocol_Message_LaserDeviceInfo_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_rbk_protocol_Message_LaserDeviceInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserDeviceInfo_descriptor,
        new java.lang.String[] { "DeviceName", "MinRange", "MaxRange", "MinAngle", "MaxAngle", "RealStep", "PubStep", "TimeIncrement", "ScanFreq", "Id", "IsClockWise", });
    internal_static_rbk_protocol_Message_LaserBeam_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_rbk_protocol_Message_LaserBeam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserBeam_descriptor,
        new java.lang.String[] { "Header", "Angle", "Dist", "X", "Y", "Rssi", "Valid", "IsVirtual", "IsObstacle", });
    internal_static_rbk_protocol_Message_LaserBeam3D_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_rbk_protocol_Message_LaserBeam3D_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserBeam3D_descriptor,
        new java.lang.String[] { "Id", "X", "Y", "Z", "Intensity", "Ring", "Timestamp", "Data", "FirstAzimuth", "SecondAzimuth", });
    internal_static_rbk_protocol_Message_Laser_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_rbk_protocol_Message_Laser_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_Laser_descriptor,
        new java.lang.String[] { "DeviceInfo", "InstallInfo", "Header", "Beams", "UseForLoc", "BeamsNotUse", "Is3DLocalization", "UseForBinDetection", });
    internal_static_rbk_protocol_Message_Laser3D_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_rbk_protocol_Message_Laser3D_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_Laser3D_descriptor,
        new java.lang.String[] { "DeviceInfo", "InstallInfo", "Header", "Beams3D", "UseForLoc", "BeamsNotUse", "Is3DLocalization", "Lasertype", "Factor", "Azimuthcorrection", "Verticalcorrection", "Is3DobstacleDetection", });
    internal_static_rbk_protocol_Message_AllLasers_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_rbk_protocol_Message_AllLasers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_AllLasers_descriptor,
        new java.lang.String[] { "Laser", });
    internal_static_rbk_protocol_Message_AllLasers3D_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_rbk_protocol_Message_AllLasers3D_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_AllLasers3D_descriptor,
        new java.lang.String[] { "Lasers3D", });
    internal_static_rbk_protocol_Message_LaserClusterFeature_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_rbk_protocol_Message_LaserClusterFeature_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserClusterFeature_descriptor,
        new java.lang.String[] { "AvgRssi", "NumPoints", "Std", "AvgMedianDev", "PrevJump", "NextJump", "Width", "Linearity", "Circularity", "Radius", "BoundaryLength", "AngDiff", "MeanCurvature", "BoundaryRegularity", "Iav", "StdIav", });
    internal_static_rbk_protocol_Message_LaserCluster_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_rbk_protocol_Message_LaserCluster_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserCluster_descriptor,
        new java.lang.String[] { "DeviceInfo", "InstallInfo", "Header", "Beams", "Features", });
    internal_static_rbk_protocol_Message_LaserSegResult_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_rbk_protocol_Message_LaserSegResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserSegResult_descriptor,
        new java.lang.String[] { "Header", "Clusters", });
    internal_static_rbk_protocol_Message_SensorPoint_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_rbk_protocol_Message_SensorPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_SensorPoint_descriptor,
        new java.lang.String[] { "X", "Y", "Z", "IsObstacle", "Rssi", });
    internal_static_rbk_protocol_Message_SensorPointCluster_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_rbk_protocol_Message_SensorPointCluster_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_SensorPointCluster_descriptor,
        new java.lang.String[] { "Header", "Type", "Id", "Point", });
    internal_static_rbk_protocol_Message_SensorPointCloud_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_rbk_protocol_Message_SensorPointCloud_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_SensorPointCloud_descriptor,
        new java.lang.String[] { "GlobalCluster", "LocalCluster", });
    internal_static_rbk_protocol_Message_LaserPoint_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_rbk_protocol_Message_LaserPoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserPoint_descriptor,
        new java.lang.String[] { "X", "Y", "Z", "Type", "Id", "IsObstacle", "Rssi", "DataNsec", });
    internal_static_rbk_protocol_Message_LaserPointCloud_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_rbk_protocol_Message_LaserPointCloud_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_rbk_protocol_Message_LaserPointCloud_descriptor,
        new java.lang.String[] { "Header", "Point", });
    rbk.protocol.MessageHeader.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
